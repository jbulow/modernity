## defunc main
   .text
   .globl _main
_main:
## frame 32 32 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1859
   movl $0,%eax
   movl %eax,32(%esp)
   .data
___L__1:
   .asciz "r"
   .text
   movl $___L__1,%eax
   movl %eax,36(%esp)
   movl _fdopen_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_stdin
## eval.l 1860
   movl $1,%eax
   movl %eax,36(%esp)
   .data
___L__2:
   .asciz "a"
   .text
   movl $___L__2,%eax
   movl %eax,32(%esp)
   movl _fdopen_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_stdout
## eval.l 1861
   movl $2,%eax
   movl %eax,32(%esp)
   .data
___L__3:
   .asciz "a"
   .text
   movl $___L__3,%eax
   movl %eax,36(%esp)
   movl _fdopen_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_stderr
## eval.l 1863
   movl _gc__initialise,%eax
   call *%eax
   movl $0,%eax
## eval.l 1865
   movl $0,%eax
   movl %eax,36(%esp)
   movl _new_2D_3Carray_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_symbols
   movl $_symbols,%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1867
   .data
___L__4:
   .asciz "t"
   .text
   movl $___L__4,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__t
## eval.l 1868
   .data
___L__5:
   .asciz "."
   .text
   movl $___L__5,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__dot
## eval.l 1869
   .data
___L__6:
   .asciz "set"
   .text
   movl $___L__6,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__set
## eval.l 1870
   .data
___L__7:
   .asciz "define"
   .text
   movl $___L__7,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__define
## eval.l 1871
   .data
___L__8:
   .asciz "lambda"
   .text
   movl $___L__8,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__lambda
## eval.l 1872
   .data
___L__9:
   .asciz "let"
   .text
   movl $___L__9,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__let
## eval.l 1873
   .data
___L__10:
   .asciz "quote"
   .text
   movl $___L__10,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__quote
## eval.l 1874
   .data
___L__11:
   .asciz "quasiquote"
   .text
   movl $___L__11,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__quasiquote
## eval.l 1875
   .data
___L__12:
   .asciz "unquote"
   .text
   movl $___L__12,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__unquote
## eval.l 1876
   .data
___L__13:
   .asciz "unquote-splicing"
   .text
   movl $___L__13,%eax
   movl %eax,36(%esp)
   movl _intern,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_s__unquote__splicing
## eval.l 1878
   movl $0,%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl _new_2D_3Cenv_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_globals
   movl $_globals,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1879
   movl _globals,%eax
   movl %eax,40(%esp)
   .data
___L__14:
   .asciz "*globals*"
   .text
   movl $___L__14,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl _globals,%eax
   movl %eax,36(%esp)
   movl _k__env__define,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_globals
   movl $_globals,%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1881
   movl _globals,%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__15
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__15
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__16
   .data
___L__17:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__17,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__16:
___L__15:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__18
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__20
   movl __3Clong_3E,%eax
   jmp ___L__21
___L__20:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__21:
   jmp ___L__19
___L__18:
   movl __3Cundefined_3E,%eax
___L__19:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__22
   movl __3Cvariable_3E,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__22:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   .data
___L__23:
   .asciz "*input*"
   .text
   movl $___L__23,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl _k__env__define,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_input
   movl $_input,%eax
   movl %eax,44(%esp)
   movl _gc__push__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1882
   movl _globals,%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__24
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__24
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__25
   .data
___L__26:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__26,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__25:
___L__24:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__27
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__29
   movl __3Clong_3E,%eax
   jmp ___L__30
___L__29:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__30:
   jmp ___L__28
___L__27:
   movl __3Cundefined_3E,%eax
___L__28:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__31
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__31:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   .data
___L__32:
   .asciz "*expanders*"
   .text
   movl $___L__32,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,48(%esp)
   movl _k__env__define,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_expanders
   movl $_expanders,%eax
   movl %eax,48(%esp)
   movl _gc__push__root,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1883
   movl _globals,%eax
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__33
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__33
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__34
   .data
___L__35:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__35,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__34:
___L__33:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__36
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__38
   movl __3Clong_3E,%eax
   jmp ___L__39
___L__38:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__39:
   jmp ___L__37
___L__36:
   movl __3Cundefined_3E,%eax
___L__37:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__40
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__40:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   .data
___L__41:
   .asciz "*encoders*"
   .text
   movl $___L__41,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl _k__env__define,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_encoders
   movl $_encoders,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1884
   movl _globals,%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__42
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__42
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__43
   .data
___L__44:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__44,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__43:
___L__42:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__45
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__47
   movl __3Clong_3E,%eax
   jmp ___L__48
___L__47:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__48:
   jmp ___L__46
___L__45:
   movl __3Cundefined_3E,%eax
___L__46:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__49
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__49:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   .data
___L__50:
   .asciz "*evaluators*"
   .text
   movl $___L__50,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl _k__env__define,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_evaluators
   movl $_evaluators,%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1885
   movl _globals,%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__51
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__51
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__52
   .data
___L__53:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__53,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__52:
___L__51:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__54
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__56
   movl __3Clong_3E,%eax
   jmp ___L__57
___L__56:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__57:
   jmp ___L__55
___L__54:
   movl __3Cundefined_3E,%eax
___L__55:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__58
   movl __3Cvariable_3E,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__58:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   .data
___L__59:
   .asciz "*applicators*"
   .text
   movl $___L__59,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl _k__env__define,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_applicators
   movl $_applicators,%eax
   movl %eax,44(%esp)
   movl _gc__push__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1889
   .data
___L__60:
   .asciz "define"
   .text
   movl $___L__60,%eax
   movl %eax,44(%esp)
   movl _subr__define,%eax
   movl %eax,32(%esp)
   movl _define_2Dfsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1890
   .data
___L__61:
   .asciz "lambda"
   .text
   movl $___L__61,%eax
   movl %eax,32(%esp)
   movl _subr__lambda,%eax
   movl %eax,44(%esp)
   movl _define_2Dfsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1891
   .data
___L__62:
   .asciz "let"
   .text
   movl $___L__62,%eax
   movl %eax,44(%esp)
   movl _subr__let,%eax
   movl %eax,32(%esp)
   movl _define_2Dfsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1892
   .data
___L__63:
   .asciz "set"
   .text
   movl $___L__63,%eax
   movl %eax,32(%esp)
   movl _subr__set,%eax
   movl %eax,44(%esp)
   movl _define_2Dfsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1893
   .data
___L__64:
   .asciz "while"
   .text
   movl $___L__64,%eax
   movl %eax,44(%esp)
   movl _subr__while,%eax
   movl %eax,32(%esp)
   movl _define_2Dfsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1894
   .data
___L__65:
   .asciz "if"
   .text
   movl $___L__65,%eax
   movl %eax,32(%esp)
   movl _subr__if,%eax
   movl %eax,44(%esp)
   movl _define_2Dfsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1895
   .data
___L__66:
   .asciz "or"
   .text
   movl $___L__66,%eax
   movl %eax,44(%esp)
   movl _subr__or,%eax
   movl %eax,32(%esp)
   movl _define_2Dfsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1896
   .data
___L__67:
   .asciz "and"
   .text
   movl $___L__67,%eax
   movl %eax,32(%esp)
   movl _subr__and,%eax
   movl %eax,44(%esp)
   movl _define_2Dfsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1897
   .data
___L__68:
   .asciz "quote"
   .text
   movl $___L__68,%eax
   movl %eax,44(%esp)
   movl _subr__quote,%eax
   movl %eax,32(%esp)
   movl _define_2Dfsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1899
   .data
___L__69:
   .asciz "defined?"
   .text
   movl $___L__69,%eax
   movl %eax,32(%esp)
   movl _subr__definedP,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1900
   .data
___L__70:
   .asciz "not"
   .text
   movl $___L__70,%eax
   movl %eax,44(%esp)
   movl _subr__not,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1901
   .data
___L__71:
   .asciz "&"
   .text
   movl $___L__71,%eax
   movl %eax,32(%esp)
   movl _subr__bitand,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1902
   .data
___L__72:
   .asciz "|"
   .text
   movl $___L__72,%eax
   movl %eax,44(%esp)
   movl _subr__bitor,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1903
   .data
___L__73:
   .asciz "^"
   .text
   movl $___L__73,%eax
   movl %eax,32(%esp)
   movl _subr__bitxor,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1904
   .data
___L__74:
   .asciz "+"
   .text
   movl $___L__74,%eax
   movl %eax,44(%esp)
   movl _subr__add,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1905
   .data
___L__75:
   .asciz "-"
   .text
   movl $___L__75,%eax
   movl %eax,32(%esp)
   movl _subr__sub,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1906
   .data
___L__76:
   .asciz "*"
   .text
   movl $___L__76,%eax
   movl %eax,44(%esp)
   movl _subr__mul,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1907
   .data
___L__77:
   .asciz "/"
   .text
   movl $___L__77,%eax
   movl %eax,32(%esp)
   movl _subr__div,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1908
   .data
___L__78:
   .asciz "<<"
   .text
   movl $___L__78,%eax
   movl %eax,44(%esp)
   movl _subr__shl,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1909
   .data
___L__79:
   .asciz ">>"
   .text
   movl $___L__79,%eax
   movl %eax,32(%esp)
   movl _subr__shr,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1910
   .data
___L__80:
   .asciz "<"
   .text
   movl $___L__80,%eax
   movl %eax,44(%esp)
   movl _subr__lt,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1911
   .data
___L__81:
   .asciz "<="
   .text
   movl $___L__81,%eax
   movl %eax,32(%esp)
   movl _subr__le,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1912
   .data
___L__82:
   .asciz "!="
   .text
   movl $___L__82,%eax
   movl %eax,44(%esp)
   movl _subr__ne,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1913
   .data
___L__83:
   .asciz "="
   .text
   movl $___L__83,%eax
   movl %eax,32(%esp)
   movl _subr__eq,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1914
   .data
___L__84:
   .asciz ">="
   .text
   movl $___L__84,%eax
   movl %eax,44(%esp)
   movl _subr__ge,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1915
   .data
___L__85:
   .asciz ">"
   .text
   movl $___L__85,%eax
   movl %eax,32(%esp)
   movl _subr__gt,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1916
   .data
___L__86:
   .asciz "abort"
   .text
   movl $___L__86,%eax
   movl %eax,44(%esp)
   movl _subr__abort,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1917
   .data
___L__87:
   .asciz "exit"
   .text
   movl $___L__87,%eax
   movl %eax,32(%esp)
   movl _subr__exit,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1918
   .data
___L__88:
   .asciz "format"
   .text
   movl $___L__88,%eax
   movl %eax,44(%esp)
   movl _subr__format,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1919
   .data
___L__89:
   .asciz "dump"
   .text
   movl $___L__89,%eax
   movl %eax,32(%esp)
   movl _subr__dump,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1920
   .data
___L__90:
   .asciz "print"
   .text
   movl $___L__90,%eax
   movl %eax,44(%esp)
   movl _subr__print,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1921
   .data
___L__91:
   .asciz "warn"
   .text
   movl $___L__91,%eax
   movl %eax,32(%esp)
   movl _subr__warn,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1922
   .data
___L__92:
   .asciz "apply"
   .text
   movl $___L__92,%eax
   movl %eax,44(%esp)
   movl _subr__apply,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1923
   .data
___L__93:
   .asciz "eval"
   .text
   movl $___L__93,%eax
   movl %eax,32(%esp)
   movl _subr__eval,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1924
   .data
___L__94:
   .asciz "encode"
   .text
   movl $___L__94,%eax
   movl %eax,44(%esp)
   movl _subr__encode,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1925
   .data
___L__95:
   .asciz "expand"
   .text
   movl $___L__95,%eax
   movl %eax,32(%esp)
   movl _subr__expand,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1926
   .data
___L__96:
   .asciz "cons"
   .text
   movl $___L__96,%eax
   movl %eax,44(%esp)
   movl _subr__cons,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1927
   .data
___L__97:
   .asciz "string"
   .text
   movl $___L__97,%eax
   movl %eax,32(%esp)
   movl _subr__string,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1928
   .data
___L__98:
   .asciz "array"
   .text
   movl $___L__98,%eax
   movl %eax,44(%esp)
   movl _subr__array,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1929
   .data
___L__99:
   .asciz "form"
   .text
   movl $___L__99,%eax
   movl %eax,32(%esp)
   movl _subr__form,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1930
   .data
___L__100:
   .asciz "open"
   .text
   movl $___L__100,%eax
   movl %eax,44(%esp)
   movl _subr__open,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1931
   .data
___L__101:
   .asciz "close"
   .text
   movl $___L__101,%eax
   movl %eax,32(%esp)
   movl _subr__close,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1932
   .data
___L__102:
   .asciz "getc"
   .text
   movl $___L__102,%eax
   movl %eax,44(%esp)
   movl _subr__getc,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1933
   .data
___L__103:
   .asciz "allocate"
   .text
   movl $___L__103,%eax
   movl %eax,32(%esp)
   movl _subr__allocate,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1934
   .data
___L__104:
   .asciz "type-of"
   .text
   movl $___L__104,%eax
   movl %eax,44(%esp)
   movl _subr__type__of,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1935
   .data
___L__105:
   .asciz "string?"
   .text
   movl $___L__105,%eax
   movl %eax,32(%esp)
   movl _subr__stringP,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1936
   .data
___L__106:
   .asciz "symbol?"
   .text
   movl $___L__106,%eax
   movl %eax,44(%esp)
   movl _subr__symbolP,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1937
   .data
___L__107:
   .asciz "pair?"
   .text
   movl $___L__107,%eax
   movl %eax,32(%esp)
   movl _subr__pairP,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1938
   .data
___L__108:
   .asciz "array?"
   .text
   movl $___L__108,%eax
   movl %eax,44(%esp)
   movl _subr__arrayP,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1939
   .data
___L__109:
   .asciz "car"
   .text
   movl $___L__109,%eax
   movl %eax,32(%esp)
   movl _subr__car,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1940
   .data
___L__110:
   .asciz "cdr"
   .text
   movl $___L__110,%eax
   movl %eax,44(%esp)
   movl _subr__cdr,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1941
   .data
___L__111:
   .asciz "set-car"
   .text
   movl $___L__111,%eax
   movl %eax,32(%esp)
   movl _subr__set__car,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1942
   .data
___L__112:
   .asciz "set-cdr"
   .text
   movl $___L__112,%eax
   movl %eax,44(%esp)
   movl _subr__set__cdr,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1943
   .data
___L__113:
   .asciz "oop-at"
   .text
   movl $___L__113,%eax
   movl %eax,32(%esp)
   movl _subr__oop__at,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1944
   .data
___L__114:
   .asciz "set-oop-at"
   .text
   movl $___L__114,%eax
   movl %eax,44(%esp)
   movl _subr__set__oop__at,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1945
   .data
___L__115:
   .asciz "array-length"
   .text
   movl $___L__115,%eax
   movl %eax,32(%esp)
   movl _subr__array__length,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1946
   .data
___L__116:
   .asciz "array-at"
   .text
   movl $___L__116,%eax
   movl %eax,44(%esp)
   movl _subr__array__at,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1947
   .data
___L__117:
   .asciz "set-array-at"
   .text
   movl $___L__117,%eax
   movl %eax,32(%esp)
   movl _subr__set__array__at,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1948
   .data
___L__118:
   .asciz "string-length"
   .text
   movl $___L__118,%eax
   movl %eax,44(%esp)
   movl _subr__string__length,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1949
   .data
___L__119:
   .asciz "string-at"
   .text
   movl $___L__119,%eax
   movl %eax,32(%esp)
   movl _subr__string__at,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1950
   .data
___L__120:
   .asciz "set-string-at"
   .text
   movl $___L__120,%eax
   movl %eax,44(%esp)
   movl _subr__set__string__at,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1951
   .data
___L__121:
   .asciz "string->symbol"
   .text
   movl $___L__121,%eax
   movl %eax,32(%esp)
   movl _subr__string__symbol,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1952
   .data
___L__122:
   .asciz "symbol->string"
   .text
   movl $___L__122,%eax
   movl %eax,44(%esp)
   movl _subr__symbol__string,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1953
   .data
___L__123:
   .asciz "long->string"
   .text
   movl $___L__123,%eax
   movl %eax,32(%esp)
   movl _subr__long__string,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1954
   .data
___L__124:
   .asciz "verbose"
   .text
   movl $___L__124,%eax
   movl %eax,44(%esp)
   movl _subr__verbose,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1955
   .data
___L__125:
   .asciz "read"
   .text
   movl $___L__125,%eax
   movl %eax,32(%esp)
   movl _subr__read,%eax
   movl %eax,44(%esp)
   movl _define_2Dsubr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1957
   .data
___L__126:
   .asciz "dlopen"
   .text
   movl $___L__126,%eax
   movl %eax,44(%esp)
   movl _subr__dlopen,%eax
   movl %eax,32(%esp)
   movl _define_2Dsubr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1961
   movl $0,%eax
   movl %eax,32(%esp)
## eval.l 1962
   leal 32(%esp),%eax
   movl %eax,44(%esp)
   movl _gc__push__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1963
   jmp ___L__128
___L__127:
## eval.l 1964
   movl $0,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1965
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 84(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _new_2D_3Cstring_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
___L__128:
## eval.l 1963
   movl $1,%eax
   movl %eax,36(%esp)
   movl 80(%esp),%eax
   subl 36(%esp),%eax
   movl %eax,80(%esp)
   movl %eax,36(%esp)
   movl $0,%eax
   cmpl 36(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__127
## eval.l 1966
   movl _globals,%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__129
   movl $1,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__129
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__130
   .data
___L__131:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__131,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__130:
___L__129:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__132
   movl $1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__134
   movl __3Clong_3E,%eax
   jmp ___L__135
___L__134:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__135:
   jmp ___L__133
___L__132:
   movl __3Cundefined_3E,%eax
___L__133:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__136
   movl __3Cvariable_3E,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__136:
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   .data
___L__137:
   .asciz "*arguments*"
   .text
   movl $___L__137,%eax
   movl %eax,44(%esp)
   movl _intern,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _k__env__define,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,_arguments
   movl %eax,40(%esp)
## eval.l 1962
   leal 32(%esp),%eax
   movl %eax,44(%esp)
   movl _gc__pop__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 40(%esp),%eax
## eval.l 1968
   movl _globals,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__138
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__138
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__139
   .data
___L__140:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__140,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__139:
___L__138:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__141
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__143
   movl __3Clong_3E,%eax
   jmp ___L__144
___L__143:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__144:
   jmp ___L__142
___L__141:
   movl __3Cundefined_3E,%eax
___L__142:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__145
   movl __3Cvariable_3E,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__145:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _s__set,%eax
   movl %eax,40(%esp)
   movl _k__env__lookup,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_f__set
   movl $_f__set,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1969
   movl _globals,%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__146
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__146
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__147
   .data
___L__148:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__148,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__147:
___L__146:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__149
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__151
   movl __3Clong_3E,%eax
   jmp ___L__152
___L__151:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__152:
   jmp ___L__150
___L__149:
   movl __3Cundefined_3E,%eax
___L__150:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__153
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__153:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _s__quote,%eax
   movl %eax,32(%esp)
   movl _k__env__lookup,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_f__quote
   movl $_f__quote,%eax
   movl %eax,32(%esp)
   movl _gc__push__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1970
   movl _globals,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__154
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__154
   movl $1,%eax
   movl %eax,52(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl $1,%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__155
   .data
___L__156:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__156,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__155:
___L__154:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__157
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__159
   movl __3Clong_3E,%eax
   jmp ___L__160
___L__159:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__160:
   jmp ___L__158
___L__157:
   movl __3Cundefined_3E,%eax
___L__158:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__161
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__161:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _s__lambda,%eax
   movl %eax,40(%esp)
   movl _k__env__lookup,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_f__lambda
   movl $_f__lambda,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1971
   movl _globals,%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__162
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__162
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__163
   .data
___L__164:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__164,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__163:
___L__162:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__165
   movl $1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__167
   movl __3Clong_3E,%eax
   jmp ___L__168
___L__167:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__168:
   jmp ___L__166
___L__165:
   movl __3Cundefined_3E,%eax
___L__166:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__169
   movl __3Cvariable_3E,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__169:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _s__let,%eax
   movl %eax,32(%esp)
   movl _k__env__lookup,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_f__let
   movl $_f__let,%eax
   movl %eax,32(%esp)
   movl _gc__push__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1972
   movl _globals,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__170
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__170
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__171
   .data
___L__172:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__172,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__171:
___L__170:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__173
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__175
   movl __3Clong_3E,%eax
   jmp ___L__176
___L__175:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__176:
   jmp ___L__174
___L__173:
   movl __3Cundefined_3E,%eax
___L__174:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__177
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__177:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _s__define,%eax
   movl %eax,40(%esp)
   movl _k__env__lookup,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_f__define
   movl $_f__define,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1974
   movl $32,%eax
   movl %eax,40(%esp)
   movl _new_2D_3Carray_3E,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,_trace__stack
   movl $_trace__stack,%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1976
   movl _globals,%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__178
   movl $1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__178
   movl $1,%eax
   movl %eax,52(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl $1,%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__179
   .data
___L__180:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__180,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__179:
___L__178:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__181
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__183
   movl __3Clong_3E,%eax
   jmp ___L__184
___L__183:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__184:
   jmp ___L__182
___L__181:
   movl __3Cundefined_3E,%eax
___L__182:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__185
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__185:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   .data
___L__186:
   .asciz "*backtrace*"
   .text
   movl $___L__186,%eax
   movl %eax,32(%esp)
   movl _intern,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl _k__env__define,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1978
   movl _new_2D_3Creader_3E,%eax
   call *%eax
   movl %eax,_reader_2Dstate
   movl $_reader_2Dstate,%eax
   movl %eax,44(%esp)
   movl _gc__push__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1980
   movl _stderr,%eax
   movl %eax,44(%esp)
   .data
___L__187:
   .asciz "maru-2.1\012\012"
   .text
   movl $___L__187,%eax
   movl %eax,32(%esp)
   movl _fprintf_24stub,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1981
   jmp ___L__189
___L__188:
## eval.l 1982
   movl _arguments,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__190
   movl $1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__190
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__191
   .data
___L__192:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__192,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__191:
___L__190:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__193
   movl $1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__195
   movl __3Clong_3E,%eax
   jmp ___L__196
___L__195:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__196:
   jmp ___L__194
___L__193:
   movl __3Cundefined_3E,%eax
___L__194:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__197
   movl __3Cvariable_3E,%eax
   movl %eax,52(%esp)
   movl 44(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__197:
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1983
   movl $0,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
## eval.l 1982
## eval.l 1984
   movl 44(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__198
   movl $1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__198
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 52(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__199
   .data
___L__200:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__200,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__199:
___L__198:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__201
   movl $1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__203
   movl __3Clong_3E,%eax
   jmp ___L__204
___L__203:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__204:
   jmp ___L__202
___L__201:
   movl __3Cundefined_3E,%eax
___L__202:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl __3Cstring_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__205
   movl __3Cstring_3E,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__205:
   movl $1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
## eval.l 1985
   leal 44(%esp),%eax
   movl %eax,52(%esp)
   movl _gc__push__root,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1986
   movl _arguments,%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__206
   movl $1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__206
   movl $1,%eax
   movl %eax,56(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 48(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl $1,%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   jne ___L__207
   .data
___L__208:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__208,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,60(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 60(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,60(%esp)
   movl _fatal1,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 60(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__207:
___L__206:
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__209
   movl $1,%eax
   movl %eax,60(%esp)
   movl 48(%esp),%eax
   andl 60(%esp),%eax
   cmpl $0,%eax
   je ___L__211
   movl __3Clong_3E,%eax
   jmp ___L__212
___L__211:
   movl $-1,%eax
   movl %eax,60(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 60(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__212:
   jmp ___L__210
___L__209:
   movl __3Cundefined_3E,%eax
___L__210:
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   movl %eax,60(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 60(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__213
   movl __3Cvariable_3E,%eax
   movl %eax,60(%esp)
   movl 48(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 60(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__213:
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 48(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1987
## eval.l 1988
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   .data
___L__216:
   .asciz "-v"
   .text
   movl $___L__216,%eax
   movl %eax,48(%esp)
   movl _strcmp_24stub,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__214
   movl _opt__verbose,%eax
   movl %eax,48(%esp)
   movl $1,%eax
   addl 48(%esp),%eax
   movl %eax,_opt__verbose
   jmp ___L__215
___L__214:
## eval.l 1987
## eval.l 1989
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   .data
___L__219:
   .asciz "-"
   .text
   movl $___L__219,%eax
   movl %eax,52(%esp)
   movl _strcmp_24stub,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__217
## eval.l 1990
## eval.l 1991
   .data
___L__220:
   .asciz "stdin"
   .text
   movl $___L__220,%eax
   movl %eax,52(%esp)
   movl $0,%eax
   movl %eax,48(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 48(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 52(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1992
   movl $0,%eax
   movl %eax,52(%esp)
   movl $1,%eax
   movl %eax,48(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 48(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 52(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1993
   movl $0,%eax
   movl %eax,52(%esp)
   movl $2,%eax
   movl %eax,48(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 48(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 52(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1995
   movl _stdin,%eax
   movl %eax,52(%esp)
   movl _repl__stream,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__218
___L__217:
## eval.l 1996
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   .data
___L__221:
   .asciz "r"
   .text
   movl $___L__221,%eax
   movl %eax,48(%esp)
   movl _fopen_24stub,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,48(%esp)
## eval.l 1997
   movl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__222
   .data
___L__223:
   .asciz "no such file: %s"
   .text
   movl $___L__223,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__222:
## eval.l 1999
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $0,%eax
   movl %eax,52(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 52(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
## eval.l 2000
   movl $0,%eax
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,52(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 52(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
## eval.l 2001
   movl $0,%eax
   movl %eax,40(%esp)
   movl $2,%eax
   movl %eax,52(%esp)
   movl _reader_2Dstate,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 52(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
## eval.l 2002
   movl 48(%esp),%eax
   movl %eax,40(%esp)
   movl _repl__stream,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 2003
   movl 48(%esp),%eax
   movl %eax,40(%esp)
   movl _fclose_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__218:
___L__215:
   movl %eax,48(%esp)
## eval.l 1985
   leal 44(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 48(%esp),%eax
___L__189:
## eval.l 1981
   movl _arguments,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__224
   movl $1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__224
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__225
   .data
___L__226:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__226,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__225:
___L__224:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__227
   movl $1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__229
   movl __3Clong_3E,%eax
   jmp ___L__230
___L__229:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__230:
   jmp ___L__228
___L__227:
   movl __3Cundefined_3E,%eax
___L__228:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__231
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__231:
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__232
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__232
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__233
   .data
___L__234:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__234,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__233:
___L__232:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__235
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__237
   movl __3Clong_3E,%eax
   jmp ___L__238
___L__237:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__238:
   jmp ___L__236
___L__235:
   movl __3Cundefined_3E,%eax
___L__236:
   movl %eax,32(%esp)
   movl __3Cpair_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__188
## eval.l 2005
   movl $0,%eax
   movl %eax,32(%esp)
   movl _opt__verbose,%eax
   cmpl 32(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__239
## eval.l 2006
## eval.l 2007
   movl _gc__gcollect,%eax
   call *%eax
## eval.l 2008
   .data
___L__240:
   .asciz "GC: %d objects in %d bytes, %d free\012"
   .text
   movl $___L__240,%eax
   movl %eax,32(%esp)
   movl _gc__objects__live,%eax
   movl %eax,40(%esp)
   movl _gc__bytes__used,%eax
   movl %eax,48(%esp)
   movl _gc__bytes__free,%eax
   movl %eax,44(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   movl 44(%esp),%ecx
   movl %ecx,12(%esp)
   call *%eax
___L__239:
## eval.l 2010
   movl _stderr,%eax
   movl %eax,44(%esp)
   .data
___L__241:
   .asciz "%d objects in %d bytes, %d free\012"
   .text
   movl $___L__241,%eax
   movl %eax,48(%esp)
   movl _gc__objects__live,%eax
   movl %eax,40(%esp)
   movl _gc__bytes__used,%eax
   movl %eax,32(%esp)
   movl _gc__bytes__free,%eax
   movl %eax,36(%esp)
   movl _fprintf_24stub,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   movl 32(%esp),%ecx
   movl %ecx,12(%esp)
   movl 36(%esp),%ecx
   movl %ecx,16(%esp)
   call *%eax
   movl $0,%eax
   addl $72,%esp
   leave
   ret
## defunc define-fsubr
   .text
___L__242:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1848
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Csubr_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1850
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1851
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl _new_2D_3Cfixed_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1852
   movl _globals,%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__243
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__243
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__244
   .data
___L__245:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__245,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__244:
___L__243:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__246
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__248
   movl __3Clong_3E,%eax
   jmp ___L__249
___L__248:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__249:
   jmp ___L__247
___L__246:
   movl __3Cundefined_3E,%eax
___L__247:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__250
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__250:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _intern,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__env__define,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1850
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc define-subr
   .text
___L__251:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1842
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Csubr_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1844
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1845
   movl _globals,%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__252
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__252
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__253
   .data
___L__254:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__254,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__253:
___L__252:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__255
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__257
   movl __3Clong_3E,%eax
   jmp ___L__258
___L__257:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__258:
   jmp ___L__256
___L__255:
   movl __3Cundefined_3E,%eax
___L__256:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__259
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__259:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _intern,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__env__define,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1844
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc subr_dlopen
   .text
___L__260:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1790
   .data
___L__261:
   .asciz "dlopen"
   .text
   movl $___L__261,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1791
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _k__dumpln,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1792
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _k__car,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1793
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl _k__cadr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
## eval.l 1795
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__263
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__263
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__264
   .data
___L__265:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__265,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__264:
___L__263:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__266
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__268
   movl __3Clong_3E,%eax
   jmp ___L__269
___L__268:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__269:
   jmp ___L__267
___L__266:
   movl __3Cundefined_3E,%eax
___L__267:
   movl %eax,28(%esp)
   movl __3Cstring_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__262
## eval.l 1796
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__270
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__270
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__271
   .data
___L__272:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__272,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__271:
___L__270:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__273
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__275
   movl __3Clong_3E,%eax
   jmp ___L__276
___L__275:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__276:
   jmp ___L__274
___L__273:
   movl __3Cundefined_3E,%eax
___L__274:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__262
## eval.l 1797
   movl $0,%eax
   jmp ___L__277
___L__262:
## eval.l 1798
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__278
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__278
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__279
   .data
___L__280:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__280,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__279:
___L__278:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__281
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__283
   movl __3Clong_3E,%eax
   jmp ___L__284
___L__283:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__284:
   jmp ___L__282
___L__281:
   movl __3Cundefined_3E,%eax
___L__282:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cstring_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__285
   movl __3Cstring_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__285:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__286
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__286
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__287
   .data
___L__288:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__288,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__287:
___L__286:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__289
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__291
   movl __3Clong_3E,%eax
   jmp ___L__292
___L__291:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__292:
   jmp ___L__290
___L__289:
   movl __3Cundefined_3E,%eax
___L__290:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__293
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__293:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _dlopen_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1799
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $0,%eax
   cmpl 32(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__294
## eval.l 1800
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__295
___L__294:
## eval.l 1801
   movl $0,%eax
   call *%eax
___L__295:
___L__277:
   addl $72,%esp
   leave
   ret
## defunc subr_read
   .text
___L__296:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1756
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__297
## eval.l 1757
   movl _stdin,%eax
   movl %eax,16(%esp)
   movl _k__read,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1758
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _DONE,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__299
   movl $0,%eax
   movl %eax,16(%esp)
___L__299:
   movl 16(%esp),%eax
   jmp ___L__298
___L__297:
## eval.l 1760
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1761
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__301
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__301
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__302
   .data
___L__303:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__303,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__302:
___L__301:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__304
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__306
   movl __3Clong_3E,%eax
   jmp ___L__307
___L__306:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__307:
   jmp ___L__305
___L__304:
   movl __3Cundefined_3E,%eax
___L__305:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__300
   .data
___L__308:
   .asciz "read: non-String argument: "
   .text
   movl $___L__308,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__300:
## eval.l 1762
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__309
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__309
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__310
   .data
___L__311:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__311,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__310:
___L__309:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__312
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__314
   movl __3Clong_3E,%eax
   jmp ___L__315
___L__314:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__315:
   jmp ___L__313
___L__312:
   movl __3Cundefined_3E,%eax
___L__313:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__316
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__316:
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1763
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   .data
___L__317:
   .asciz "r"
   .text
   movl $___L__317,%eax
   movl %eax,24(%esp)
   movl _fopen_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1764
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__318
## eval.l 1765
   movl $0,%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
## eval.l 1768
   leal 36(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 28(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1769
   jmp ___L__321
___L__320:
## eval.l 1770
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,44(%esp)
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 44(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,20(%esp)
___L__321:
## eval.l 1769
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl _k__read,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
   movl %eax,44(%esp)
   movl _DONE,%eax
   cmpl 44(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__320
   movl %eax,44(%esp)
## eval.l 1768
   leal 28(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 36(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 44(%esp),%eax
## eval.l 1771
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl _fclose_24stub,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1772
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   jmp ___L__319
___L__318:
   movl $0,%eax
___L__319:
___L__298:
   addl $56,%esp
   leave
   ret
## defunc repl_stream
   .text
___L__322:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1813
   movl _input,%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__323
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__323
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__324
   .data
___L__325:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__325,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__324:
___L__323:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__326
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__328
   movl __3Clong_3E,%eax
   jmp ___L__329
___L__328:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__329:
   jmp ___L__327
___L__326:
   movl __3Cundefined_3E,%eax
___L__327:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__330
   movl __3Cvariable_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__330:
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
## eval.l 1815
   leal 16(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 20(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1817
   movl _input,%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__331
   movl $1,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__331
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__332
   .data
___L__333:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__333,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__332:
___L__331:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__334
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__336
   movl __3Clong_3E,%eax
   jmp ___L__337
___L__336:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__337:
   jmp ___L__335
___L__334:
   movl __3Cundefined_3E,%eax
___L__335:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__338
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__338:
   movl 64(%esp),%eax
   movl %eax,32(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 36(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1819
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _stdin,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__339
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   .data
___L__340:
   .asciz "#!%*[^\012\015]"
   .text
   movl $___L__340,%eax
   movl %eax,32(%esp)
   movl _fscanf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__339:
## eval.l 1820
   jmp ___L__342
___L__341:
## eval.l 1824
   movl _globals,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__343
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__343
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__344
   .data
___L__345:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__345,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__344:
___L__343:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__346
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__348
   movl __3Clong_3E,%eax
   jmp ___L__349
___L__348:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__349:
   jmp ___L__347
___L__346:
   movl __3Cundefined_3E,%eax
___L__347:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__350
   movl __3Cvariable_3E,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__350:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl _new_2D_3Cenv_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,40(%esp)
## eval.l 1825
   leal 40(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1826
   movl $0,%eax
   movl %eax,28(%esp)
   movl _opt__verbose,%eax
   cmpl 28(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__351
   .data
___L__352:
   .asciz ";;; "
   .text
   movl $___L__352,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__351
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _k__dumpln,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__351:
## eval.l 1827
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _k__expand,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,32(%esp)
   movl _opt__verbose,%eax
   cmpl 32(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__353
   .data
___L__354:
   .asciz "expd--> "
   .text
   movl $___L__354,%eax
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__353
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__dumpln,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__353:
## eval.l 1828
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl _k__encode,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,28(%esp)
   movl _opt__verbose,%eax
   cmpl 28(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__355
   .data
___L__356:
   .asciz "encd--> "
   .text
   movl $___L__356,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__355
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _k__dumpln,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__355:
## eval.l 1829
   movl $0,%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2Dbase_2D_3Ccontext_3E,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1830
   leal 24(%esp),%eax
   movl %eax,32(%esp)
   movl _gc__push__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1831
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl _k__eval,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl _opt__verbose,%eax
   cmpl 28(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__357
   .data
___L__358:
   .asciz "eval--> "
   .text
   movl $___L__358,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__357
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _k__dumpln,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__357:
## eval.l 1832
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _stdin,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__359
## eval.l 1833
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _k__dumpln,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__360
___L__359:
## eval.l 1834
   movl $0,%eax
   movl %eax,28(%esp)
   movl _opt__verbose,%eax
   cmpl 28(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__361
   .data
___L__362:
   .asciz ";;; => "
   .text
   movl $___L__362,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__361
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _k__dumpln,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__361:
___L__360:
   movl %eax,28(%esp)
## eval.l 1830
   leal 24(%esp),%eax
   movl %eax,32(%esp)
   movl _gc__pop__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 28(%esp),%eax
   movl %eax,24(%esp)
## eval.l 1825
   leal 40(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__pop__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
___L__342:
## eval.l 1821
## eval.l 1822
   movl 64(%esp),%eax
   movl %eax,40(%esp)
   movl _stdin,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__363
   movl _stdout,%eax
   movl %eax,40(%esp)
   .data
___L__364:
   .asciz "."
   .text
   movl $___L__364,%eax
   movl %eax,24(%esp)
   movl _fprintf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__363
   movl _stdout,%eax
   movl %eax,24(%esp)
   movl _fflush_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__363:
## eval.l 1823
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _k__read,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl %eax,24(%esp)
   movl _DONE,%eax
   cmpl 24(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__341
## eval.l 1835
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _stdin,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__365
## eval.l 1836
   .data
___L__366:
   .asciz "\012morituri te salutant\012"
   .text
   movl $___L__366,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__365:
## eval.l 1837
   movl _input,%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__367
   movl $1,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__367
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__368
   .data
___L__369:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__369,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__368:
___L__367:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__370
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__372
   movl __3Clong_3E,%eax
   jmp ___L__373
___L__372:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__373:
   jmp ___L__371
___L__370:
   movl __3Cundefined_3E,%eax
___L__371:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__374
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__374:
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 32(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,24(%esp)
## eval.l 1815
   leal 20(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 16(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   movl 20(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc subr_verbose
   .text
___L__375:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1744
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1745
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__376
## eval.l 1746
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__379
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__379
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__380
   .data
___L__381:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__381,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__380:
___L__379:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__382
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__384
   movl __3Clong_3E,%eax
   jmp ___L__385
___L__384:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__385:
   jmp ___L__383
___L__382:
   movl __3Cundefined_3E,%eax
___L__383:
   movl %eax,20(%esp)
   movl __3Clong_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__378
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__386
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__386
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__387
   .data
___L__388:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__388,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__387:
___L__386:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__389
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__391
   movl __3Clong_3E,%eax
   jmp ___L__392
___L__391:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__392:
   jmp ___L__390
___L__389:
   movl __3Cundefined_3E,%eax
___L__390:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__393
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__393:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,_opt__verbose
___L__378:
   jmp ___L__377
___L__376:
## eval.l 1747
   movl _opt__verbose,%eax
   movl %eax,20(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__377:
   addl $56,%esp
   leave
   ret
## defunc subr_long_string
   .text
___L__394:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1733
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1734
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__397
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__397
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__398
   .data
___L__399:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__399,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__398:
___L__397:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__400
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__402
   movl __3Clong_3E,%eax
   jmp ___L__403
___L__402:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__403:
   jmp ___L__401
___L__400:
   movl __3Cundefined_3E,%eax
___L__401:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__395
   movl 16(%esp),%eax
   jmp ___L__396
___L__395:
## eval.l 1736
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__405
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__405
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__406
   .data
___L__407:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__407,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__406:
___L__405:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__408
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__410
   movl __3Clong_3E,%eax
   jmp ___L__411
___L__410:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__411:
   jmp ___L__409
___L__408:
   movl __3Cundefined_3E,%eax
___L__409:
   movl %eax,20(%esp)
   movl __3Clong_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__404
## eval.l 1737
   movl $32,%eax
   movl %eax,20(%esp)
   movl _malloc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1738
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   .data
___L__412:
   .asciz "%ld"
   .text
   movl $___L__412,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__413
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__413
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__414
   .data
___L__415:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__415,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__414:
___L__413:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__416
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__418
   movl __3Clong_3E,%eax
   jmp ___L__419
___L__418:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__419:
   jmp ___L__417
___L__416:
   movl __3Cundefined_3E,%eax
___L__417:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__420
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__420:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _sprintf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1739
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _new_2D_3Cstring_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1740
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _free_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
___L__404:
___L__396:
   addl $72,%esp
   leave
   ret
## defunc subr_symbol_string
   .text
___L__421:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1726
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1727
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__424
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__424
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__425
   .data
___L__426:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__426,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__425:
___L__424:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__427
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__429
   movl __3Clong_3E,%eax
   jmp ___L__430
___L__429:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__430:
   jmp ___L__428
___L__427:
   movl __3Cundefined_3E,%eax
___L__428:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__422
   movl 16(%esp),%eax
   jmp ___L__423
___L__422:
## eval.l 1729
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__432
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__432
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__433
   .data
___L__434:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__434,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__433:
___L__432:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__435
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__437
   movl __3Clong_3E,%eax
   jmp ___L__438
___L__437:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__438:
   jmp ___L__436
___L__435:
   movl __3Cundefined_3E,%eax
___L__436:
   movl %eax,20(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__431
## eval.l 1730
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__439
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__439
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__440
   .data
___L__441:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__441,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__440:
___L__439:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__442
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__444
   movl __3Clong_3E,%eax
   jmp ___L__445
___L__444:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__445:
   jmp ___L__443
___L__442:
   movl __3Cundefined_3E,%eax
___L__443:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__446
   movl __3Csymbol_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__446:
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _new_2D_3Cstring_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__431:
___L__423:
   addl $56,%esp
   leave
   ret
## defunc subr_string_symbol
   .text
___L__447:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1719
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1720
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__450
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__450
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__451
   .data
___L__452:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__452,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__451:
___L__450:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__453
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__455
   movl __3Clong_3E,%eax
   jmp ___L__456
___L__455:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__456:
   jmp ___L__454
___L__453:
   movl __3Cundefined_3E,%eax
___L__454:
   movl %eax,20(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__448
   movl 16(%esp),%eax
   jmp ___L__449
___L__448:
## eval.l 1722
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__458
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__458
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__459
   .data
___L__460:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__460,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__459:
___L__458:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__461
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__463
   movl __3Clong_3E,%eax
   jmp ___L__464
___L__463:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__464:
   jmp ___L__462
___L__461:
   movl __3Cundefined_3E,%eax
___L__462:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__457
## eval.l 1723
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__465
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__465
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__466
   .data
___L__467:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__467,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__466:
___L__465:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__468
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__470
   movl __3Clong_3E,%eax
   jmp ___L__471
___L__470:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__471:
   jmp ___L__469
___L__468:
   movl __3Cundefined_3E,%eax
___L__469:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__472
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__472:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _intern,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__457:
___L__449:
   addl $56,%esp
   leave
   ret
## defunc subr_set_string_at
   .text
___L__473:
## frame 16 44 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1707
   .data
___L__474:
   .asciz "set-string-at"
   .text
   movl $___L__474,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity3,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1708
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1709
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1710
   movl $0,%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,32(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1711
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__476
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__476
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__477
   .data
___L__478:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__478,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__477:
___L__476:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__479
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__481
   movl __3Clong_3E,%eax
   jmp ___L__482
___L__481:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__482:
   jmp ___L__480
___L__479:
   movl __3Cundefined_3E,%eax
___L__480:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__475
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__483
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__483
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__484
   .data
___L__485:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__485,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__484:
___L__483:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__486
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__488
   movl __3Clong_3E,%eax
   jmp ___L__489
___L__488:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__489:
   jmp ___L__487
___L__486:
   movl __3Cundefined_3E,%eax
___L__487:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__475
## eval.l 1712
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__490
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__490
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__491
   .data
___L__492:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__492,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__491:
___L__490:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__493
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__495
   movl __3Clong_3E,%eax
   jmp ___L__496
___L__495:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__496:
   jmp ___L__494
___L__493:
   movl __3Cundefined_3E,%eax
___L__494:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__497
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__497:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 1713
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $0,%eax
   cmpl 32(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__498
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__string__length,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   cmpl 32(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__498
## eval.l 1714
## eval.l 1715
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__499
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__499
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__500
   .data
___L__501:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__501,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__500:
___L__499:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__502
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__504
   movl __3Clong_3E,%eax
   jmp ___L__505
___L__504:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__505:
   jmp ___L__503
___L__502:
   movl __3Cundefined_3E,%eax
___L__503:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__506
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__506:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__507
   movl $1,%eax
   movl %eax,44(%esp)
   movl 48(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__507
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 48(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__508
   .data
___L__509:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__509,%eax
   movl %eax,44(%esp)
   movl 48(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__508:
___L__507:
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__510
   movl $1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__512
   movl __3Clong_3E,%eax
   jmp ___L__513
___L__512:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__513:
   jmp ___L__511
___L__510:
   movl __3Cundefined_3E,%eax
___L__511:
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   movl %eax,56(%esp)
   movl __3Cstring_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__514
   movl __3Cstring_3E,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__514:
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 40(%esp),%ecx
   leal (%eax,%ecx),%ecx
   movl 32(%esp),%eax
   movb %al,(%ecx)
   movl 24(%esp),%eax
___L__498:
___L__475:
   addl $72,%esp
   leave
   ret
## defunc subr_string_at
   .text
___L__515:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1698
   .data
___L__516:
   .asciz "string-at"
   .text
   movl $___L__516,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1699
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1700
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1701
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__518
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__518
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__519
   .data
___L__520:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__520,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__519:
___L__518:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__521
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__523
   movl __3Clong_3E,%eax
   jmp ___L__524
___L__523:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__524:
   jmp ___L__522
___L__521:
   movl __3Cundefined_3E,%eax
___L__522:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__517
## eval.l 1702
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__525
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__525
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__526
   .data
___L__527:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__527,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__526:
___L__525:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__528
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__530
   movl __3Clong_3E,%eax
   jmp ___L__531
___L__530:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__531:
   jmp ___L__529
___L__528:
   movl __3Cundefined_3E,%eax
___L__529:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__532
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__532:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1703
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   cmpl 36(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__533
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__string__length,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   cmpl 36(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__533
## eval.l 1704
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__534
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__534
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__535
   .data
___L__536:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__536,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__535:
___L__534:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__537
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__539
   movl __3Clong_3E,%eax
   jmp ___L__540
___L__539:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__540:
   jmp ___L__538
___L__537:
   movl __3Cundefined_3E,%eax
___L__538:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cstring_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__541
   movl __3Cstring_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__541:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 36(%esp),%ecx
   leal (%eax,%ecx),%ecx
   xorl %eax,%eax
   movb (%ecx),%al
   movl %eax,36(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__533:
___L__517:
   addl $72,%esp
   leave
   ret
## defunc subr_string_length
   .text
___L__542:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1693
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1694
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__544
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__544
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__545
   .data
___L__546:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__546,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__545:
___L__544:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__547
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__549
   movl __3Clong_3E,%eax
   jmp ___L__550
___L__549:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__550:
   jmp ___L__548
___L__547:
   movl __3Cundefined_3E,%eax
___L__548:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__543
## eval.l 1695
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__551
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__551
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__552
   .data
___L__553:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__553,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__552:
___L__551:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__554
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__556
   movl __3Clong_3E,%eax
   jmp ___L__557
___L__556:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__557:
   jmp ___L__555
___L__554:
   movl __3Cundefined_3E,%eax
___L__555:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__558
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__558:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__543:
   addl $56,%esp
   leave
   ret
## defunc subr_set_array_at
   .text
___L__559:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1685
   .data
___L__560:
   .asciz "set-array-at"
   .text
   movl $___L__560,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity3,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1686
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1687
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1688
   movl $0,%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,32(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1689
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__562
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__562
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__563
   .data
___L__564:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__564,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__563:
___L__562:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__565
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__567
   movl __3Clong_3E,%eax
   jmp ___L__568
___L__567:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__568:
   jmp ___L__566
___L__565:
   movl __3Cundefined_3E,%eax
___L__566:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__561
## eval.l 1690
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__569
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__569
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__570
   .data
___L__571:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__571,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__570:
___L__569:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__572
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__574
   movl __3Clong_3E,%eax
   jmp ___L__575
___L__574:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__575:
   jmp ___L__573
___L__572:
   movl __3Cundefined_3E,%eax
___L__573:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__576
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__576:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl _k__set__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__561:
   addl $72,%esp
   leave
   ret
## defunc subr_array_at
   .text
___L__577:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1678
   .data
___L__578:
   .asciz "array-at"
   .text
   movl $___L__578,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1679
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1680
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1681
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__580
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__580
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__581
   .data
___L__582:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__582,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__581:
___L__580:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__583
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__585
   movl __3Clong_3E,%eax
   jmp ___L__586
___L__585:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__586:
   jmp ___L__584
___L__583:
   movl __3Cundefined_3E,%eax
___L__584:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__579
## eval.l 1682
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__587
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__587
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__588
   .data
___L__589:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__589,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__588:
___L__587:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__590
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__592
   movl __3Clong_3E,%eax
   jmp ___L__593
___L__592:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__593:
   jmp ___L__591
___L__590:
   movl __3Cundefined_3E,%eax
___L__591:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__594
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__594:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _k__array__at,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__579:
   addl $56,%esp
   leave
   ret
## defunc subr_array_length
   .text
___L__595:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1675
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__array__length,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_set_oop_at
   .text
___L__596:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1660
   .data
___L__597:
   .asciz "set-oop-at"
   .text
   movl $___L__597,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity3,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1662
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1663
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1664
   movl $0,%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,32(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1668
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__598
## eval.l 1669
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__599
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__599
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__600
   .data
___L__601:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__601,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__600:
___L__599:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__602
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__604
   movl __3Clong_3E,%eax
   jmp ___L__605
___L__604:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__605:
   jmp ___L__603
___L__602:
   movl __3Cundefined_3E,%eax
___L__603:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__598
## eval.l 1670
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__606
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__606
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__607
   .data
___L__608:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__608,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__607:
___L__606:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__609
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__611
   movl __3Clong_3E,%eax
   jmp ___L__612
___L__611:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__612:
   jmp ___L__610
___L__609:
   movl __3Cundefined_3E,%eax
___L__610:
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__598
## eval.l 1671
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__613
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__613
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__614
   .data
___L__615:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__615,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__614:
___L__613:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__616
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__618
   movl __3Clong_3E,%eax
   jmp ___L__619
___L__618:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__619:
   jmp ___L__617
___L__616:
   movl __3Cundefined_3E,%eax
___L__617:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__620
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__620:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 32(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 28(%esp),%eax
   movl %eax,(%ecx)
___L__598:
   movl 24(%esp),%eax
   addl $72,%esp
   leave
   ret
## defunc subr_oop_at
   .text
___L__621:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1649
   .data
___L__622:
   .asciz "oop-at"
   .text
   movl $___L__622,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1651
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1652
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1654
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__623
## eval.l 1655
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__624
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__624
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__625
   .data
___L__626:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__626,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__625:
___L__624:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__627
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__629
   movl __3Clong_3E,%eax
   jmp ___L__630
___L__629:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__630:
   jmp ___L__628
___L__627:
   movl __3Cundefined_3E,%eax
___L__628:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__623
## eval.l 1656
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__631
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__631
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__632
   .data
___L__633:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__633,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__632:
___L__631:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__634
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__636
   movl __3Clong_3E,%eax
   jmp ___L__637
___L__636:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__637:
   jmp ___L__635
___L__634:
   movl __3Cundefined_3E,%eax
___L__635:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__623
## eval.l 1657
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__638
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__638
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__639
   .data
___L__640:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__640,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__639:
___L__638:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__641
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__643
   movl __3Clong_3E,%eax
   jmp ___L__644
___L__643:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__644:
   jmp ___L__642
___L__641:
   movl __3Cundefined_3E,%eax
___L__642:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__645
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__645:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__623:
   addl $56,%esp
   leave
   ret
## defunc subr_set_cdr
   .text
___L__646:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1644
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1645
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__648
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__648
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__649
   .data
___L__650:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__650,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__649:
___L__648:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__651
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__653
   movl __3Clong_3E,%eax
   jmp ___L__654
___L__653:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__654:
   jmp ___L__652
___L__651:
   movl __3Cundefined_3E,%eax
___L__652:
   movl %eax,20(%esp)
   movl __3Cpair_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__647
## eval.l 1646
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__655
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__655
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__656
   .data
___L__657:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__657,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__656:
___L__655:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__658
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__660
   movl __3Clong_3E,%eax
   jmp ___L__661
___L__660:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__661:
   jmp ___L__659
___L__658:
   movl __3Cundefined_3E,%eax
___L__659:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__662
   movl __3Cpair_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__662:
   movl 64(%esp),%eax
   movl %eax,32(%esp)
   movl _k__cadr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
___L__647:
   addl $56,%esp
   leave
   ret
## defunc subr_set_car
   .text
___L__663:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1639
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1640
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__665
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__665
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__666
   .data
___L__667:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__667,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__666:
___L__665:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__668
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__670
   movl __3Clong_3E,%eax
   jmp ___L__671
___L__670:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__671:
   jmp ___L__669
___L__668:
   movl __3Cundefined_3E,%eax
___L__669:
   movl %eax,20(%esp)
   movl __3Cpair_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__664
## eval.l 1641
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__672
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__672
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__673
   .data
___L__674:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__674,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__673:
___L__672:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__675
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__677
   movl __3Clong_3E,%eax
   jmp ___L__678
___L__677:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__678:
   jmp ___L__676
___L__675:
   movl __3Cundefined_3E,%eax
___L__676:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__679
   movl __3Cpair_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__679:
   movl 64(%esp),%eax
   movl %eax,32(%esp)
   movl _k__cadr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
___L__664:
   addl $56,%esp
   leave
   ret
## defunc subr_cdr
   .text
___L__680:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1636
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_car
   .text
___L__681:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1635
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_arrayP
   .text
___L__682:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1634
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__684
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__684
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__685
   .data
___L__686:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__686,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__685:
___L__684:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__687
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__689
   movl __3Clong_3E,%eax
   jmp ___L__690
___L__689:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__690:
   jmp ___L__688
___L__687:
   movl __3Cundefined_3E,%eax
___L__688:
   movl %eax,16(%esp)
   movl __3Carray_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__683
   movl _s__t,%eax
___L__683:
   addl $40,%esp
   leave
   ret
## defunc subr_pairP
   .text
___L__691:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1633
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__693
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__693
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__694
   .data
___L__695:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__695,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__694:
___L__693:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__696
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__698
   movl __3Clong_3E,%eax
   jmp ___L__699
___L__698:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__699:
   jmp ___L__697
___L__696:
   movl __3Cundefined_3E,%eax
___L__697:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__692
   movl _s__t,%eax
___L__692:
   addl $40,%esp
   leave
   ret
## defunc subr_symbolP
   .text
___L__700:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1632
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__702
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__702
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__703
   .data
___L__704:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__704,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__703:
___L__702:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__705
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__707
   movl __3Clong_3E,%eax
   jmp ___L__708
___L__707:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__708:
   jmp ___L__706
___L__705:
   movl __3Cundefined_3E,%eax
___L__706:
   movl %eax,16(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__701
   movl _s__t,%eax
___L__701:
   addl $40,%esp
   leave
   ret
## defunc subr_stringP
   .text
___L__709:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1631
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__711
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__711
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__712
   .data
___L__713:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__713,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__712:
___L__711:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__714
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__716
   movl __3Clong_3E,%eax
   jmp ___L__717
___L__716:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__717:
   jmp ___L__715
___L__714:
   movl __3Cundefined_3E,%eax
___L__715:
   movl %eax,16(%esp)
   movl __3Cstring_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__710
   movl _s__t,%eax
___L__710:
   addl $40,%esp
   leave
   ret
## defunc subr_type_of
   .text
___L__718:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1630
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__719
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__720
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__720
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__721
   .data
___L__722:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__722,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__721:
___L__720:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__723
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__725
   movl __3Clong_3E,%eax
   jmp ___L__726
___L__725:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__726:
   jmp ___L__724
___L__723:
   movl __3Cundefined_3E,%eax
___L__724:
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__719:
   addl $40,%esp
   leave
   ret
## defunc subr_allocate
   .text
___L__727:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1624
   .data
___L__728:
   .asciz "allocate"
   .text
   movl $___L__728,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1625
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1626
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1627
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__730
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__730
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__731
   .data
___L__732:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__732,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__731:
___L__730:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__733
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__735
   movl __3Clong_3E,%eax
   jmp ___L__736
___L__735:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__736:
   jmp ___L__734
___L__733:
   movl __3Cundefined_3E,%eax
___L__734:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__729
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__737
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__737
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__738
   .data
___L__739:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__739,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__738:
___L__737:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__740
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__742
   movl __3Clong_3E,%eax
   jmp ___L__743
___L__742:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__743:
   jmp ___L__741
___L__740:
   movl __3Cundefined_3E,%eax
___L__741:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__729
## eval.l 1628
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__744
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__744
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__745
   .data
___L__746:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__746,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__745:
___L__744:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__747
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__749
   movl __3Clong_3E,%eax
   jmp ___L__750
___L__749:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__750:
   jmp ___L__748
___L__747:
   movl __3Cundefined_3E,%eax
___L__748:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__751
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__751:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $4,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__752
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__752
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__753
   .data
___L__754:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__754,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__753:
___L__752:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__755
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__757
   movl __3Clong_3E,%eax
   jmp ___L__758
___L__757:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__758:
   jmp ___L__756
___L__755:
   movl __3Cundefined_3E,%eax
___L__756:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__759
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__759:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   mull 28(%esp)
   movl %eax,28(%esp)
   movl _new_2Doops,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__729:
   addl $72,%esp
   leave
   ret
## defunc subr_form
   .text
___L__760:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1621
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cform_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_array
   .text
___L__761:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1620
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__763
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__763
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__764
   .data
___L__765:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__765,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__764:
___L__763:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__766
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__768
   movl __3Clong_3E,%eax
   jmp ___L__769
___L__768:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__769:
   jmp ___L__767
___L__766:
   movl __3Cundefined_3E,%eax
___L__767:
   movl %eax,16(%esp)
   movl __3Clong_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__762
   movl $0,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__770
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__770
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__771
   .data
___L__772:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__772,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__771:
___L__770:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__773
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__775
   movl __3Clong_3E,%eax
   jmp ___L__776
___L__775:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__776:
   jmp ___L__774
___L__773:
   movl __3Cundefined_3E,%eax
___L__774:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__777
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__777:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__762:
   movl %eax,16(%esp)
   movl _new_2D_3Carray_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_string
   .text
___L__778:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1619
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__780
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__780
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__781
   .data
___L__782:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__782,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__781:
___L__780:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__783
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__785
   movl __3Clong_3E,%eax
   jmp ___L__786
___L__785:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__786:
   jmp ___L__784
___L__783:
   movl __3Cundefined_3E,%eax
___L__784:
   movl %eax,16(%esp)
   movl __3Clong_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__779
   movl $0,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__787
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__787
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__788
   .data
___L__789:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__789,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__788:
___L__787:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__790
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__792
   movl __3Clong_3E,%eax
   jmp ___L__793
___L__792:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__793:
   jmp ___L__791
___L__790:
   movl __3Cundefined_3E,%eax
___L__791:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__794
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__794:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__779:
   movl %eax,16(%esp)
   movl ___new_2D_3Cstring_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_cons
   .text
___L__795:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1618
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_expand
   .text
___L__796:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1614
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1615
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__797
## eval.l 1616
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__798
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__798
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__799
   .data
___L__800:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__800,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__799:
___L__798:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__801
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__803
   movl __3Clong_3E,%eax
   jmp ___L__804
___L__803:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__804:
   jmp ___L__802
___L__801:
   movl __3Cundefined_3E,%eax
___L__802:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__805
   movl __3Ccontext_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__805:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__797:
   movl %eax,20(%esp)
   movl _k__expand,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_encode
   .text
___L__806:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1609
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1610
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__807
## eval.l 1611
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__808
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__808
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__809
   .data
___L__810:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__810,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__809:
___L__808:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__811
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__813
   movl __3Clong_3E,%eax
   jmp ___L__814
___L__813:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__814:
   jmp ___L__812
___L__811:
   movl __3Cundefined_3E,%eax
___L__812:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__815
   movl __3Ccontext_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__815:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__807:
   movl %eax,20(%esp)
   movl _k__encode,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_eval
   .text
___L__816:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1599
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1600
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__817
   movl _globals,%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__818
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__818
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__819
   .data
___L__820:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__820,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__819:
___L__818:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__821
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__823
   movl __3Clong_3E,%eax
   jmp ___L__824
___L__823:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__824:
   jmp ___L__822
___L__821:
   movl __3Cundefined_3E,%eax
___L__822:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__825
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__825:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl _new_2D_3Cenv_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__817:
   movl %eax,32(%esp)
## eval.l 1601
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 32(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1602
   movl $0,%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _new_2Dbase_2D_3Ccontext_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1603
   leal 36(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__push__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1604
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _k__expand,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1605
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _k__encode,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1606
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1603
   leal 36(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   movl %eax,36(%esp)
## eval.l 1601
   leal 32(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc subr_apply
   .text
___L__826:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1596
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _k__apply,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_warn
   .text
___L__827:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1587
   jmp ___L__829
___L__828:
## eval.l 1588
   movl $0,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1589
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__830
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__830
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__831
   .data
___L__832:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__832,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__831:
___L__830:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__833
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__835
   movl __3Clong_3E,%eax
   jmp ___L__836
___L__835:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__836:
   jmp ___L__834
___L__833:
   movl __3Cundefined_3E,%eax
___L__834:
   movl %eax,20(%esp)
## eval.l 1590
## eval.l 1591
   movl __3Cstring_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__837
   movl _stderr,%eax
   movl %eax,32(%esp)
   .data
___L__839:
   .asciz "%s"
   .text
   movl $___L__839,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__840
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__840
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__841
   .data
___L__842:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__842,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__841:
___L__840:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__843
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__845
   movl __3Clong_3E,%eax
   jmp ___L__846
___L__845:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__846:
   jmp ___L__844
___L__843:
   movl __3Cundefined_3E,%eax
___L__844:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cstring_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__847
   movl __3Cstring_3E,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__847:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fprintf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__838
___L__837:
## eval.l 1590
## eval.l 1592
   movl __3Csymbol_3E,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__848
   movl _stderr,%eax
   movl %eax,24(%esp)
   .data
___L__850:
   .asciz "%s"
   .text
   movl $___L__850,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__851
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__851
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__852
   .data
___L__853:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__853,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__852:
___L__851:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__854
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__856
   movl __3Clong_3E,%eax
   jmp ___L__857
___L__856:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__857:
   jmp ___L__855
___L__854:
   movl __3Cundefined_3E,%eax
___L__855:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__858
   movl __3Csymbol_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__858:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fprintf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__849
___L__848:
   movl $0,%eax
___L__849:
___L__838:
## eval.l 1593
   movl $1,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,80(%esp)
___L__829:
## eval.l 1587
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__859
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__859
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__860
   .data
___L__861:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__861,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__860:
___L__859:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__862
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__864
   movl __3Clong_3E,%eax
   jmp ___L__865
___L__864:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__865:
   jmp ___L__863
___L__862:
   movl __3Cundefined_3E,%eax
___L__863:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__828
   addl $72,%esp
   leave
   ret
## defunc subr_print
   .text
___L__866:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1582
   jmp ___L__868
___L__867:
## eval.l 1583
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _k__print,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1584
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
___L__868:
## eval.l 1582
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__869
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__869
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__870
   .data
___L__871:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__871,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__870:
___L__869:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__872
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__874
   movl __3Clong_3E,%eax
   jmp ___L__875
___L__874:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__875:
   jmp ___L__873
___L__872:
   movl __3Cundefined_3E,%eax
___L__873:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__867
   addl $40,%esp
   leave
   ret
## defunc subr_dump
   .text
___L__876:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1577
   jmp ___L__878
___L__877:
## eval.l 1578
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _k__dump,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1579
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
___L__878:
## eval.l 1577
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__879
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__879
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__880
   .data
___L__881:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__881,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__880:
___L__879:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__882
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__884
   movl __3Clong_3E,%eax
   jmp ___L__885
___L__884:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__885:
   jmp ___L__883
___L__882:
   movl __3Cundefined_3E,%eax
___L__883:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__877
   addl $40,%esp
   leave
   ret
## defunc subr_format
   .text
___L__886:
## frame 16 48 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1548
   .data
___L__887:
   .asciz "format"
   .text
   movl $___L__887,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1549
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _k__car,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1550
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl _k__cadr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1551
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__889
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__889
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__890
   .data
___L__891:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__891,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__890:
___L__889:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__892
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__894
   movl __3Clong_3E,%eax
   jmp ___L__895
___L__894:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__895:
   jmp ___L__893
___L__892:
   movl __3Cundefined_3E,%eax
___L__893:
   movl %eax,24(%esp)
   movl __3Cstring_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__888
   .data
___L__896:
   .asciz "non-string format"
   .text
   movl $___L__896,%eax
   movl %eax,24(%esp)
   movl _fatal,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__888:
## eval.l 1552
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__897
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__897
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__898
   .data
___L__899:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__899,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__898:
___L__897:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__900
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__902
   movl __3Clong_3E,%eax
   jmp ___L__903
___L__902:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__903:
   jmp ___L__901
___L__900:
   movl __3Cundefined_3E,%eax
___L__901:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cstring_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__904
   movl __3Cstring_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__904:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1553
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__905
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__905
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__906
   .data
___L__907:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__907,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__906:
___L__905:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__908
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__910
   movl __3Clong_3E,%eax
   jmp ___L__911
___L__910:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__911:
   jmp ___L__909
___L__908:
   movl __3Cundefined_3E,%eax
___L__909:
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
## eval.l 1555
## eval.l 1556
   movl __3Cundefined_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__912
   movl $0,%eax
   jmp ___L__913
___L__912:
## eval.l 1555
## eval.l 1557
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__914
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__916
   movl $1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__916
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__917
   .data
___L__918:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__918,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__917:
___L__916:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__919
   movl $1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__921
   movl __3Clong_3E,%eax
   jmp ___L__922
___L__921:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__922:
   jmp ___L__920
___L__919:
   movl __3Cundefined_3E,%eax
___L__920:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl __3Clong_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__923
   movl __3Clong_3E,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__923:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   jmp ___L__915
___L__914:
## eval.l 1555
## eval.l 1558
   movl __3Cstring_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__924
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__926
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__926
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__927
   .data
___L__928:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__928,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__927:
___L__926:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__929
   movl $1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__931
   movl __3Clong_3E,%eax
   jmp ___L__932
___L__931:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__932:
   jmp ___L__930
___L__929:
   movl __3Cundefined_3E,%eax
___L__930:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cstring_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__933
   movl __3Cstring_3E,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__933:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   jmp ___L__925
___L__924:
## eval.l 1555
## eval.l 1559
   movl __3Csymbol_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__934
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__936
   movl $1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__936
   movl $1,%eax
   movl %eax,52(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl $1,%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__937
   .data
___L__938:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__938,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__937:
___L__936:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__939
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__941
   movl __3Clong_3E,%eax
   jmp ___L__942
___L__941:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__942:
   jmp ___L__940
___L__939:
   movl __3Cundefined_3E,%eax
___L__940:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__943
   movl __3Csymbol_3E,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__943:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   jmp ___L__935
___L__934:
## eval.l 1560
   movl 16(%esp),%eax
   movl %eax,32(%esp)
___L__935:
___L__925:
___L__915:
___L__913:
## eval.l 1561
   movl $100,%eax
   movl %eax,40(%esp)
   movl %eax,28(%esp)
   movl %eax,44(%esp)
## eval.l 1562
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl _malloc_24stub,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
___L__944:
## eval.l 1563
   jmp ___L__946
___L__945:
## eval.l 1564
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl 24(%esp),%eax
   movl %eax,56(%esp)
   movl 32(%esp),%eax
   movl %eax,60(%esp)
   movl _snprintf_24stub,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   movl 60(%esp),%ecx
   movl %ecx,12(%esp)
   call *%eax
   movl %eax,60(%esp)
## eval.l 1565
   movl 60(%esp),%eax
   movl %eax,56(%esp)
   movl $0,%eax
   cmpl 56(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__947
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl 60(%esp),%eax
   cmpl 56(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__947
## eval.l 1566
   movl 28(%esp),%eax
   movl %eax,56(%esp)
   movl _new_2D_3Cstring_3E,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,56(%esp)
## eval.l 1567
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl _free_24stub,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1568
   movl 56(%esp),%eax
   jmp ___L__948
___L__947:
## eval.l 1569
   movl $2,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   mull 56(%esp)
   movl %eax,40(%esp)
## eval.l 1570
   movl 28(%esp),%eax
   movl %eax,60(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl _realloc_24stub,%eax
   movl 60(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,44(%esp)
   cmpl $0,%eax
   jne ___L__949
## eval.l 1571
## eval.l 1572
   movl 28(%esp),%eax
   movl %eax,56(%esp)
   movl _free_24stub,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1573
   .data
___L__950:
   .asciz "out of memory"
   .text
   movl $___L__950,%eax
   jmp ___L__948
___L__949:
## eval.l 1574
   movl 44(%esp),%eax
   movl %eax,28(%esp)
___L__946:
   movl $1,%eax
   cmpl $0,%eax
   jne ___L__945
___L__948:
   addl $72,%esp
   leave
   ret
## defunc subr_getc
   .text
___L__951:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1540
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1541
   movl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__952
   movl _input,%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__953
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__953
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__954
   .data
___L__955:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__955,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__954:
___L__953:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__956
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__958
   movl __3Clong_3E,%eax
   jmp ___L__959
___L__958:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__959:
   jmp ___L__957
___L__956:
   movl __3Cundefined_3E,%eax
___L__957:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__960
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__960:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
___L__952:
## eval.l 1542
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__962
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__962
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__963
   .data
___L__964:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__964,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__963:
___L__962:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__965
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__967
   movl __3Clong_3E,%eax
   jmp ___L__968
___L__967:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__968:
   jmp ___L__966
___L__965:
   movl __3Cundefined_3E,%eax
___L__966:
   movl %eax,20(%esp)
   movl __3Clong_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__961
   .data
___L__969:
   .asciz "non-integer stream id in getc"
   .text
   movl $___L__969,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__961:
## eval.l 1543
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__970
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__970
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__971
   .data
___L__972:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__972,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__971:
___L__970:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__973
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__975
   movl __3Clong_3E,%eax
   jmp ___L__976
___L__975:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__976:
   jmp ___L__974
___L__973:
   movl __3Cundefined_3E,%eax
___L__974:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__977
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__977:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1544
   movl $0,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   cmpl 36(%esp),%eax
   setge %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__978
## eval.l 1545
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__978:
   addl $56,%esp
   leave
   ret
## defunc subr_close
   .text
___L__979:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1534
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1535
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__981
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__981
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__982
   .data
___L__983:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__983,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__982:
___L__981:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__984
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__986
   movl __3Clong_3E,%eax
   jmp ___L__987
___L__986:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__987:
   jmp ___L__985
___L__984:
   movl __3Cundefined_3E,%eax
___L__985:
   movl %eax,20(%esp)
   movl __3Clong_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__980
   .data
___L__988:
   .asciz "non-integer argument in close"
   .text
   movl $___L__988,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__980:
## eval.l 1536
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__989
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__989
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__990
   .data
___L__991:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__991,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__990:
___L__989:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__992
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__994
   movl __3Clong_3E,%eax
   jmp ___L__995
___L__994:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__995:
   jmp ___L__993
___L__992:
   movl __3Cundefined_3E,%eax
___L__993:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__996
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__996:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fclose_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc subr_open
   .text
___L__997:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1528
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1529
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__999
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__999
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1000
   .data
___L__1001:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1001,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1000:
___L__999:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__1002
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1004
   movl __3Clong_3E,%eax
   jmp ___L__1005
___L__1004:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1005:
   jmp ___L__1003
___L__1002:
   movl __3Cundefined_3E,%eax
___L__1003:
   movl %eax,20(%esp)
   movl __3Cstring_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__998
   .data
___L__1006:
   .asciz "non-string argument in open"
   .text
   movl $___L__1006,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__998:
## eval.l 1530
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1007
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1007
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1008
   .data
___L__1009:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1009,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1008:
___L__1007:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1010
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1012
   movl __3Clong_3E,%eax
   jmp ___L__1013
___L__1012:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1013:
   jmp ___L__1011
___L__1010:
   movl __3Cundefined_3E,%eax
___L__1011:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1014
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1014:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   .data
___L__1015:
   .asciz "rb"
   .text
   movl $___L__1015,%eax
   movl %eax,32(%esp)
   movl _fopen_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1531
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1016
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__1016:
   addl $56,%esp
   leave
   ret
## defunc subr_exit
   .text
___L__1017:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1524
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1019
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1019
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1020
   .data
___L__1021:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1021,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1020:
___L__1019:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1022
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1024
   movl __3Clong_3E,%eax
   jmp ___L__1025
___L__1024:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1025:
   jmp ___L__1023
___L__1022:
   movl __3Cundefined_3E,%eax
___L__1023:
   movl %eax,16(%esp)
   movl __3Clong_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1018
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1026
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1026
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1027
   .data
___L__1028:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1028,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1027:
___L__1026:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1029
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1031
   movl __3Clong_3E,%eax
   jmp ___L__1032
___L__1031:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1032:
   jmp ___L__1030
___L__1029:
   movl __3Cundefined_3E,%eax
___L__1030:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1033
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1033:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1018:
   movl %eax,16(%esp)
## eval.l 1525
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _exit_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_abort
   .text
___L__1034:
## frame 0 0 0 16
   pushl %ebp
   movl %esp,%ebp
   subl $8,%esp
## eval.l 1521
   movl _abort_24stub,%eax
   call *%eax
   addl $8,%esp
   leave
   ret
## defunc subr_ne
   .text
___L__1035:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1508
   .data
___L__1036:
   .asciz "!="
   .text
   movl $___L__1036,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1509
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1510
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1509
## eval.l 1511
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1037
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1037
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1038
   .data
___L__1039:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1039,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1038:
___L__1037:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1040
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1042
   movl __3Clong_3E,%eax
   jmp ___L__1043
___L__1042:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1043:
   jmp ___L__1041
___L__1040:
   movl __3Cundefined_3E,%eax
___L__1041:
   movl %eax,24(%esp)
## eval.l 1512
## eval.l 1513
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1044
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1047
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1047
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1048
   .data
___L__1049:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1049,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1048:
___L__1047:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1050
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1052
   movl __3Clong_3E,%eax
   jmp ___L__1053
___L__1052:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1053:
   jmp ___L__1051
___L__1050:
   movl __3Cundefined_3E,%eax
___L__1051:
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1046
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1054
   movl $1,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1054
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1055
   .data
___L__1056:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1056,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1055:
___L__1054:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1057
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1059
   movl __3Clong_3E,%eax
   jmp ___L__1060
___L__1059:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1060:
   jmp ___L__1058
___L__1057:
   movl __3Cundefined_3E,%eax
___L__1058:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1061
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1061:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1062
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1062
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__1063
   .data
___L__1064:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1064,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1063:
___L__1062:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1065
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1067
   movl __3Clong_3E,%eax
   jmp ___L__1068
___L__1067:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1068:
   jmp ___L__1066
___L__1065:
   movl __3Cundefined_3E,%eax
___L__1066:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1069
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1069:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 36(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1046
   movl _s__t,%eax
___L__1046:
   jmp ___L__1045
___L__1044:
## eval.l 1512
## eval.l 1514
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1070
## eval.l 1512
## eval.l 1514
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1073
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1073
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1074
   .data
___L__1075:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1075,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1074:
___L__1073:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1076
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1078
   movl __3Clong_3E,%eax
   jmp ___L__1079
___L__1078:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1079:
   jmp ___L__1077
___L__1076:
   movl __3Cundefined_3E,%eax
___L__1077:
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1072
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1080
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1080
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1081
   .data
___L__1082:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1082,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1081:
___L__1080:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1083
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1085
   movl __3Clong_3E,%eax
   jmp ___L__1086
___L__1085:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1086:
   jmp ___L__1084
___L__1083:
   movl __3Cundefined_3E,%eax
___L__1084:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cstring_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1087
   movl __3Cstring_3E,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1087:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1088
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1088
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__1089
   .data
___L__1090:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1090,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1089:
___L__1088:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1091
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1093
   movl __3Clong_3E,%eax
   jmp ___L__1094
___L__1093:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1094:
   jmp ___L__1092
___L__1091:
   movl __3Cundefined_3E,%eax
___L__1092:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cstring_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1095
   movl __3Cstring_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1095:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _strcmp_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1072:
   movl _s__t,%eax
   jmp ___L__1071
___L__1070:
## eval.l 1515
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   cmpl 28(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1096
   movl _s__t,%eax
___L__1096:
___L__1071:
___L__1045:
   addl $72,%esp
   leave
   ret
## defunc subr_eq
   .text
___L__1097:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1498
   .data
___L__1098:
   .asciz "="
   .text
   movl $___L__1098,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1499
   movl $0,%eax
   movl %eax,20(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1500
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1499
## eval.l 1501
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1099
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1099
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1100
   .data
___L__1101:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1101,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1100:
___L__1099:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1102
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1104
   movl __3Clong_3E,%eax
   jmp ___L__1105
___L__1104:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1105:
   jmp ___L__1103
___L__1102:
   movl __3Cundefined_3E,%eax
___L__1103:
   movl %eax,24(%esp)
## eval.l 1502
## eval.l 1503
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1106
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1109
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1109
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1110
   .data
___L__1111:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1111,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1110:
___L__1109:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1112
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1114
   movl __3Clong_3E,%eax
   jmp ___L__1115
___L__1114:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1115:
   jmp ___L__1113
___L__1112:
   movl __3Cundefined_3E,%eax
___L__1113:
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1108
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1116
   movl $1,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1116
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1117
   .data
___L__1118:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1118,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1117:
___L__1116:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1119
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1121
   movl __3Clong_3E,%eax
   jmp ___L__1122
___L__1121:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1122:
   jmp ___L__1120
___L__1119:
   movl __3Cundefined_3E,%eax
___L__1120:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1123
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1123:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1124
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1124
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__1125
   .data
___L__1126:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1126,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1125:
___L__1124:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1127
   movl $1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1129
   movl __3Clong_3E,%eax
   jmp ___L__1130
___L__1129:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1130:
   jmp ___L__1128
___L__1127:
   movl __3Cundefined_3E,%eax
___L__1128:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1131
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1131:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1108
   movl _s__t,%eax
___L__1108:
   jmp ___L__1107
___L__1106:
## eval.l 1502
## eval.l 1504
   movl __3Cstring_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1132
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1135
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1135
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1136
   .data
___L__1137:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1137,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1136:
___L__1135:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1138
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1140
   movl __3Clong_3E,%eax
   jmp ___L__1141
___L__1140:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1141:
   jmp ___L__1139
___L__1138:
   movl __3Cundefined_3E,%eax
___L__1139:
   movl %eax,36(%esp)
   movl __3Cstring_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1134
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1142
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1142
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1143
   .data
___L__1144:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1144,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1143:
___L__1142:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1145
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1147
   movl __3Clong_3E,%eax
   jmp ___L__1148
___L__1147:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1148:
   jmp ___L__1146
___L__1145:
   movl __3Cundefined_3E,%eax
___L__1146:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cstring_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1149
   movl __3Cstring_3E,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1149:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1150
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1150
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__1151
   .data
___L__1152:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1152,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1151:
___L__1150:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1153
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1155
   movl __3Clong_3E,%eax
   jmp ___L__1156
___L__1155:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1156:
   jmp ___L__1154
___L__1153:
   movl __3Cundefined_3E,%eax
___L__1154:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cstring_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1157
   movl __3Cstring_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1157:
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _strcmp_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1134
   movl _s__t,%eax
___L__1134:
   jmp ___L__1133
___L__1132:
## eval.l 1505
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1158
   movl _s__t,%eax
___L__1158:
___L__1133:
___L__1107:
   addl $72,%esp
   leave
   ret
## defunc subr_gt
   .text
___L__1159:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1495
   .data
___L__1160:
   .asciz "gt"
   .text
   movl $___L__1160,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1164
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1164
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1165
   .data
___L__1166:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1166,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1165:
___L__1164:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1167
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1169
   movl __3Clong_3E,%eax
   jmp ___L__1170
___L__1169:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1170:
   jmp ___L__1168
___L__1167:
   movl __3Cundefined_3E,%eax
___L__1168:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1163
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1171
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1171
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1172
   .data
___L__1173:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1173,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1172:
___L__1171:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1174
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1176
   movl __3Clong_3E,%eax
   jmp ___L__1177
___L__1176:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1177:
   jmp ___L__1175
___L__1174:
   movl __3Cundefined_3E,%eax
___L__1175:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1163:
   cmpl $0,%eax
   je ___L__1161
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1179
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1179
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1180
   .data
___L__1181:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1181,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1180:
___L__1179:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1182
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1184
   movl __3Clong_3E,%eax
   jmp ___L__1185
___L__1184:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1185:
   jmp ___L__1183
___L__1182:
   movl __3Cundefined_3E,%eax
___L__1183:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1186
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1186:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1187
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1187
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1188
   .data
___L__1189:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1189,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1188:
___L__1187:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1190
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1192
   movl __3Clong_3E,%eax
   jmp ___L__1193
___L__1192:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1193:
   jmp ___L__1191
___L__1190:
   movl __3Cundefined_3E,%eax
___L__1191:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1194
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1194:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 24(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1178
   movl _s__t,%eax
___L__1178:
   jmp ___L__1162
___L__1161:
   .data
___L__1195:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1195,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1196:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1196,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1197:
   .asciz "gt"
   .text
   movl $___L__1197,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1198:
   .asciz " "
   .text
   movl $___L__1198,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1199:
   .asciz " "
   .text
   movl $___L__1199,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1200:
   .asciz ")"
   .text
   movl $___L__1200,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1201:
   .asciz "\012"
   .text
   movl $___L__1201,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1162:
   addl $56,%esp
   leave
   ret
## defunc subr_ge
   .text
___L__1202:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1494
   .data
___L__1203:
   .asciz "ge"
   .text
   movl $___L__1203,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1207
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1207
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1208
   .data
___L__1209:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1209,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1208:
___L__1207:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1210
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1212
   movl __3Clong_3E,%eax
   jmp ___L__1213
___L__1212:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1213:
   jmp ___L__1211
___L__1210:
   movl __3Cundefined_3E,%eax
___L__1211:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1206
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1214
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1214
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1215
   .data
___L__1216:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1216,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1215:
___L__1214:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1217
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1219
   movl __3Clong_3E,%eax
   jmp ___L__1220
___L__1219:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1220:
   jmp ___L__1218
___L__1217:
   movl __3Cundefined_3E,%eax
___L__1218:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1206:
   cmpl $0,%eax
   je ___L__1204
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1222
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1222
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1223
   .data
___L__1224:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1224,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1223:
___L__1222:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1225
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1227
   movl __3Clong_3E,%eax
   jmp ___L__1228
___L__1227:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1228:
   jmp ___L__1226
___L__1225:
   movl __3Cundefined_3E,%eax
___L__1226:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1229
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1229:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1230
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1230
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1231
   .data
___L__1232:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1232,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1231:
___L__1230:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1233
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1235
   movl __3Clong_3E,%eax
   jmp ___L__1236
___L__1235:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1236:
   jmp ___L__1234
___L__1233:
   movl __3Cundefined_3E,%eax
___L__1234:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1237
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1237:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 24(%esp),%eax
   setge %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1221
   movl _s__t,%eax
___L__1221:
   jmp ___L__1205
___L__1204:
   .data
___L__1238:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1238,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1239:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1239,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1240:
   .asciz "ge"
   .text
   movl $___L__1240,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1241:
   .asciz " "
   .text
   movl $___L__1241,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1242:
   .asciz " "
   .text
   movl $___L__1242,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1243:
   .asciz ")"
   .text
   movl $___L__1243,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1244:
   .asciz "\012"
   .text
   movl $___L__1244,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1205:
   addl $56,%esp
   leave
   ret
## defunc subr_le
   .text
___L__1245:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1493
   .data
___L__1246:
   .asciz "le"
   .text
   movl $___L__1246,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1250
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1250
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1251
   .data
___L__1252:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1252,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1251:
___L__1250:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1253
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1255
   movl __3Clong_3E,%eax
   jmp ___L__1256
___L__1255:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1256:
   jmp ___L__1254
___L__1253:
   movl __3Cundefined_3E,%eax
___L__1254:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1249
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1257
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1257
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1258
   .data
___L__1259:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1259,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1258:
___L__1257:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1260
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1262
   movl __3Clong_3E,%eax
   jmp ___L__1263
___L__1262:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1263:
   jmp ___L__1261
___L__1260:
   movl __3Cundefined_3E,%eax
___L__1261:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1249:
   cmpl $0,%eax
   je ___L__1247
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1265
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1265
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1266
   .data
___L__1267:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1267,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1266:
___L__1265:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1268
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1270
   movl __3Clong_3E,%eax
   jmp ___L__1271
___L__1270:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1271:
   jmp ___L__1269
___L__1268:
   movl __3Cundefined_3E,%eax
___L__1269:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1272
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1272:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1273
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1273
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1274
   .data
___L__1275:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1275,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1274:
___L__1273:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1276
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1278
   movl __3Clong_3E,%eax
   jmp ___L__1279
___L__1278:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1279:
   jmp ___L__1277
___L__1276:
   movl __3Cundefined_3E,%eax
___L__1277:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1280
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1280:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 24(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1264
   movl _s__t,%eax
___L__1264:
   jmp ___L__1248
___L__1247:
   .data
___L__1281:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1281,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1282:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1282,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1283:
   .asciz "le"
   .text
   movl $___L__1283,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1284:
   .asciz " "
   .text
   movl $___L__1284,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1285:
   .asciz " "
   .text
   movl $___L__1285,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1286:
   .asciz ")"
   .text
   movl $___L__1286,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1287:
   .asciz "\012"
   .text
   movl $___L__1287,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1248:
   addl $56,%esp
   leave
   ret
## defunc subr_lt
   .text
___L__1288:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1492
   .data
___L__1289:
   .asciz "lt"
   .text
   movl $___L__1289,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1293
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1293
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1294
   .data
___L__1295:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1295,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1294:
___L__1293:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1296
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1298
   movl __3Clong_3E,%eax
   jmp ___L__1299
___L__1298:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1299:
   jmp ___L__1297
___L__1296:
   movl __3Cundefined_3E,%eax
___L__1297:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1292
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1300
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1300
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1301
   .data
___L__1302:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1302,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1301:
___L__1300:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1303
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1305
   movl __3Clong_3E,%eax
   jmp ___L__1306
___L__1305:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1306:
   jmp ___L__1304
___L__1303:
   movl __3Cundefined_3E,%eax
___L__1304:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1292:
   cmpl $0,%eax
   je ___L__1290
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1308
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1308
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1309
   .data
___L__1310:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1310,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1309:
___L__1308:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1311
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1313
   movl __3Clong_3E,%eax
   jmp ___L__1314
___L__1313:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1314:
   jmp ___L__1312
___L__1311:
   movl __3Cundefined_3E,%eax
___L__1312:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1315
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1315:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1316
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1316
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1317
   .data
___L__1318:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1318,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1317:
___L__1316:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1319
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1321
   movl __3Clong_3E,%eax
   jmp ___L__1322
___L__1321:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1322:
   jmp ___L__1320
___L__1319:
   movl __3Cundefined_3E,%eax
___L__1320:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1323
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1323:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 24(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1307
   movl _s__t,%eax
___L__1307:
   jmp ___L__1291
___L__1290:
   .data
___L__1324:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1324,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1325:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1325,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1326:
   .asciz "lt"
   .text
   movl $___L__1326,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1327:
   .asciz " "
   .text
   movl $___L__1327,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1328:
   .asciz " "
   .text
   movl $___L__1328,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1329:
   .asciz ")"
   .text
   movl $___L__1329,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1330:
   .asciz "\012"
   .text
   movl $___L__1330,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1291:
   addl $56,%esp
   leave
   ret
## defunc define-relation
## defunc subr_shr
   .text
___L__1331:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1480
   .data
___L__1332:
   .asciz "shr"
   .text
   movl $___L__1332,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1336
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1336
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1337
   .data
___L__1338:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1338,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1337:
___L__1336:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1339
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1341
   movl __3Clong_3E,%eax
   jmp ___L__1342
___L__1341:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1342:
   jmp ___L__1340
___L__1339:
   movl __3Cundefined_3E,%eax
___L__1340:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1335
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1343
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1343
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1344
   .data
___L__1345:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1345,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1344:
___L__1343:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1346
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1348
   movl __3Clong_3E,%eax
   jmp ___L__1349
___L__1348:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1349:
   jmp ___L__1347
___L__1346:
   movl __3Cundefined_3E,%eax
___L__1347:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1335:
   cmpl $0,%eax
   je ___L__1333
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1350
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1350
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1351
   .data
___L__1352:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1352,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1351:
___L__1350:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1353
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1355
   movl __3Clong_3E,%eax
   jmp ___L__1356
___L__1355:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1356:
   jmp ___L__1354
___L__1353:
   movl __3Cundefined_3E,%eax
___L__1354:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1357
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1357:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1358
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1358
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1359
   .data
___L__1360:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1360,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1359:
___L__1358:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1361
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1363
   movl __3Clong_3E,%eax
   jmp ___L__1364
___L__1363:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1364:
   jmp ___L__1362
___L__1361:
   movl __3Cundefined_3E,%eax
___L__1362:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1365
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1365:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 24(%esp),%ecx
   sarl %cl,%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1334
___L__1333:
   .data
___L__1366:
   .asciz "%p %p\012"
   .text
   movl $___L__1366,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1367:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1367,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1368:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1368,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1369:
   .asciz "shr"
   .text
   movl $___L__1369,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1370:
   .asciz " "
   .text
   movl $___L__1370,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1371:
   .asciz " "
   .text
   movl $___L__1371,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1372:
   .asciz ")"
   .text
   movl $___L__1372,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1373:
   .asciz "\012"
   .text
   movl $___L__1373,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1334:
   addl $56,%esp
   leave
   ret
## defunc subr_shl
   .text
___L__1374:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1479
   .data
___L__1375:
   .asciz "shl"
   .text
   movl $___L__1375,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1379
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1379
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1380
   .data
___L__1381:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1381,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1380:
___L__1379:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1382
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1384
   movl __3Clong_3E,%eax
   jmp ___L__1385
___L__1384:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1385:
   jmp ___L__1383
___L__1382:
   movl __3Cundefined_3E,%eax
___L__1383:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1378
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1386
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1386
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1387
   .data
___L__1388:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1388,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1387:
___L__1386:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1389
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1391
   movl __3Clong_3E,%eax
   jmp ___L__1392
___L__1391:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1392:
   jmp ___L__1390
___L__1389:
   movl __3Cundefined_3E,%eax
___L__1390:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1378:
   cmpl $0,%eax
   je ___L__1376
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1393
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1393
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1394
   .data
___L__1395:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1395,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1394:
___L__1393:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1396
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1398
   movl __3Clong_3E,%eax
   jmp ___L__1399
___L__1398:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1399:
   jmp ___L__1397
___L__1396:
   movl __3Cundefined_3E,%eax
___L__1397:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1400
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1400:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1401
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1401
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1402
   .data
___L__1403:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1403,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1402:
___L__1401:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1404
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1406
   movl __3Clong_3E,%eax
   jmp ___L__1407
___L__1406:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1407:
   jmp ___L__1405
___L__1404:
   movl __3Cundefined_3E,%eax
___L__1405:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1408
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1408:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 24(%esp),%ecx
   shll %cl,%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1377
___L__1376:
   .data
___L__1409:
   .asciz "%p %p\012"
   .text
   movl $___L__1409,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1410:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1410,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1411:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1411,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1412:
   .asciz "shl"
   .text
   movl $___L__1412,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1413:
   .asciz " "
   .text
   movl $___L__1413,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1414:
   .asciz " "
   .text
   movl $___L__1414,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1415:
   .asciz ")"
   .text
   movl $___L__1415,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1416:
   .asciz "\012"
   .text
   movl $___L__1416,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1377:
   addl $56,%esp
   leave
   ret
## defunc subr_div
   .text
___L__1417:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1478
   .data
___L__1418:
   .asciz "div"
   .text
   movl $___L__1418,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1422
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1422
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1423
   .data
___L__1424:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1424,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1423:
___L__1422:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1425
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1427
   movl __3Clong_3E,%eax
   jmp ___L__1428
___L__1427:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1428:
   jmp ___L__1426
___L__1425:
   movl __3Cundefined_3E,%eax
___L__1426:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1421
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1429
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1429
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1430
   .data
___L__1431:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1431,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1430:
___L__1429:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1432
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1434
   movl __3Clong_3E,%eax
   jmp ___L__1435
___L__1434:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1435:
   jmp ___L__1433
___L__1432:
   movl __3Cundefined_3E,%eax
___L__1433:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1421:
   cmpl $0,%eax
   je ___L__1419
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1436
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1436
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1437
   .data
___L__1438:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1438,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1437:
___L__1436:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1439
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1441
   movl __3Clong_3E,%eax
   jmp ___L__1442
___L__1441:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1442:
   jmp ___L__1440
___L__1439:
   movl __3Cundefined_3E,%eax
___L__1440:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1443
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1443:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1444
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1444
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1445
   .data
___L__1446:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1446,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1445:
___L__1444:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1447
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1449
   movl __3Clong_3E,%eax
   jmp ___L__1450
___L__1449:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1450:
   jmp ___L__1448
___L__1447:
   movl __3Cundefined_3E,%eax
___L__1448:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1451
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1451:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl $0,%edx
   divl 24(%esp)
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1420
___L__1419:
   .data
___L__1452:
   .asciz "%p %p\012"
   .text
   movl $___L__1452,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1453:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1453,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1454:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1454,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1455:
   .asciz "div"
   .text
   movl $___L__1455,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1456:
   .asciz " "
   .text
   movl $___L__1456,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1457:
   .asciz " "
   .text
   movl $___L__1457,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1458:
   .asciz ")"
   .text
   movl $___L__1458,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1459:
   .asciz "\012"
   .text
   movl $___L__1459,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1420:
   addl $56,%esp
   leave
   ret
## defunc subr_mul
   .text
___L__1460:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1477
   .data
___L__1461:
   .asciz "mul"
   .text
   movl $___L__1461,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1465
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1465
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1466
   .data
___L__1467:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1467,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1466:
___L__1465:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1468
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1470
   movl __3Clong_3E,%eax
   jmp ___L__1471
___L__1470:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1471:
   jmp ___L__1469
___L__1468:
   movl __3Cundefined_3E,%eax
___L__1469:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1464
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1472
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1472
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1473
   .data
___L__1474:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1474,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1473:
___L__1472:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1475
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1477
   movl __3Clong_3E,%eax
   jmp ___L__1478
___L__1477:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1478:
   jmp ___L__1476
___L__1475:
   movl __3Cundefined_3E,%eax
___L__1476:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1464:
   cmpl $0,%eax
   je ___L__1462
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1479
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1479
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1480
   .data
___L__1481:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1481,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1480:
___L__1479:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1482
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1484
   movl __3Clong_3E,%eax
   jmp ___L__1485
___L__1484:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1485:
   jmp ___L__1483
___L__1482:
   movl __3Cundefined_3E,%eax
___L__1483:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1486
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1486:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1487
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1487
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1488
   .data
___L__1489:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1489,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1488:
___L__1487:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1490
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1492
   movl __3Clong_3E,%eax
   jmp ___L__1493
___L__1492:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1493:
   jmp ___L__1491
___L__1490:
   movl __3Cundefined_3E,%eax
___L__1491:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1494
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1494:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   mull 24(%esp)
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1463
___L__1462:
   .data
___L__1495:
   .asciz "%p %p\012"
   .text
   movl $___L__1495,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1496:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1496,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1497:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1497,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1498:
   .asciz "mul"
   .text
   movl $___L__1498,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1499:
   .asciz " "
   .text
   movl $___L__1499,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1500:
   .asciz " "
   .text
   movl $___L__1500,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1501:
   .asciz ")"
   .text
   movl $___L__1501,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1502:
   .asciz "\012"
   .text
   movl $___L__1502,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1463:
   addl $56,%esp
   leave
   ret
## defunc subr_add
   .text
___L__1503:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1476
   .data
___L__1504:
   .asciz "add"
   .text
   movl $___L__1504,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1508
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1508
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1509
   .data
___L__1510:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1510,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1509:
___L__1508:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1511
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1513
   movl __3Clong_3E,%eax
   jmp ___L__1514
___L__1513:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1514:
   jmp ___L__1512
___L__1511:
   movl __3Cundefined_3E,%eax
___L__1512:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1507
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1515
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1515
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1516
   .data
___L__1517:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1517,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1516:
___L__1515:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1518
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1520
   movl __3Clong_3E,%eax
   jmp ___L__1521
___L__1520:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1521:
   jmp ___L__1519
___L__1518:
   movl __3Cundefined_3E,%eax
___L__1519:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1507:
   cmpl $0,%eax
   je ___L__1505
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1522
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1522
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1523
   .data
___L__1524:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1524,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1523:
___L__1522:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1525
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1527
   movl __3Clong_3E,%eax
   jmp ___L__1528
___L__1527:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1528:
   jmp ___L__1526
___L__1525:
   movl __3Cundefined_3E,%eax
___L__1526:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1529
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1529:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1530
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1530
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1531
   .data
___L__1532:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1532,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1531:
___L__1530:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1533
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1535
   movl __3Clong_3E,%eax
   jmp ___L__1536
___L__1535:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1536:
   jmp ___L__1534
___L__1533:
   movl __3Cundefined_3E,%eax
___L__1534:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1537
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1537:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl 24(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1506
___L__1505:
   .data
___L__1538:
   .asciz "%p %p\012"
   .text
   movl $___L__1538,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1539:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1539,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1540:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1540,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1541:
   .asciz "add"
   .text
   movl $___L__1541,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1542:
   .asciz " "
   .text
   movl $___L__1542,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1543:
   .asciz " "
   .text
   movl $___L__1543,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1544:
   .asciz ")"
   .text
   movl $___L__1544,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1545:
   .asciz "\012"
   .text
   movl $___L__1545,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1506:
   addl $56,%esp
   leave
   ret
## defunc subr_bitxor
   .text
___L__1546:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1475
   .data
___L__1547:
   .asciz "bitxor"
   .text
   movl $___L__1547,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1551
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1551
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1552
   .data
___L__1553:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1553,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1552:
___L__1551:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1554
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1556
   movl __3Clong_3E,%eax
   jmp ___L__1557
___L__1556:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1557:
   jmp ___L__1555
___L__1554:
   movl __3Cundefined_3E,%eax
___L__1555:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1550
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1558
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1558
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1559
   .data
___L__1560:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1560,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1559:
___L__1558:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1561
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1563
   movl __3Clong_3E,%eax
   jmp ___L__1564
___L__1563:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1564:
   jmp ___L__1562
___L__1561:
   movl __3Cundefined_3E,%eax
___L__1562:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1550:
   cmpl $0,%eax
   je ___L__1548
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1565
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1565
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1566
   .data
___L__1567:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1567,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1566:
___L__1565:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1568
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1570
   movl __3Clong_3E,%eax
   jmp ___L__1571
___L__1570:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1571:
   jmp ___L__1569
___L__1568:
   movl __3Cundefined_3E,%eax
___L__1569:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1572
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1572:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1573
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1573
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1574
   .data
___L__1575:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1575,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1574:
___L__1573:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1576
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1578
   movl __3Clong_3E,%eax
   jmp ___L__1579
___L__1578:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1579:
   jmp ___L__1577
___L__1576:
   movl __3Cundefined_3E,%eax
___L__1577:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1580
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1580:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   xorl 24(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1549
___L__1548:
   .data
___L__1581:
   .asciz "%p %p\012"
   .text
   movl $___L__1581,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1582:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1582,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1583:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1583,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1584:
   .asciz "bitxor"
   .text
   movl $___L__1584,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1585:
   .asciz " "
   .text
   movl $___L__1585,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1586:
   .asciz " "
   .text
   movl $___L__1586,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1587:
   .asciz ")"
   .text
   movl $___L__1587,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1588:
   .asciz "\012"
   .text
   movl $___L__1588,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1549:
   addl $56,%esp
   leave
   ret
## defunc subr_bitor
   .text
___L__1589:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1474
   .data
___L__1590:
   .asciz "bitor"
   .text
   movl $___L__1590,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1594
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1594
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1595
   .data
___L__1596:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1596,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1595:
___L__1594:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1597
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1599
   movl __3Clong_3E,%eax
   jmp ___L__1600
___L__1599:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1600:
   jmp ___L__1598
___L__1597:
   movl __3Cundefined_3E,%eax
___L__1598:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1593
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1601
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1601
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1602
   .data
___L__1603:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1603,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1602:
___L__1601:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1604
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1606
   movl __3Clong_3E,%eax
   jmp ___L__1607
___L__1606:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1607:
   jmp ___L__1605
___L__1604:
   movl __3Cundefined_3E,%eax
___L__1605:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1593:
   cmpl $0,%eax
   je ___L__1591
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1608
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1608
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1609
   .data
___L__1610:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1610,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1609:
___L__1608:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1611
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1613
   movl __3Clong_3E,%eax
   jmp ___L__1614
___L__1613:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1614:
   jmp ___L__1612
___L__1611:
   movl __3Cundefined_3E,%eax
___L__1612:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1615
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1615:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1616
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1616
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1617
   .data
___L__1618:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1618,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1617:
___L__1616:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1619
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1621
   movl __3Clong_3E,%eax
   jmp ___L__1622
___L__1621:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1622:
   jmp ___L__1620
___L__1619:
   movl __3Cundefined_3E,%eax
___L__1620:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1623
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1623:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   orl 24(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1592
___L__1591:
   .data
___L__1624:
   .asciz "%p %p\012"
   .text
   movl $___L__1624,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1625:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1625,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1626:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1626,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1627:
   .asciz "bitor"
   .text
   movl $___L__1627,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1628:
   .asciz " "
   .text
   movl $___L__1628,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1629:
   .asciz " "
   .text
   movl $___L__1629,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1630:
   .asciz ")"
   .text
   movl $___L__1630,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1631:
   .asciz "\012"
   .text
   movl $___L__1631,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1592:
   addl $56,%esp
   leave
   ret
## defunc subr_bitand
   .text
___L__1632:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1473
   .data
___L__1633:
   .asciz "bitand"
   .text
   movl $___L__1633,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _arity2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1637
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1637
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1638
   .data
___L__1639:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1639,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1638:
___L__1637:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1640
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1642
   movl __3Clong_3E,%eax
   jmp ___L__1643
___L__1642:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1643:
   jmp ___L__1641
___L__1640:
   movl __3Cundefined_3E,%eax
___L__1641:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1636
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1644
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1644
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1645
   .data
___L__1646:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1646,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1645:
___L__1644:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1647
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1649
   movl __3Clong_3E,%eax
   jmp ___L__1650
___L__1649:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1650:
   jmp ___L__1648
___L__1647:
   movl __3Cundefined_3E,%eax
___L__1648:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1636:
   cmpl $0,%eax
   je ___L__1634
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1651
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1651
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1652
   .data
___L__1653:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1653,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1652:
___L__1651:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1654
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1656
   movl __3Clong_3E,%eax
   jmp ___L__1657
___L__1656:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1657:
   jmp ___L__1655
___L__1654:
   movl __3Cundefined_3E,%eax
___L__1655:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1658
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1658:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1659
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1659
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1660
   .data
___L__1661:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1661,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1660:
___L__1659:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1662
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1664
   movl __3Clong_3E,%eax
   jmp ___L__1665
___L__1664:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1665:
   jmp ___L__1663
___L__1662:
   movl __3Cundefined_3E,%eax
___L__1663:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1666
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1666:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   andl 24(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1635
___L__1634:
   .data
___L__1667:
   .asciz "%p %p\012"
   .text
   movl $___L__1667,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__1668:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1668,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1669:
   .asciz "non-numeric argument: ("
   .text
   movl $___L__1669,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1670:
   .asciz "bitand"
   .text
   movl $___L__1670,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1671:
   .asciz " "
   .text
   movl $___L__1671,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1672:
   .asciz " "
   .text
   movl $___L__1672,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _k__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1673:
   .asciz ")"
   .text
   movl $___L__1673,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1674:
   .asciz "\012"
   .text
   movl $___L__1674,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1635:
   addl $56,%esp
   leave
   ret
## defunc define-binary
## defunc subr_sub
   .text
___L__1675:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1450
   movl 64(%esp),%eax
   cmpl $0,%eax
   jne ___L__1676
   .data
___L__1677:
   .asciz "-: expected 1 or 2 arguments"
   .text
   movl $___L__1677,%eax
   movl %eax,16(%esp)
   movl _fatal,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__1676:
## eval.l 1451
   movl $0,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1452
   movl $1,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1453
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1681
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1681
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1682
   .data
___L__1683:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1683,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1682:
___L__1681:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1684
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1686
   movl __3Clong_3E,%eax
   jmp ___L__1687
___L__1686:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1687:
   jmp ___L__1685
___L__1684:
   movl __3Cundefined_3E,%eax
___L__1685:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1680:
   cmpl $0,%eax
   je ___L__1678
## eval.l 1454
## eval.l 1455
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1456
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1691
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1691
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1692
   .data
___L__1693:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1693,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1692:
___L__1691:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1694
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1696
   movl __3Clong_3E,%eax
   jmp ___L__1697
___L__1696:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1697:
   jmp ___L__1695
___L__1694:
   movl __3Cundefined_3E,%eax
___L__1695:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1690
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1698
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1698
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1699
   .data
___L__1700:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1700,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1699:
___L__1698:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1701
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1703
   movl __3Clong_3E,%eax
   jmp ___L__1704
___L__1703:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1704:
   jmp ___L__1702
___L__1701:
   movl __3Cundefined_3E,%eax
___L__1702:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1690:
   cmpl $0,%eax
   je ___L__1688
## eval.l 1457
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1705
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1705
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1706
   .data
___L__1707:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1707,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1706:
___L__1705:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1708
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1710
   movl __3Clong_3E,%eax
   jmp ___L__1711
___L__1710:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1711:
   jmp ___L__1709
___L__1708:
   movl __3Cundefined_3E,%eax
___L__1709:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1712
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1712:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1713
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1713
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1714
   .data
___L__1715:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1715,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1714:
___L__1713:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1716
   movl $1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1718
   movl __3Clong_3E,%eax
   jmp ___L__1719
___L__1718:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1719:
   jmp ___L__1717
___L__1716:
   movl __3Cundefined_3E,%eax
___L__1717:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1720
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1720:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   subl 24(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1689
___L__1688:
## eval.l 1458
   .data
___L__1721:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1721,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1722:
   .asciz "non-numeric argument: (- "
   .text
   movl $___L__1722,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1723:
   .asciz " "
   .text
   movl $___L__1723,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1724:
   .asciz ")"
   .text
   movl $___L__1724,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1725:
   .asciz "\012"
   .text
   movl $___L__1725,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1689:
   jmp ___L__1679
___L__1678:
## eval.l 1459
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1729
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1729
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1730
   .data
___L__1731:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1731,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1730:
___L__1729:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1732
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1734
   movl __3Clong_3E,%eax
   jmp ___L__1735
___L__1734:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1735:
   jmp ___L__1733
___L__1732:
   movl __3Cundefined_3E,%eax
___L__1733:
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1728:
   cmpl $0,%eax
   je ___L__1726
## eval.l 1460
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1736
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1736
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1737
   .data
___L__1738:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1738,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1737:
___L__1736:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1739
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1741
   movl __3Clong_3E,%eax
   jmp ___L__1742
___L__1741:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1742:
   jmp ___L__1740
___L__1739:
   movl __3Cundefined_3E,%eax
___L__1740:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1743
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1743:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   negl %eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__1727
___L__1726:
## eval.l 1461
   .data
___L__1744:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__1744,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1745:
   .asciz "non-numeric argument: (- "
   .text
   movl $___L__1745,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1746:
   .asciz ")"
   .text
   movl $___L__1746,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__1747:
   .asciz "\012"
   .text
   movl $___L__1747,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__1727:
___L__1679:
   addl $56,%esp
   leave
   ret
## defunc arity3
   .text
___L__1748:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1443
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1751
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1751
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1752
   .data
___L__1753:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1753,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1752:
___L__1751:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1754
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1756
   movl __3Clong_3E,%eax
   jmp ___L__1757
___L__1756:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1757:
   jmp ___L__1755
___L__1754:
   movl __3Cundefined_3E,%eax
___L__1755:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1750
## eval.l 1444
   movl $1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1758
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1758
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1759
   .data
___L__1760:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1760,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1759:
___L__1758:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1761
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__1763
   movl __3Clong_3E,%eax
   jmp ___L__1764
___L__1763:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1764:
   jmp ___L__1762
___L__1761:
   movl __3Cundefined_3E,%eax
___L__1762:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1750
## eval.l 1445
   movl $1,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1765
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1765
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1766
   .data
___L__1767:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1767,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1766:
___L__1765:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1768
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1770
   movl __3Clong_3E,%eax
   jmp ___L__1771
___L__1770:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1771:
   jmp ___L__1769
___L__1768:
   movl __3Cundefined_3E,%eax
___L__1769:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1750
## eval.l 1446
   movl $1,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $0,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1750:
   cmpl $0,%eax
   jne ___L__1749
## eval.l 1447
   .data
___L__1772:
   .asciz "%s: expected 3 arguments"
   .text
   movl $___L__1772,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1749:
   addl $40,%esp
   leave
   ret
## defunc arity2
   .text
___L__1773:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1437
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1776
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1776
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1777
   .data
___L__1778:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1778,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1777:
___L__1776:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1779
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1781
   movl __3Clong_3E,%eax
   jmp ___L__1782
___L__1781:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1782:
   jmp ___L__1780
___L__1779:
   movl __3Cundefined_3E,%eax
___L__1780:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1775
## eval.l 1438
   movl $1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1783
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1783
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1784
   .data
___L__1785:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1785,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1784:
___L__1783:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__1786
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__1788
   movl __3Clong_3E,%eax
   jmp ___L__1789
___L__1788:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1789:
   jmp ___L__1787
___L__1786:
   movl __3Cundefined_3E,%eax
___L__1787:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1775
## eval.l 1439
   movl $1,%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $0,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__1775:
   cmpl $0,%eax
   jne ___L__1774
## eval.l 1440
   .data
___L__1790:
   .asciz "%s: expected 2 arguments"
   .text
   movl $___L__1790,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1774:
   addl $40,%esp
   leave
   ret
## defunc subr_not
   .text
___L__1791:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1434
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__1792
   movl $0,%eax
   jmp ___L__1793
___L__1792:
   movl _s__t,%eax
___L__1793:
   addl $40,%esp
   leave
   ret
## defunc subr_quote
   .text
___L__1794:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1431
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_and
   .text
___L__1795:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1423
   movl _s__t,%eax
   movl %eax,16(%esp)
## eval.l 1424
   jmp ___L__1797
___L__1796:
## eval.l 1425
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   cmpl $0,%eax
   jne ___L__1798
## eval.l 1426
   movl $0,%eax
   jmp ___L__1799
___L__1798:
## eval.l 1427
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,64(%esp)
___L__1797:
## eval.l 1424
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1800
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1800
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1801
   .data
___L__1802:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1802,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1801:
___L__1800:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1803
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1805
   movl __3Clong_3E,%eax
   jmp ___L__1806
___L__1805:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1806:
   jmp ___L__1804
___L__1803:
   movl __3Cundefined_3E,%eax
___L__1804:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1796
   movl 16(%esp),%eax
___L__1799:
   addl $56,%esp
   leave
   ret
## defunc subr_or
   .text
___L__1807:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1416
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 1417
   jmp ___L__1809
___L__1808:
## eval.l 1418
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   cmpl $0,%eax
   je ___L__1810
## eval.l 1419
   movl 16(%esp),%eax
   jmp ___L__1811
___L__1810:
## eval.l 1420
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,64(%esp)
___L__1809:
## eval.l 1417
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1812
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1812
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1813
   .data
___L__1814:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1814,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1813:
___L__1812:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1815
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1817
   movl __3Clong_3E,%eax
   jmp ___L__1818
___L__1817:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1818:
   jmp ___L__1816
___L__1815:
   movl __3Cundefined_3E,%eax
___L__1816:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1808
___L__1811:
   addl $56,%esp
   leave
   ret
## defunc subr_if
   .text
___L__1819:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1407
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _k__eval,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__1820
## eval.l 1408
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__1821
___L__1820:
## eval.l 1409
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 1410
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cdr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
## eval.l 1411
   jmp ___L__1823
___L__1822:
## eval.l 1412
   movl $0,%eax
   movl %eax,20(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
___L__1823:
## eval.l 1411
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _k__cdr,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1824
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1824
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__1825
   .data
___L__1826:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1826,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1825:
___L__1824:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1827
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1829
   movl __3Clong_3E,%eax
   jmp ___L__1830
___L__1829:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1830:
   jmp ___L__1828
___L__1827:
   movl __3Cundefined_3E,%eax
___L__1828:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1822
   movl 16(%esp),%eax
___L__1821:
   addl $56,%esp
   leave
   ret
## defunc subr_while
   .text
___L__1831:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1399
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,20(%esp)
## eval.l 1401
   jmp ___L__1833
___L__1832:
## eval.l 1402
   movl 20(%esp),%eax
   movl %eax,24(%esp)
## eval.l 1403
   jmp ___L__1835
___L__1834:
## eval.l 1404
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1835:
## eval.l 1403
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _k__cdr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1836
   movl $1,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1836
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__1837
   .data
___L__1838:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1838,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1837:
___L__1836:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1839
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1841
   movl __3Clong_3E,%eax
   jmp ___L__1842
___L__1841:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1842:
   jmp ___L__1840
___L__1839:
   movl __3Cundefined_3E,%eax
___L__1840:
   movl %eax,32(%esp)
   movl __3Cpair_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1834
___L__1833:
## eval.l 1401
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__1832
   addl $56,%esp
   leave
   ret
## defunc subr_set
   .text
___L__1843:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1379
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1380
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__1845
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1845
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1846
   .data
___L__1847:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1847,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1846:
___L__1845:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__1848
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1850
   movl __3Clong_3E,%eax
   jmp ___L__1851
___L__1850:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1851:
   jmp ___L__1849
___L__1848:
   movl __3Cundefined_3E,%eax
___L__1849:
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1844
## eval.l 1381
## eval.l 1382
   .data
___L__1852:
   .asciz "\012cannot set undefined variable: "
   .text
   movl $___L__1852,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1383
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _k__dumpln,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1384
   .data
___L__1853:
   .asciz "aborting"
   .text
   movl $___L__1853,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__1844:
## eval.l 1386
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 84(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1387
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _is__global,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__1854
## eval.l 1388
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1856
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1856
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1857
   .data
___L__1858:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1858,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1857:
___L__1856:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1859
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1861
   movl __3Clong_3E,%eax
   jmp ___L__1862
___L__1861:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1862:
   jmp ___L__1860
___L__1859:
   movl __3Cundefined_3E,%eax
___L__1860:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1863
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1863:
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 36(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 28(%esp),%eax
   movl %eax,(%ecx)
   jmp ___L__1855
___L__1854:
## eval.l 1389
## eval.l 1390
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1864
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1864
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__1865
   .data
___L__1866:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1866,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1865:
___L__1864:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1867
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1869
   movl __3Clong_3E,%eax
   jmp ___L__1870
___L__1869:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1870:
   jmp ___L__1868
___L__1867:
   movl __3Cundefined_3E,%eax
___L__1868:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1871
   movl __3Cvariable_3E,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1871:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1872
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1872
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1873
   .data
___L__1874:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1874,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1873:
___L__1872:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1875
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1877
   movl __3Clong_3E,%eax
   jmp ___L__1878
___L__1877:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1878:
   jmp ___L__1876
___L__1875:
   movl __3Cundefined_3E,%eax
___L__1876:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1879
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1879:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1880
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1880
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1881
   .data
___L__1882:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1882,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1881:
___L__1880:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1883
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1885
   movl __3Clong_3E,%eax
   jmp ___L__1886
___L__1885:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1886:
   jmp ___L__1884
___L__1883:
   movl __3Cundefined_3E,%eax
___L__1884:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1887
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1887:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1389
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1888
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1888
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1889
   .data
___L__1890:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1890,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1889:
___L__1888:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1891
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1893
   movl __3Clong_3E,%eax
   jmp ___L__1894
___L__1893:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1894:
   jmp ___L__1892
___L__1891:
   movl __3Cundefined_3E,%eax
___L__1892:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1895
   movl __3Ccontext_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1895:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1896
   movl $1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1896
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1897
   .data
___L__1898:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1898,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1897:
___L__1896:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1899
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1901
   movl __3Clong_3E,%eax
   jmp ___L__1902
___L__1901:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1902:
   jmp ___L__1900
___L__1899:
   movl __3Cundefined_3E,%eax
___L__1900:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cenv_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1903
   movl __3Cenv_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1903:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1904
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1904
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__1905
   .data
___L__1906:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1906,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1905:
___L__1904:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1907
   movl $1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__1909
   movl __3Clong_3E,%eax
   jmp ___L__1910
___L__1909:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1910:
   jmp ___L__1908
___L__1907:
   movl __3Cundefined_3E,%eax
___L__1908:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1911
   movl __3Clong_3E,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1911:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   subl 20(%esp),%eax
   movl %eax,20(%esp)
## eval.l 1392
   jmp ___L__1913
___L__1912:
## eval.l 1393
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1914
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1914
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1915
   .data
___L__1916:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1916,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1915:
___L__1914:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1917
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1919
   movl __3Clong_3E,%eax
   jmp ___L__1920
___L__1919:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1920:
   jmp ___L__1918
___L__1917:
   movl __3Cundefined_3E,%eax
___L__1918:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1921
   movl __3Ccontext_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1921:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,84(%esp)
## eval.l 1394
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
   movl %eax,20(%esp)
___L__1913:
## eval.l 1392
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $0,%eax
   cmpl 28(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1912
## eval.l 1395
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1922
   movl $1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1922
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1923
   .data
___L__1924:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1924,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1923:
___L__1922:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1925
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1927
   movl __3Clong_3E,%eax
   jmp ___L__1928
___L__1927:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1928:
   jmp ___L__1926
___L__1925:
   movl __3Cundefined_3E,%eax
___L__1926:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1929
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1929:
   movl $2,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1930
   movl $1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1930
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__1931
   .data
___L__1932:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1932,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1931:
___L__1930:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1933
   movl $1,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1935
   movl __3Clong_3E,%eax
   jmp ___L__1936
___L__1935:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1936:
   jmp ___L__1934
___L__1933:
   movl __3Cundefined_3E,%eax
___L__1934:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1937
   movl __3Cvariable_3E,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1937:
   movl $3,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1938
   movl $1,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1938
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 44(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__1939
   .data
___L__1940:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1940,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1939:
___L__1938:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1941
   movl $1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1943
   movl __3Clong_3E,%eax
   jmp ___L__1944
___L__1943:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1944:
   jmp ___L__1942
___L__1941:
   movl __3Cundefined_3E,%eax
___L__1942:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1945
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1945:
   movl $0,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _k__set__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1855:
   addl $72,%esp
   leave
   ret
## defunc subr_let
   .text
___L__1946:
## frame 16 52 80 96
   pushl %ebp
   movl %esp,%ebp
   subl $88,%esp
## eval.l 1351
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 1352
   movl 96(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1351
## eval.l 1353
   movl 100(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1947
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1947
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1948
   .data
___L__1949:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1949,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1948:
___L__1947:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__1950
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1952
   movl __3Clong_3E,%eax
   jmp ___L__1953
___L__1952:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1953:
   jmp ___L__1951
___L__1950:
   movl __3Cundefined_3E,%eax
___L__1951:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1954
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1954:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 1351
## eval.l 1354
   movl 96(%esp),%eax
   movl %eax,28(%esp)
   movl _k__cddr,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1355
   leal 16(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1356
   jmp ___L__1956
___L__1955:
## eval.l 1357
   movl $0,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
## eval.l 1358
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1959
   movl $1,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1959
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__1960
   .data
___L__1961:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1961,%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1960:
___L__1959:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__1962
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__1964
   movl __3Clong_3E,%eax
   jmp ___L__1965
___L__1964:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1965:
   jmp ___L__1963
___L__1962:
   movl __3Cundefined_3E,%eax
___L__1963:
   movl %eax,40(%esp)
   movl __3Cpair_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1957
## eval.l 1359
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
## eval.l 1360
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
## eval.l 1361
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 1362
   jmp ___L__1967
___L__1966:
## eval.l 1363
   movl $0,%eax
   movl %eax,44(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl 100(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1364
   movl $1,%eax
   movl %eax,32(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
___L__1967:
## eval.l 1362
   movl 48(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1968
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1968
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__1969
   .data
___L__1970:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1970,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1969:
___L__1968:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__1971
   movl $1,%eax
   movl %eax,56(%esp)
   movl 32(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__1973
   movl __3Clong_3E,%eax
   jmp ___L__1974
___L__1973:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1974:
   jmp ___L__1972
___L__1971:
   movl __3Cundefined_3E,%eax
___L__1972:
   movl %eax,32(%esp)
   movl __3Cpair_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1966
## eval.l 1365
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl 56(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__1975
   movl $1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1975
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
   subl 60(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__1976
   .data
___L__1977:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1977,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   movl %eax,60(%esp)
   movl $-1,%eax
   movl %eax,64(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 64(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,64(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 60(%esp),%ecx
   movl %ecx,4(%esp)
   movl 64(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1976:
___L__1975:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__1978
   movl $1,%eax
   movl %eax,64(%esp)
   movl 52(%esp),%eax
   andl 64(%esp),%eax
   cmpl $0,%eax
   je ___L__1980
   movl __3Clong_3E,%eax
   jmp ___L__1981
___L__1980:
   movl $-1,%eax
   movl %eax,64(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 64(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1981:
   jmp ___L__1979
___L__1978:
   movl __3Cundefined_3E,%eax
___L__1979:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,64(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 64(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1982
   movl __3Cvariable_3E,%eax
   movl %eax,64(%esp)
   movl 52(%esp),%eax
   movl %eax,60(%esp)
   movl _type__check__fail,%eax
   movl 64(%esp),%ecx
   movl %ecx,0(%esp)
   movl 60(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1982:
   movl $3,%eax
   movl %eax,52(%esp)
   movl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl 56(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__1983
   movl $1,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
   andl 60(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1983
   movl $1,%eax
   movl %eax,60(%esp)
   movl $16,%eax
   movl %eax,64(%esp)
   movl 52(%esp),%eax
   subl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 60(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,60(%esp)
   movl $1,%eax
   andl 60(%esp),%eax
   cmpl $0,%eax
   jne ___L__1984
   .data
___L__1985:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1985,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
   movl %eax,64(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 60(%esp),%ecx
   movl %ecx,0(%esp)
   movl 64(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1984:
___L__1983:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__1986
   movl $1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__1988
   movl __3Clong_3E,%eax
   jmp ___L__1989
___L__1988:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1989:
   jmp ___L__1987
___L__1986:
   movl __3Cundefined_3E,%eax
___L__1987:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1990
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   movl %eax,64(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 64(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__1990:
   movl $0,%eax
   movl %eax,52(%esp)
   movl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _k__set__array__at,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__1958
___L__1957:
___L__1958:
## eval.l 1366
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
___L__1956:
## eval.l 1356
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1991
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__1991
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__1992
   .data
___L__1993:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__1993,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__1992:
___L__1991:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__1994
   movl $1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__1996
   movl __3Clong_3E,%eax
   jmp ___L__1997
___L__1996:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__1997:
   jmp ___L__1995
___L__1994:
   movl __3Cundefined_3E,%eax
___L__1995:
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1955
## eval.l 1367
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 1368
   jmp ___L__1999
___L__1998:
## eval.l 1369
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 100(%esp),%eax
   movl %eax,52(%esp)
   movl _k__eval,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1370
   movl $1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
___L__1999:
## eval.l 1368
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2000
   movl $1,%eax
   movl %eax,36(%esp)
   movl 52(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2000
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2001
   .data
___L__2002:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2002,%eax
   movl %eax,36(%esp)
   movl 52(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2001:
___L__2000:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2003
   movl $1,%eax
   movl %eax,48(%esp)
   movl 52(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2005
   movl __3Clong_3E,%eax
   jmp ___L__2006
___L__2005:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2006:
   jmp ___L__2004
___L__2003:
   movl __3Cundefined_3E,%eax
___L__2004:
   movl %eax,52(%esp)
   movl __3Cpair_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__1998
   movl %eax,52(%esp)
## eval.l 1355
   leal 16(%esp),%eax
   movl %eax,48(%esp)
   movl _gc__pop__root,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 52(%esp),%eax
   movl 16(%esp),%eax
   addl $88,%esp
   leave
   ret
## defunc subr_lambda
   .text
___L__2007:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1348
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cexpr_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc subr_definedP
   .text
___L__2008:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1343
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1344
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__2009
   movl _globals,%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2010
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2010
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2011
   .data
___L__2012:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2012,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2011:
___L__2010:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2013
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2015
   movl __3Clong_3E,%eax
   jmp ___L__2016
___L__2015:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2016:
   jmp ___L__2014
___L__2013:
   movl __3Cundefined_3E,%eax
___L__2014:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2017
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2017:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2009:
   movl %eax,20(%esp)
## eval.l 1345
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _k__env__find__variable,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc subr_define
   .text
___L__2018:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1333
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1334
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2020
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2020
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2021
   .data
___L__2022:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2022,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2021:
___L__2020:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2023
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2025
   movl __3Clong_3E,%eax
   jmp ___L__2026
___L__2025:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2026:
   jmp ___L__2024
___L__2023:
   movl __3Cundefined_3E,%eax
___L__2024:
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2019
## eval.l 1335
## eval.l 1336
   .data
___L__2027:
   .asciz "\012error: non-variable in define: "
   .text
   movl $___L__2027,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1337
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _k__dumpln,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1338
   .data
___L__2028:
   .asciz "aborting"
   .text
   movl $___L__2028,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2019:
## eval.l 1339
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _k__cadr,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1340
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2029
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2029
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2030
   .data
___L__2031:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2031,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2030:
___L__2029:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2032
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2034
   movl __3Clong_3E,%eax
   jmp ___L__2035
___L__2034:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2035:
   jmp ___L__2033
___L__2032:
   movl __3Cundefined_3E,%eax
___L__2033:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2036
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2036:
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 36(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 28(%esp),%eax
   movl %eax,(%ecx)
   addl $56,%esp
   leave
   ret
## defunc evlist
   .text
___L__2037:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1282
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2040
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2040
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2041
   .data
___L__2042:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2042,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2041:
___L__2040:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2043
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2045
   movl __3Clong_3E,%eax
   jmp ___L__2046
___L__2045:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2046:
   jmp ___L__2044
___L__2043:
   movl __3Cundefined_3E,%eax
___L__2044:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2038
## eval.l 1283
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl _k__eval,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1284
   leal 28(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1285
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _evlist,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1286
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1287
   movl 28(%esp),%eax
   movl %eax,16(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1286
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__pop__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
## eval.l 1284
   leal 28(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   jmp ___L__2039
___L__2038:
   movl 48(%esp),%eax
___L__2039:
   addl $40,%esp
   leave
   ret
## defunc k_encode
   .text
___L__2047:
## frame 16 40 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1214
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2050
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2050
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2051
   .data
___L__2052:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2052,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2051:
___L__2050:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2053
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2055
   movl __3Clong_3E,%eax
   jmp ___L__2056
___L__2055:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2056:
   jmp ___L__2054
___L__2053:
   movl __3Cundefined_3E,%eax
___L__2054:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2048
## eval.l 1215
   movl $0,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _k__encode,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1216
   movl $1,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1217
   leal 28(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1218
## eval.l 1219
   movl _f__let,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2057
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _k__cadr,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1220
   leal 84(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__push__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1221
   movl 84(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2059
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2059
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__2060
   .data
___L__2061:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2061,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2060:
___L__2059:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2062
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2064
   movl __3Clong_3E,%eax
   jmp ___L__2065
___L__2064:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2065:
   jmp ___L__2063
___L__2062:
   movl __3Cundefined_3E,%eax
___L__2063:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cenv_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2066
   movl __3Cenv_3E,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2066:
   movl $2,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2067
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2067
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__2068
   .data
___L__2069:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2069,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2068:
___L__2067:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2070
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2072
   movl __3Clong_3E,%eax
   jmp ___L__2073
___L__2072:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2073:
   jmp ___L__2071
___L__2070:
   movl __3Cundefined_3E,%eax
___L__2071:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Clong_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2074
   movl __3Clong_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2074:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _new_2D_3Cenv_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,84(%esp)
## eval.l 1222
   jmp ___L__2076
___L__2075:
## eval.l 1223
   movl $0,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
## eval.l 1224
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2078
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2078
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2079
   .data
___L__2080:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2080,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2079:
___L__2078:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2081
   movl $1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2083
   movl __3Clong_3E,%eax
   jmp ___L__2084
___L__2083:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2084:
   jmp ___L__2082
___L__2081:
   movl __3Cundefined_3E,%eax
___L__2082:
   movl %eax,32(%esp)
   movl __3Cpair_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2077
   movl $0,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
___L__2077:
## eval.l 1225
   movl 84(%esp),%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl _k__env__define,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1226
   movl $1,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
___L__2076:
## eval.l 1222
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2085
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2085
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2086
   .data
___L__2087:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2087,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2086:
___L__2085:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2088
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2090
   movl __3Clong_3E,%eax
   jmp ___L__2091
___L__2090:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2091:
   jmp ___L__2089
___L__2088:
   movl __3Cundefined_3E,%eax
___L__2089:
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2075
## eval.l 1227
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 84(%esp),%eax
   movl %eax,32(%esp)
   movl _enlist,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1228
   movl 84(%esp),%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl %eax,36(%esp)
## eval.l 1220
   leal 84(%esp),%eax
   movl %eax,32(%esp)
   movl _gc__pop__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%eax
   jmp ___L__2058
___L__2057:
## eval.l 1218
## eval.l 1229
   movl _f__lambda,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2092
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _k__cadr,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1230
   leal 84(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1231
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl $1,%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,52(%esp)
   movl _new_2D_3Cenv_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,84(%esp)
## eval.l 1232
   jmp ___L__2095
___L__2094:
## eval.l 1233
   movl 84(%esp),%eax
   movl %eax,52(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl _k__env__define,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1234
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
___L__2095:
## eval.l 1232
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2096
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2096
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2097
   .data
___L__2098:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2098,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2097:
___L__2096:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2099
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2101
   movl __3Clong_3E,%eax
   jmp ___L__2102
___L__2101:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2102:
   jmp ___L__2100
___L__2099:
   movl __3Cundefined_3E,%eax
___L__2100:
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2094
## eval.l 1235
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2103
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,40(%esp)
   movl $0,%eax
   movl %eax,52(%esp)
   movl _k__env__define,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2103:
## eval.l 1236
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl _enlist,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1237
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl %eax,52(%esp)
## eval.l 1230
   leal 84(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 52(%esp),%eax
   jmp ___L__2093
___L__2092:
## eval.l 1218
## eval.l 1238
   movl _f__define,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2104
   movl _globals,%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2106
   movl $1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2106
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 52(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2107
   .data
___L__2108:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2108,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2107:
___L__2106:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2109
   movl $1,%eax
   movl %eax,32(%esp)
   movl 52(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2111
   movl __3Clong_3E,%eax
   jmp ___L__2112
___L__2111:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2112:
   jmp ___L__2110
___L__2109:
   movl __3Cundefined_3E,%eax
___L__2110:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2113
   movl __3Cvariable_3E,%eax
   movl %eax,32(%esp)
   movl 52(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2113:
   movl $1,%eax
   movl %eax,52(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _k__car,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,52(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl _k__env__define,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1239
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _k__cdr,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,52(%esp)
   movl 84(%esp),%eax
   movl %eax,24(%esp)
   movl _enlist,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1240
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   jmp ___L__2105
___L__2104:
## eval.l 1218
## eval.l 1241
   movl _f__set,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2114
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _k__car,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,52(%esp)
   movl _k__env__find__variable,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,52(%esp)
## eval.l 1242
   movl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__2116
   .data
___L__2117:
   .asciz "set: undefined variable: %s"
   .text
   movl $___L__2117,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__car,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2118
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2118
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2119
   .data
___L__2120:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2120,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2119:
___L__2118:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2121
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2123
   movl __3Clong_3E,%eax
   jmp ___L__2124
___L__2123:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2124:
   jmp ___L__2122
___L__2121:
   movl __3Cundefined_3E,%eax
___L__2122:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2125
   movl __3Csymbol_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2125:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2116:
## eval.l 1243
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__cdr,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl _enlist,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1244
   movl 52(%esp),%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   jmp ___L__2115
___L__2114:
## eval.l 1218
## eval.l 1245
   movl _f__quote,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   cmpl 52(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2126
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl 84(%esp),%eax
   movl %eax,24(%esp)
   movl _enlist,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   jmp ___L__2127
___L__2126:
   movl $0,%eax
___L__2127:
___L__2115:
___L__2105:
___L__2093:
___L__2058:
## eval.l 1246
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,80(%esp)
   movl %eax,52(%esp)
## eval.l 1217
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 28(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 52(%esp),%eax
   jmp ___L__2049
___L__2048:
## eval.l 1247
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2130
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2130
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 16(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2131
   .data
___L__2132:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2132,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2131:
___L__2130:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2133
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2135
   movl __3Clong_3E,%eax
   jmp ___L__2136
___L__2135:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2136:
   jmp ___L__2134
___L__2133:
   movl __3Cundefined_3E,%eax
___L__2134:
   movl %eax,16(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2128
## eval.l 1248
   movl 84(%esp),%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _k__env__find__variable,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1249
   movl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2137
   .data
___L__2138:
   .asciz "undefined variable: %s"
   .text
   movl $___L__2138,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2139
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2139
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2140
   .data
___L__2141:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2141,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2140:
___L__2139:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2142
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2144
   movl __3Clong_3E,%eax
   jmp ___L__2145
___L__2144:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2145:
   jmp ___L__2143
___L__2142:
   movl __3Cundefined_3E,%eax
___L__2143:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2146
   movl __3Csymbol_3E,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2146:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2137:
## eval.l 1250
   movl 24(%esp),%eax
   movl %eax,80(%esp)
## eval.l 1251
   movl 80(%esp),%eax
   movl %eax,52(%esp)
   movl _is__global,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2147
## eval.l 1252
   movl 80(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2149
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2149
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2150
   .data
___L__2151:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2151,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2150:
___L__2149:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2152
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2154
   movl __3Clong_3E,%eax
   jmp ___L__2155
___L__2154:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2155:
   jmp ___L__2153
___L__2152:
   movl __3Cundefined_3E,%eax
___L__2153:
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2156
   movl __3Cvariable_3E,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2156:
   movl $1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
## eval.l 1253
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2159
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2159
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2160
   .data
___L__2161:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2161,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2160:
___L__2159:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2162
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2164
   movl __3Clong_3E,%eax
   jmp ___L__2165
___L__2164:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2165:
   jmp ___L__2163
___L__2162:
   movl __3Cundefined_3E,%eax
___L__2163:
   movl %eax,16(%esp)
   movl __3Cform_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2158
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2166
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2166
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2167
   .data
___L__2168:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2168,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2167:
___L__2166:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2169
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2171
   movl __3Clong_3E,%eax
   jmp ___L__2172
___L__2171:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2172:
   jmp ___L__2170
___L__2169:
   movl __3Cundefined_3E,%eax
___L__2170:
   movl %eax,16(%esp)
   movl __3Cfixed_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__2158:
   cmpl $0,%eax
   je ___L__2157
## eval.l 1254
   movl 52(%esp),%eax
   movl %eax,80(%esp)
___L__2157:
   jmp ___L__2148
___L__2147:
## eval.l 1255
   movl 80(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2173
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2173
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2174
   .data
___L__2175:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2175,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2174:
___L__2173:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2176
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2178
   movl __3Clong_3E,%eax
   jmp ___L__2179
___L__2178:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2179:
   jmp ___L__2177
___L__2176:
   movl __3Cundefined_3E,%eax
___L__2177:
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2180
   movl __3Cvariable_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2180:
   movl $2,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
## eval.l 1256
   movl 84(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2182
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2182
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2183
   .data
___L__2184:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2184,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2183:
___L__2182:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2185
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2187
   movl __3Clong_3E,%eax
   jmp ___L__2188
___L__2187:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2188:
   jmp ___L__2186
___L__2185:
   movl __3Cundefined_3E,%eax
___L__2186:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2189
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2189:
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2190
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2190
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2191
   .data
___L__2192:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2192,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2191:
___L__2190:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2193
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2195
   movl __3Clong_3E,%eax
   jmp ___L__2196
___L__2195:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2196:
   jmp ___L__2194
___L__2193:
   movl __3Cundefined_3E,%eax
___L__2194:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2197
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2197:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2198
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2198
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2199
   .data
___L__2200:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2200,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2199:
___L__2198:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2201
   movl $1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2203
   movl __3Clong_3E,%eax
   jmp ___L__2204
___L__2203:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2204:
   jmp ___L__2202
___L__2201:
   movl __3Cundefined_3E,%eax
___L__2202:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cenv_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2205
   movl __3Cenv_3E,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2205:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2206
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2206
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 36(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2207
   .data
___L__2208:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2208,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2207:
___L__2206:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2209
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2211
   movl __3Clong_3E,%eax
   jmp ___L__2212
___L__2211:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2212:
   jmp ___L__2210
___L__2209:
   movl __3Cundefined_3E,%eax
___L__2210:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2213
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2213:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2181
## eval.l 1257
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2214
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2214
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 20(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2215
   .data
___L__2216:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2216,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2215:
___L__2214:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2217
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2219
   movl __3Clong_3E,%eax
   jmp ___L__2220
___L__2219:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2220:
   jmp ___L__2218
___L__2217:
   movl __3Cundefined_3E,%eax
___L__2218:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl __3Cenv_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2221
   movl __3Cenv_3E,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2221:
   movl _s__t,%eax
   movl %eax,20(%esp)
   movl $4,%eax
   movl %eax,44(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
___L__2181:
___L__2148:
   jmp ___L__2129
___L__2128:
## eval.l 1258
   movl _encoders,%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2222
   movl $1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2222
   movl $1,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $1,%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__2223
   .data
___L__2224:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2224,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2223:
___L__2222:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2225
   movl $1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2227
   movl __3Clong_3E,%eax
   jmp ___L__2228
___L__2227:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2228:
   jmp ___L__2226
___L__2225:
   movl __3Cundefined_3E,%eax
___L__2226:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2229
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2229:
   movl $1,%eax
   movl %eax,52(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 80(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2230
   movl $1,%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2230
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2231
   .data
___L__2232:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2232,%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 16(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2231:
___L__2230:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2233
   movl $1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2235
   movl __3Clong_3E,%eax
   jmp ___L__2236
___L__2235:
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2236:
   jmp ___L__2234
___L__2233:
   movl __3Cundefined_3E,%eax
___L__2234:
   movl %eax,52(%esp)
   movl _k__array__at,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,52(%esp)
## eval.l 1259
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2237
   .data
___L__2238:
   .asciz "APPLY GOT ENCODER\012... "
   .text
   movl $___L__2238,%eax
   movl %eax,24(%esp)
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl _k__println,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2237:
## eval.l 1260
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2239
## eval.l 1261
   movl 84(%esp),%eax
   movl %eax,44(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1262
   leal 16(%esp),%eax
   movl %eax,44(%esp)
   movl _gc__push__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1263
   movl 80(%esp),%eax
   movl %eax,44(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1264
   .data
___L__2240:
   .asciz "APPLY ENCODER\012... "
   .text
   movl $___L__2240,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2241:
   .asciz " "
   .text
   movl $___L__2241,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _k__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2242:
   .asciz " "
   .text
   movl $___L__2242,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 84(%esp),%eax
   movl %eax,24(%esp)
   movl _k__println,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1265
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,44(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _k__apply,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,80(%esp)
   movl %eax,20(%esp)
## eval.l 1262
   leal 16(%esp),%eax
   movl %eax,44(%esp)
   movl _gc__pop__root,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
___L__2239:
___L__2129:
___L__2049:
   movl 80(%esp),%eax
   addl $72,%esp
   leave
   ret
## defunc enlist
   .text
___L__2243:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1269
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2246
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2246
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2247
   .data
___L__2248:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2248,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2247:
___L__2246:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2249
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2251
   movl __3Clong_3E,%eax
   jmp ___L__2252
___L__2251:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2252:
   jmp ___L__2250
___L__2249:
   movl __3Cundefined_3E,%eax
___L__2250:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2244
## eval.l 1270
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl _k__encode,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1271
   leal 28(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1272
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _enlist,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1273
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1274
   movl 28(%esp),%eax
   movl %eax,16(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1273
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__pop__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
## eval.l 1271
   leal 28(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   jmp ___L__2245
___L__2244:
## eval.l 1275
   movl 48(%esp),%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _k__encode,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2245:
   addl $40,%esp
   leave
   ret
## defunc k_expand
   .text
___L__2253:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1155
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2256
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2256
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2257
   .data
___L__2258:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2258,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2257:
___L__2256:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2259
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2261
   movl __3Clong_3E,%eax
   jmp ___L__2262
___L__2261:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2262:
   jmp ___L__2260
___L__2259:
   movl __3Cundefined_3E,%eax
___L__2260:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2254
## eval.l 1156
   movl $0,%eax
   movl %eax,16(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _k__expand,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1157
   leal 28(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1158
   movl 28(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2265
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2265
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2266
   .data
___L__2267:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2267,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2266:
___L__2265:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2268
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2270
   movl __3Clong_3E,%eax
   jmp ___L__2271
___L__2270:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2271:
   jmp ___L__2269
___L__2268:
   movl __3Cundefined_3E,%eax
___L__2269:
   movl %eax,16(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2263
## eval.l 1159
   movl 84(%esp),%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl _k__env__find__variable,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1160
   movl 32(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2273
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2273
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2274
   .data
___L__2275:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2275,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2274:
___L__2273:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2276
   movl $1,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2278
   movl __3Clong_3E,%eax
   jmp ___L__2279
___L__2278:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2279:
   jmp ___L__2277
___L__2276:
   movl __3Cundefined_3E,%eax
___L__2277:
   movl %eax,16(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2272
   movl 32(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2280
   movl $1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2280
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2281
   .data
___L__2282:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2282,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2281:
___L__2280:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2283
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2285
   movl __3Clong_3E,%eax
   jmp ___L__2286
___L__2285:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2286:
   jmp ___L__2284
___L__2283:
   movl __3Cundefined_3E,%eax
___L__2284:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2287
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2287:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
___L__2272:
## eval.l 1161
   movl 32(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2289
   movl $1,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2289
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2290
   .data
___L__2291:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2291,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2290:
___L__2289:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2292
   movl $1,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2294
   movl __3Clong_3E,%eax
   jmp ___L__2295
___L__2294:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2295:
   jmp ___L__2293
___L__2292:
   movl __3Cundefined_3E,%eax
___L__2293:
   movl %eax,16(%esp)
   movl __3Cform_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2288
## eval.l 1162
   movl 32(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2296
   movl $1,%eax
   movl %eax,20(%esp)
   movl 40(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2296
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2297
   .data
___L__2298:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2298,%eax
   movl %eax,20(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2297:
___L__2296:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2299
   movl $1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2301
   movl __3Clong_3E,%eax
   jmp ___L__2302
___L__2301:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2302:
   jmp ___L__2300
___L__2299:
   movl __3Cundefined_3E,%eax
___L__2300:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cform_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2303
   movl __3Cform_3E,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2303:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1163
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2304
## eval.l 1164
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1165
   leal 36(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__push__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1166
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _k__apply,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1167
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 84(%esp),%eax
   movl %eax,24(%esp)
   movl _k__expand,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
   movl %eax,24(%esp)
## eval.l 1165
   leal 36(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
## eval.l 1168
   leal 28(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1169
   movl 28(%esp),%eax
   jmp ___L__2305
___L__2304:
___L__2288:
   jmp ___L__2264
___L__2263:
___L__2264:
## eval.l 1170
   movl $1,%eax
   movl %eax,32(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1171
   leal 32(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1172
   movl _s__quote,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2306
   movl 32(%esp),%eax
   movl %eax,16(%esp)
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl _exlist,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
___L__2306:
## eval.l 1173
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _s__set,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2307
## eval.l 1174
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _k__car,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2308
   movl $1,%eax
   movl %eax,16(%esp)
   movl 36(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2308
   movl $1,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $1,%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__2309
   .data
___L__2310:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2310,%eax
   movl %eax,16(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2309:
___L__2308:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2311
   movl $1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2313
   movl __3Clong_3E,%eax
   jmp ___L__2314
___L__2313:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2314:
   jmp ___L__2312
___L__2311:
   movl __3Cundefined_3E,%eax
___L__2312:
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2307
## eval.l 1175
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _k__caar,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2315
   movl $1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2315
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2316
   .data
___L__2317:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2317,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 16(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2316:
___L__2315:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2318
   movl $1,%eax
   movl %eax,16(%esp)
   movl 36(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2320
   movl __3Clong_3E,%eax
   jmp ___L__2321
___L__2320:
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2321:
   jmp ___L__2319
___L__2318:
   movl __3Cundefined_3E,%eax
___L__2319:
   movl %eax,36(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2307
## eval.l 1176
   movl _new__buffer,%eax
   call *%eax
   movl %eax,36(%esp)
## eval.l 1177
   movl 36(%esp),%eax
   movl %eax,16(%esp)
   .data
___L__2322:
   .asciz "set-"
   .text
   movl $___L__2322,%eax
   movl %eax,24(%esp)
   movl _buffer__append__all,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1178
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2323
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2323
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 20(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2324
   .data
___L__2325:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2325,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2324:
___L__2323:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2326
   movl $1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2328
   movl __3Clong_3E,%eax
   jmp ___L__2329
___L__2328:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2329:
   jmp ___L__2327
___L__2326:
   movl __3Cundefined_3E,%eax
___L__2327:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,48(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2330
   movl __3Csymbol_3E,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2330:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _buffer__append__all,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1179
   movl 36(%esp),%eax
   movl %eax,16(%esp)
   movl _buffer__contents,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _intern,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1180
   movl $1,%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _k__concat,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
___L__2307:
## eval.l 1181
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,80(%esp)
## eval.l 1182
   leal 32(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1183
   leal 28(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__2255
___L__2254:
## eval.l 1184
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2333
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2333
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2334
   .data
___L__2335:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2335,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2334:
___L__2333:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2336
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2338
   movl __3Clong_3E,%eax
   jmp ___L__2339
___L__2338:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2339:
   jmp ___L__2337
___L__2336:
   movl __3Cundefined_3E,%eax
___L__2337:
   movl %eax,28(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2331
## eval.l 1185
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl _k__env__find__variable,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1186
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2341
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2341
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2342
   .data
___L__2343:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2343,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 16(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2342:
___L__2341:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2344
   movl $1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2346
   movl __3Clong_3E,%eax
   jmp ___L__2347
___L__2346:
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2347:
   jmp ___L__2345
___L__2344:
   movl __3Cundefined_3E,%eax
___L__2345:
   movl %eax,28(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2340
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2348
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2348
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2349
   .data
___L__2350:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2350,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2349:
___L__2348:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2351
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2353
   movl __3Clong_3E,%eax
   jmp ___L__2354
___L__2353:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2354:
   jmp ___L__2352
___L__2351:
   movl __3Cundefined_3E,%eax
___L__2352:
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2355
   movl __3Cvariable_3E,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2355:
   movl $1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
___L__2340:
## eval.l 1187
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2357
   movl $1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2357
   movl $1,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $1,%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__2358
   .data
___L__2359:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2359,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2358:
___L__2357:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2360
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2362
   movl __3Clong_3E,%eax
   jmp ___L__2363
___L__2362:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2363:
   jmp ___L__2361
___L__2360:
   movl __3Cundefined_3E,%eax
___L__2361:
   movl %eax,28(%esp)
   movl __3Cform_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2356
## eval.l 1188
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2364
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2364
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,16(%esp)
   movl 20(%esp),%eax
   subl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2365
   .data
___L__2366:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2366,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2365:
___L__2364:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2367
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2369
   movl __3Clong_3E,%eax
   jmp ___L__2370
___L__2369:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2370:
   jmp ___L__2368
___L__2367:
   movl __3Cundefined_3E,%eax
___L__2368:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cform_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2371
   movl __3Cform_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2371:
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 1189
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2372
## eval.l 1190
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1191
   leal 16(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__push__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1192
   movl 84(%esp),%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1193
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl _k__apply,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1194
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 84(%esp),%eax
   movl %eax,20(%esp)
   movl _k__expand,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,80(%esp)
   movl %eax,20(%esp)
## eval.l 1191
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
___L__2372:
___L__2356:
   jmp ___L__2332
___L__2331:
## eval.l 1195
   movl _expanders,%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2373
   movl $1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2373
   movl $1,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $1,%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__2374
   .data
___L__2375:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2375,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2374:
___L__2373:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2376
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2378
   movl __3Clong_3E,%eax
   jmp ___L__2379
___L__2378:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2379:
   jmp ___L__2377
___L__2376:
   movl __3Cundefined_3E,%eax
___L__2377:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2380
   movl __3Cvariable_3E,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2380:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2381
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2381
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2382
   .data
___L__2383:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2383,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 16(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2382:
___L__2381:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2384
   movl $1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2386
   movl __3Clong_3E,%eax
   jmp ___L__2387
___L__2386:
   movl $-1,%eax
   movl %eax,16(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2387:
   jmp ___L__2385
___L__2384:
   movl __3Cundefined_3E,%eax
___L__2385:
   movl %eax,28(%esp)
   movl _k__array__at,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1196
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2388
## eval.l 1197
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,16(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1198
   leal 16(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1199
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _k__apply,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,80(%esp)
   movl %eax,20(%esp)
## eval.l 1198
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
___L__2388:
___L__2332:
___L__2255:
   movl 80(%esp),%eax
___L__2305:
   addl $72,%esp
   leave
   ret
## defunc exlist
   .text
___L__2389:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1203
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2392
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2392
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2393
   .data
___L__2394:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2394,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2393:
___L__2392:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2395
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2397
   movl __3Clong_3E,%eax
   jmp ___L__2398
___L__2397:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2398:
   jmp ___L__2396
___L__2395:
   movl __3Cundefined_3E,%eax
___L__2396:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2390
## eval.l 1204
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl _k__expand,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 1205
   leal 28(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1206
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _exlist,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1207
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1208
   movl 28(%esp),%eax
   movl %eax,16(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1207
   leal 24(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__pop__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   movl %eax,24(%esp)
## eval.l 1205
   leal 28(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   jmp ___L__2391
___L__2390:
## eval.l 1209
   movl 48(%esp),%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _k__expand,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2391:
   addl $40,%esp
   leave
   ret
## defunc k_apply
   .text
___L__2399:
## frame 32 32 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
   movl $0,%eax
## eval.l 1139
   movl 80(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2400
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2400
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2401
   .data
___L__2402:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2402,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2401:
___L__2400:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2403
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2405
   movl __3Clong_3E,%eax
   jmp ___L__2406
___L__2405:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2406:
   jmp ___L__2404
___L__2403:
   movl __3Cundefined_3E,%eax
___L__2404:
   movl %eax,32(%esp)
## eval.l 1140
## eval.l 1141
   movl __3Cexpr_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2407
   movl 80(%esp),%eax
   movl %eax,44(%esp)
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl 88(%esp),%eax
   movl %eax,36(%esp)
   movl _k__apply__expr,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__2408
___L__2407:
## eval.l 1140
## eval.l 1142
   movl __3Cfixed_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2409
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2411
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2411
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__2412
   .data
___L__2413:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2413,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2412:
___L__2411:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2414
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2416
   movl __3Clong_3E,%eax
   jmp ___L__2417
___L__2416:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2417:
   jmp ___L__2415
___L__2414:
   movl __3Cundefined_3E,%eax
___L__2415:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cfixed_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2418
   movl __3Cfixed_3E,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2418:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl 88(%esp),%eax
   movl %eax,48(%esp)
   movl _k__apply,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__2410
___L__2409:
## eval.l 1140
## eval.l 1143
   movl __3Csubr_3E,%eax
   movl %eax,48(%esp)
   movl 32(%esp),%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2419
   movl 84(%esp),%eax
   movl %eax,48(%esp)
   movl 88(%esp),%eax
   movl %eax,40(%esp)
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2421
   movl $1,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2421
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   subl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__2422
   .data
___L__2423:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2423,%eax
   movl %eax,44(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl $-1,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 60(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,60(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   movl 56(%esp),%ecx
   movl %ecx,12(%esp)
   movl 60(%esp),%ecx
   movl %ecx,16(%esp)
   call *%eax
___L__2422:
___L__2421:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2424
   movl $1,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
   andl 60(%esp),%eax
   cmpl $0,%eax
   je ___L__2426
   movl __3Clong_3E,%eax
   jmp ___L__2427
___L__2426:
   movl $-1,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 60(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2427:
   jmp ___L__2425
___L__2424:
   movl __3Cundefined_3E,%eax
___L__2425:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,60(%esp)
   movl __3Csubr_3E,%eax
   cmpl 60(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2428
   movl __3Csubr_3E,%eax
   movl %eax,60(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl _type__check__fail,%eax
   movl 60(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2428:
   movl $0,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2420
___L__2419:
## eval.l 1144
   movl _applicators,%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2429
   movl $1,%eax
   movl %eax,36(%esp)
   movl 48(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2429
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 48(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2430
   .data
___L__2431:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2431,%eax
   movl %eax,36(%esp)
   movl 48(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2430:
___L__2429:
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2432
   movl $1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__2434
   movl __3Clong_3E,%eax
   jmp ___L__2435
___L__2434:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2435:
   jmp ___L__2433
___L__2432:
   movl __3Cundefined_3E,%eax
___L__2433:
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   movl %eax,56(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2436
   movl __3Cvariable_3E,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2436:
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl 80(%esp),%eax
   movl %eax,48(%esp)
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2437
   movl $1,%eax
   movl %eax,52(%esp)
   movl 48(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2437
   movl $1,%eax
   movl %eax,52(%esp)
   movl $16,%eax
   movl %eax,56(%esp)
   movl 48(%esp),%eax
   subl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl $1,%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__2438
   .data
___L__2439:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2439,%eax
   movl %eax,52(%esp)
   movl 48(%esp),%eax
   movl %eax,56(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2438:
___L__2437:
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2440
   movl $1,%eax
   movl %eax,36(%esp)
   movl 48(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2442
   movl __3Clong_3E,%eax
   jmp ___L__2443
___L__2442:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2443:
   jmp ___L__2441
___L__2440:
   movl __3Cundefined_3E,%eax
___L__2441:
   movl %eax,48(%esp)
   movl _k__array__at,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,48(%esp)
## eval.l 1145
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2444
## eval.l 1146
   movl 84(%esp),%eax
   movl %eax,40(%esp)
## eval.l 1147
   leal 40(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1148
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,40(%esp)
## eval.l 1149
   movl 48(%esp),%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl 88(%esp),%eax
   movl %eax,52(%esp)
   movl _k__apply,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,52(%esp)
## eval.l 1147
   leal 40(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__pop__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 52(%esp),%eax
   jmp ___L__2445
___L__2444:
## eval.l 1150
   .data
___L__2446:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__2446,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2447:
   .asciz "cannot apply: "
   .text
   movl $___L__2447,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 80(%esp),%eax
   movl %eax,40(%esp)
   movl _k__print,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2448:
   .asciz "\012"
   .text
   movl $___L__2448,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__2445:
___L__2420:
___L__2410:
___L__2408:
   addl $72,%esp
   leave
   ret
## defunc counter
## defunc k_apply_expr
   .text
___L__2449:
## frame 16 44 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1110
   movl _opt__verbose,%eax
   movl %eax,16(%esp)
   movl $2,%eax
   cmpl 16(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2450
   .data
___L__2451:
   .asciz "  A  "
   .text
   movl $___L__2451,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl _k__dump,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2452:
   .asciz " "
   .text
   movl $___L__2452,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 84(%esp),%eax
   movl %eax,16(%esp)
   movl _k__dump,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2453:
   .asciz " "
   .text
   movl $___L__2453,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 88(%esp),%eax
   movl %eax,16(%esp)
   movl _k__dumpln,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _stdout,%eax
   movl %eax,16(%esp)
   movl _fflush_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2450:
## eval.l 1111
   movl 84(%esp),%eax
   movl %eax,16(%esp)
## eval.l 1112
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2454
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2454
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2455
   .data
___L__2456:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2456,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2455:
___L__2454:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2457
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2459
   movl __3Clong_3E,%eax
   jmp ___L__2460
___L__2459:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2460:
   jmp ___L__2458
___L__2457:
   movl __3Cundefined_3E,%eax
___L__2458:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cexpr_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2461
   movl __3Cexpr_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2461:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1111
## eval.l 1113
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _k__car,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1111
## eval.l 1114
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__cadr,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1115
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2462
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2462
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2463
   .data
___L__2464:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2464,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2463:
___L__2462:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2465
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2467
   movl __3Clong_3E,%eax
   jmp ___L__2468
___L__2467:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2468:
   jmp ___L__2466
___L__2465:
   movl __3Cundefined_3E,%eax
___L__2466:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cexpr_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2469
   movl __3Cexpr_3E,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2469:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 88(%esp),%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl _new_2D_3Ccontext_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,88(%esp)
## eval.l 1116
   movl 88(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2470
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2470
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2471
   .data
___L__2472:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2472,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2471:
___L__2470:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2473
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2475
   movl __3Clong_3E,%eax
   jmp ___L__2476
___L__2475:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2476:
   jmp ___L__2474
___L__2473:
   movl __3Cundefined_3E,%eax
___L__2474:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2477
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2477:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
## eval.l 1117
   leal 20(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 88(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1118
   jmp ___L__2479
___L__2478:
## eval.l 1119
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2481
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2481
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__2482
   .data
___L__2483:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2483,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2482:
___L__2481:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2484
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2486
   movl __3Clong_3E,%eax
   jmp ___L__2487
___L__2486:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2487:
   jmp ___L__2485
___L__2484:
   movl __3Cundefined_3E,%eax
___L__2485:
   movl %eax,28(%esp)
   movl __3Cpair_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2480
   .data
___L__2488:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__2488,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2489:
   .asciz "too few arguments: ("
   .text
   movl $___L__2489,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl _k__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2490:
   .asciz " "
   .text
   movl $___L__2490,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _k__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2491:
   .asciz ")"
   .text
   movl $___L__2491,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2492:
   .asciz "\012"
   .text
   movl $___L__2492,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__2480:
## eval.l 1120
   movl 44(%esp),%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2493
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2493
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__2494
   .data
___L__2495:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2495,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2494:
___L__2493:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2496
   movl $1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__2498
   movl __3Clong_3E,%eax
   jmp ___L__2499
___L__2498:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2499:
   jmp ___L__2497
___L__2496:
   movl __3Cundefined_3E,%eax
___L__2497:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2500
   movl __3Cvariable_3E,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2500:
   movl $3,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2501
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2501
   movl $1,%eax
   movl %eax,52(%esp)
   movl $16,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   subl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl $1,%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   jne ___L__2502
   .data
___L__2503:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2503,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2502:
___L__2501:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2504
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2506
   movl __3Clong_3E,%eax
   jmp ___L__2507
___L__2506:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2507:
   jmp ___L__2505
___L__2504:
   movl __3Cundefined_3E,%eax
___L__2505:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Clong_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2508
   movl __3Clong_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,56(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2508:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _k__set__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1121
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1122
   movl $1,%eax
   movl %eax,40(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
___L__2479:
## eval.l 1118
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2509
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2509
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2510
   .data
___L__2511:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2511,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2510:
___L__2509:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2512
   movl $1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__2514
   movl __3Clong_3E,%eax
   jmp ___L__2515
___L__2514:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2515:
   jmp ___L__2513
___L__2512:
   movl __3Cundefined_3E,%eax
___L__2513:
   movl %eax,40(%esp)
   movl __3Cpair_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2478
## eval.l 1123
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2517
   movl $1,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2517
   movl $1,%eax
   movl %eax,56(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl $1,%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   jne ___L__2518
   .data
___L__2519:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2519,%eax
   movl %eax,56(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2518:
___L__2517:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2520
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2522
   movl __3Clong_3E,%eax
   jmp ___L__2523
___L__2522:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2523:
   jmp ___L__2521
___L__2520:
   movl __3Cundefined_3E,%eax
___L__2521:
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2516
## eval.l 1124
## eval.l 1125
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2524
   movl $1,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2524
   movl $1,%eax
   movl %eax,56(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl $1,%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   jne ___L__2525
   .data
___L__2526:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2526,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2525:
___L__2524:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2527
   movl $1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2529
   movl __3Clong_3E,%eax
   jmp ___L__2530
___L__2529:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2530:
   jmp ___L__2528
___L__2527:
   movl __3Cundefined_3E,%eax
___L__2528:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2531
   movl __3Cvariable_3E,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2531:
   movl $3,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2532
   movl $1,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2532
   movl $1,%eax
   movl %eax,48(%esp)
   movl $16,%eax
   movl %eax,52(%esp)
   movl 28(%esp),%eax
   subl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl $1,%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   jne ___L__2533
   .data
___L__2534:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2534,%eax
   movl %eax,48(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2533:
___L__2532:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2535
   movl $1,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__2537
   movl __3Clong_3E,%eax
   jmp ___L__2538
___L__2537:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2538:
   jmp ___L__2536
___L__2535:
   movl __3Cundefined_3E,%eax
___L__2536:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,56(%esp)
   movl __3Clong_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2539
   movl __3Clong_3E,%eax
   movl %eax,56(%esp)
   movl 28(%esp),%eax
   movl %eax,52(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 52(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2539:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _k__set__array__at,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1126
   movl $0,%eax
   movl %eax,16(%esp)
___L__2516:
## eval.l 1127
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2540
   .data
___L__2541:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__2541,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2542:
   .asciz "too many arguments: ("
   .text
   movl $___L__2542,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl _k__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2543:
   .asciz " "
   .text
   movl $___L__2543,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _k__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2544:
   .asciz ")"
   .text
   movl $___L__2544,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2545:
   .asciz "\012"
   .text
   movl $___L__2545,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
___L__2540:
## eval.l 1128
   movl $1,%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
## eval.l 1129
   jmp ___L__2547
___L__2546:
## eval.l 1130
   movl $0,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 88(%esp),%eax
   movl %eax,36(%esp)
   movl _k__eval,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1131
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
___L__2547:
## eval.l 1129
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2548
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2548
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2549
   .data
___L__2550:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2550,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2549:
___L__2548:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2551
   movl $1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2553
   movl __3Clong_3E,%eax
   jmp ___L__2554
___L__2553:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2554:
   jmp ___L__2552
___L__2551:
   movl __3Cundefined_3E,%eax
___L__2552:
   movl %eax,36(%esp)
   movl __3Cpair_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2546
## eval.l 1132
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2556
   movl $1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2556
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2557
   .data
___L__2558:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2558,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,56(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 56(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2557:
___L__2556:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2559
   movl $1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   andl 56(%esp),%eax
   cmpl $0,%eax
   je ___L__2561
   movl __3Clong_3E,%eax
   jmp ___L__2562
___L__2561:
   movl $-1,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 56(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2562:
   jmp ___L__2560
___L__2559:
   movl __3Cundefined_3E,%eax
___L__2560:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl __3Cenv_3E,%eax
   cmpl 56(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2563
   movl __3Cenv_3E,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 56(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2563:
   movl $4,%eax
   movl %eax,52(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl $0,%eax
   je ___L__2555
   movl 88(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2564
   movl $1,%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2564
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,56(%esp)
   movl 52(%esp),%eax
   subl 56(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2565
   .data
___L__2566:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2566,%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2565:
___L__2564:
   movl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2567
   movl $1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2569
   movl __3Clong_3E,%eax
   jmp ___L__2570
___L__2569:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2570:
   jmp ___L__2568
___L__2567:
   movl __3Cundefined_3E,%eax
___L__2568:
   movl %eax,52(%esp)
   movl 52(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2571
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 52(%esp),%eax
   movl %eax,56(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 56(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2571:
   movl $0,%eax
   movl %eax,52(%esp)
   movl $3,%eax
   movl %eax,56(%esp)
   movl 36(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 56(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 52(%esp),%eax
   movl %eax,(%ecx)
___L__2555:
   movl 16(%esp),%eax
   movl %eax,36(%esp)
## eval.l 1117
   leal 88(%esp),%eax
   movl %eax,52(%esp)
   movl _gc__pop__root,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 20(%esp),%eax
   movl %eax,52(%esp)
   movl _gc__pop__root,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%eax
   addl $72,%esp
   leave
   ret
## defunc k_eval
   .text
___L__2572:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1293
   movl _opt__verbose,%eax
   movl %eax,16(%esp)
   movl $2,%eax
   cmpl 16(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2573
   .data
___L__2574:
   .asciz "  E  "
   .text
   movl $___L__2574,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__dump,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2575:
   .asciz " "
   .text
   movl $___L__2575,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl _k__dumpln,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _stdout,%eax
   movl %eax,16(%esp)
   movl _fflush_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2573:
## eval.l 1294
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2576
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2576
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2577
   .data
___L__2578:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2578,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2577:
___L__2576:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__2579
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2581
   movl __3Clong_3E,%eax
   jmp ___L__2582
___L__2581:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2582:
   jmp ___L__2580
___L__2579:
   movl __3Cundefined_3E,%eax
___L__2580:
   movl %eax,16(%esp)
## eval.l 1295
## eval.l 1296
   movl __3Cundefined_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2583
   movl 64(%esp),%eax
   jmp ___L__2584
___L__2583:
## eval.l 1295
## eval.l 1297
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2585
   movl 64(%esp),%eax
   jmp ___L__2586
___L__2585:
## eval.l 1295
## eval.l 1298
   movl __3Cstring_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2587
   movl 64(%esp),%eax
   jmp ___L__2588
___L__2587:
## eval.l 1295
## eval.l 1299
   movl __3Cvariable_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2589
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _is__global,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2591
## eval.l 1300
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2593
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2593
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2594
   .data
___L__2595:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2595,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2594:
___L__2593:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2596
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2598
   movl __3Clong_3E,%eax
   jmp ___L__2599
___L__2598:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2599:
   jmp ___L__2597
___L__2596:
   movl __3Cundefined_3E,%eax
___L__2597:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2600
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2600:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   jmp ___L__2592
___L__2591:
## eval.l 1301
## eval.l 1302
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2601
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2601
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__2602
   .data
___L__2603:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2603,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2602:
___L__2601:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2604
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2606
   movl __3Clong_3E,%eax
   jmp ___L__2607
___L__2606:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2607:
   jmp ___L__2605
___L__2604:
   movl __3Cundefined_3E,%eax
___L__2605:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2608
   movl __3Cvariable_3E,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2608:
   movl $2,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2609
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2609
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2610
   .data
___L__2611:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2611,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2610:
___L__2609:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2612
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2614
   movl __3Clong_3E,%eax
   jmp ___L__2615
___L__2614:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2615:
   jmp ___L__2613
___L__2612:
   movl __3Cundefined_3E,%eax
___L__2613:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cenv_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2616
   movl __3Cenv_3E,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2616:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2617
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2617
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2618
   .data
___L__2619:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2619,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2618:
___L__2617:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2620
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2622
   movl __3Clong_3E,%eax
   jmp ___L__2623
___L__2622:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2623:
   jmp ___L__2621
___L__2620:
   movl __3Cundefined_3E,%eax
___L__2621:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2624
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2624:
   movl $0,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 1301
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2625
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2625
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2626
   .data
___L__2627:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2627,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2626:
___L__2625:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2628
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2630
   movl __3Clong_3E,%eax
   jmp ___L__2631
___L__2630:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2631:
   jmp ___L__2629
___L__2628:
   movl __3Cundefined_3E,%eax
___L__2629:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2632
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2632:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2633
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2633
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2634
   .data
___L__2635:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2635,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2634:
___L__2633:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2636
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2638
   movl __3Clong_3E,%eax
   jmp ___L__2639
___L__2638:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2639:
   jmp ___L__2637
___L__2636:
   movl __3Cundefined_3E,%eax
___L__2637:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2640
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2640:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2641
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2641
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2642
   .data
___L__2643:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2643,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2642:
___L__2641:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2644
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2646
   movl __3Clong_3E,%eax
   jmp ___L__2647
___L__2646:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2647:
   jmp ___L__2645
___L__2644:
   movl __3Cundefined_3E,%eax
___L__2645:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl __3Clong_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2648
   movl __3Clong_3E,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2648:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   subl 28(%esp),%eax
   movl %eax,28(%esp)
## eval.l 1303
   jmp ___L__2650
___L__2649:
## eval.l 1304
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2651
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2651
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2652
   .data
___L__2653:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2653,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2652:
___L__2651:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2654
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2656
   movl __3Clong_3E,%eax
   jmp ___L__2657
___L__2656:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2657:
   jmp ___L__2655
___L__2654:
   movl __3Cundefined_3E,%eax
___L__2655:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2658
   movl __3Ccontext_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2658:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,68(%esp)
## eval.l 1305
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
   movl %eax,28(%esp)
___L__2650:
## eval.l 1303
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   cmpl 24(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2649
## eval.l 1306
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2659
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2659
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2660
   .data
___L__2661:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2661,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2660:
___L__2659:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2662
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2664
   movl __3Clong_3E,%eax
   jmp ___L__2665
___L__2664:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2665:
   jmp ___L__2663
___L__2662:
   movl __3Cundefined_3E,%eax
___L__2663:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2666
   movl __3Ccontext_3E,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2666:
   movl $2,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2667
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2667
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 40(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2668
   .data
___L__2669:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2669,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2668:
___L__2667:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2670
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2672
   movl __3Clong_3E,%eax
   jmp ___L__2673
___L__2672:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2673:
   jmp ___L__2671
___L__2670:
   movl __3Cundefined_3E,%eax
___L__2671:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2674
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2674:
   movl $3,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2675
   movl $1,%eax
   movl %eax,20(%esp)
   movl 40(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2675
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2676
   .data
___L__2677:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2677,%eax
   movl %eax,20(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2676:
___L__2675:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2678
   movl $1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2680
   movl __3Clong_3E,%eax
   jmp ___L__2681
___L__2680:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2681:
   jmp ___L__2679
___L__2678:
   movl __3Cundefined_3E,%eax
___L__2679:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,36(%esp)
   movl __3Clong_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2682
   movl __3Clong_3E,%eax
   movl %eax,36(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2682:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _k__array__at,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2592:
   jmp ___L__2590
___L__2589:
## eval.l 1295
## eval.l 1307
   movl __3Cpair_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2683
   movl $0,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__eval,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1308
   leal 32(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1309
   movl _trace__stack,%eax
   movl %eax,28(%esp)
   movl _trace__depth,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,40(%esp)
   movl _k__set__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1310
   movl $1,%eax
   movl %eax,40(%esp)
   movl _trace__depth,%eax
   addl 40(%esp),%eax
   movl %eax,_trace__depth
## eval.l 1311
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2687
   movl $1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2687
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 40(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2688
   .data
___L__2689:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2689,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2688:
___L__2687:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2690
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2692
   movl __3Clong_3E,%eax
   jmp ___L__2693
___L__2692:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2693:
   jmp ___L__2691
___L__2690:
   movl __3Cundefined_3E,%eax
___L__2691:
   movl %eax,40(%esp)
   movl __3Cfixed_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2685
## eval.l 1312
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2694
   movl $1,%eax
   movl %eax,28(%esp)
   movl 44(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2694
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2695
   .data
___L__2696:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2696,%eax
   movl %eax,28(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2695:
___L__2694:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2697
   movl $1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2699
   movl __3Clong_3E,%eax
   jmp ___L__2700
___L__2699:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2700:
   jmp ___L__2698
___L__2697:
   movl __3Cundefined_3E,%eax
___L__2698:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cfixed_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2701
   movl __3Cfixed_3E,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2701:
   movl $0,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _k__apply,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   jmp ___L__2686
___L__2685:
## eval.l 1313
   movl $1,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   movl %eax,44(%esp)
   movl _evlist,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,44(%esp)
## eval.l 1314
   leal 44(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1315
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl 68(%esp),%eax
   movl %eax,36(%esp)
   movl _k__apply,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1314
   leal 44(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%eax
___L__2686:
   movl %eax,32(%esp)
## eval.l 1316
   movl $1,%eax
   movl %eax,44(%esp)
   movl _trace__depth,%eax
   subl 44(%esp),%eax
   movl %eax,_trace__depth
   movl 32(%esp),%eax
   movl %eax,44(%esp)
## eval.l 1308
   leal 32(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__pop__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 44(%esp),%eax
   jmp ___L__2684
___L__2683:
## eval.l 1295
## eval.l 1318
   movl __3Csymbol_3E,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2702
   .data
___L__2704:
   .asciz "\012eval.k: error: "
   .text
   movl $___L__2704,%eax
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2705:
   .asciz "symbol in eval?"
   .text
   movl $___L__2705,%eax
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   .data
___L__2706:
   .asciz "\012"
   .text
   movl $___L__2706,%eax
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
   jmp ___L__2703
___L__2702:
## eval.l 1319
   movl _evaluators,%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2707
   movl $1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2707
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2708
   .data
___L__2709:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2709,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2708:
___L__2707:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2710
   movl $1,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2712
   movl __3Clong_3E,%eax
   jmp ___L__2713
___L__2712:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2713:
   jmp ___L__2711
___L__2710:
   movl __3Cundefined_3E,%eax
___L__2711:
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2714
   movl __3Cvariable_3E,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2714:
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 64(%esp),%eax
   movl %eax,44(%esp)
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2715
   movl $1,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2715
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2716
   .data
___L__2717:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2717,%eax
   movl %eax,40(%esp)
   movl 44(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2716:
___L__2715:
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2718
   movl $1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2720
   movl __3Clong_3E,%eax
   jmp ___L__2721
___L__2720:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2721:
   jmp ___L__2719
___L__2718:
   movl __3Cundefined_3E,%eax
___L__2719:
   movl %eax,44(%esp)
   movl _k__array__at,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,44(%esp)
## eval.l 1320
   movl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2722
## eval.l 1321
   movl 64(%esp),%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1322
   leal 36(%esp),%eax
   movl %eax,32(%esp)
   movl _gc__push__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1323
   movl _trace__stack,%eax
   movl %eax,32(%esp)
   movl _trace__depth,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,40(%esp)
   movl _k__set__array__at,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 1324
   movl $1,%eax
   movl %eax,40(%esp)
   movl _trace__depth,%eax
   addl 40(%esp),%eax
   movl %eax,_trace__depth
## eval.l 1325
   movl 44(%esp),%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__apply,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,64(%esp)
## eval.l 1326
   movl $1,%eax
   movl %eax,32(%esp)
   movl _trace__depth,%eax
   subl 32(%esp),%eax
   movl %eax,_trace__depth
   movl %eax,32(%esp)
## eval.l 1322
   leal 36(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
___L__2722:
   movl 64(%esp),%eax
___L__2703:
___L__2684:
___L__2590:
___L__2588:
___L__2586:
___L__2584:
   addl $56,%esp
   leave
   ret
## defunc k_env_define
   .text
___L__2723:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1090
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2724
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2724
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2725
   .data
___L__2726:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2726,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2725:
___L__2724:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2727
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2729
   movl __3Clong_3E,%eax
   jmp ___L__2730
___L__2729:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2730:
   jmp ___L__2728
___L__2727:
   movl __3Cundefined_3E,%eax
___L__2728:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cenv_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2731
   movl __3Cenv_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2731:
   movl $3,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1091
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _k__array__length,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1092
   jmp ___L__2733
___L__2732:
## eval.l 1093
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _k__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1094
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2736
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2736
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2737
   .data
___L__2738:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2738,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2737:
___L__2736:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2739
   movl $1,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__2741
   movl __3Clong_3E,%eax
   jmp ___L__2742
___L__2741:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2742:
   jmp ___L__2740
___L__2739:
   movl __3Cundefined_3E,%eax
___L__2740:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2743
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2743:
   movl $0,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 84(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2734
## eval.l 1095
## eval.l 1096
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2744
   movl $1,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2744
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__2745
   .data
___L__2746:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2746,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2745:
___L__2744:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2747
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2749
   movl __3Clong_3E,%eax
   jmp ___L__2750
___L__2749:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2750:
   jmp ___L__2748
___L__2747:
   movl __3Cundefined_3E,%eax
___L__2748:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2751
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2751:
   movl 88(%esp),%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1097
   movl 32(%esp),%eax
   jmp ___L__2752
   jmp ___L__2735
___L__2734:
___L__2735:
___L__2733:
## eval.l 1092
   movl $0,%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
   movl %eax,20(%esp)
   cmpl 32(%esp),%eax
   setge %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2732
## eval.l 1098
   movl 80(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2753
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2753
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2754
   .data
___L__2755:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2755,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2754:
___L__2753:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2756
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2758
   movl __3Clong_3E,%eax
   jmp ___L__2759
___L__2758:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2759:
   jmp ___L__2757
___L__2756:
   movl __3Cundefined_3E,%eax
___L__2757:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2760
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2760:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2761
   movl $1,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2761
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__2762
   .data
___L__2763:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2763,%eax
   movl %eax,44(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2762:
___L__2761:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__2764
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2766
   movl __3Clong_3E,%eax
   jmp ___L__2767
___L__2766:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2767:
   jmp ___L__2765
___L__2764:
   movl __3Cundefined_3E,%eax
___L__2765:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2768
   movl __3Clong_3E,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2768:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1099
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl 88(%esp),%eax
   movl %eax,36(%esp)
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _new_2D_3Cvariable_3E,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   movl 44(%esp),%ecx
   movl %ecx,12(%esp)
   call *%eax
   movl %eax,44(%esp)
## eval.l 1100
   leal 44(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__push__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1101
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2769
   movl $1,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2769
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2770
   .data
___L__2771:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2771,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2770:
___L__2769:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2772
   movl $1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2774
   movl __3Clong_3E,%eax
   jmp ___L__2775
___L__2774:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2775:
   jmp ___L__2773
___L__2772:
   movl __3Cundefined_3E,%eax
___L__2773:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cenv_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2776
   movl __3Cenv_3E,%eax
   movl %eax,48(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2776:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   addl 36(%esp),%eax
   movl %eax,36(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,36(%esp)
   movl $2,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 1102
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 44(%esp),%eax
   movl %eax,36(%esp)
   movl _k__array__append,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 1100
   leal 44(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%eax
___L__2752:
   addl $72,%esp
   leave
   ret
## defunc k_env_lookup
   .text
___L__2777:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1084
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _k__env__find__variable,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1085
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2778
## eval.l 1086
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2780
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2780
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2781
   .data
___L__2782:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2782,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2781:
___L__2780:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__2783
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2785
   movl __3Clong_3E,%eax
   jmp ___L__2786
___L__2785:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2786:
   jmp ___L__2784
___L__2783:
   movl __3Cundefined_3E,%eax
___L__2784:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2787
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2787:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   jmp ___L__2779
___L__2778:
## eval.l 1087
   .data
___L__2788:
   .asciz "undefined variable: %s"
   .text
   movl $___L__2788,%eax
   movl %eax,16(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2789
   movl $1,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2789
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__2790
   .data
___L__2791:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2791,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2790:
___L__2789:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2792
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2794
   movl __3Clong_3E,%eax
   jmp ___L__2795
___L__2794:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2795:
   jmp ___L__2793
___L__2792:
   movl __3Cundefined_3E,%eax
___L__2793:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2796
   movl __3Csymbol_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2796:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2779:
   addl $56,%esp
   leave
   ret
## defunc k_env_find_variable
   .text
___L__2797:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 1073
   jmp ___L__2799
___L__2798:
## eval.l 1074
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2800
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2800
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2801
   .data
___L__2802:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2802,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2801:
___L__2800:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2803
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2805
   movl __3Clong_3E,%eax
   jmp ___L__2806
___L__2805:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2806:
   jmp ___L__2804
___L__2803:
   movl __3Cundefined_3E,%eax
___L__2804:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cenv_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2807
   movl __3Cenv_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2807:
   movl $3,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 1075
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _k__array__length,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1074
## eval.l 1076
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2808
   movl $1,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2808
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2809
   .data
___L__2810:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2810,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2809:
___L__2808:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__2811
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2813
   movl __3Clong_3E,%eax
   jmp ___L__2814
___L__2813:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2814:
   jmp ___L__2812
___L__2811:
   movl __3Cundefined_3E,%eax
___L__2812:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Carray_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2815
   movl __3Carray_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2815:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 1077
   jmp ___L__2817
___L__2816:
## eval.l 1078
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 1079
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2819
   movl $1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2819
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__2820
   .data
___L__2821:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2821,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2820:
___L__2819:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2822
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__2824
   movl __3Clong_3E,%eax
   jmp ___L__2825
___L__2824:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2825:
   jmp ___L__2823
___L__2822:
   movl __3Cundefined_3E,%eax
___L__2823:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2826
   movl __3Cvariable_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2826:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 84(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2818
## eval.l 1080
   movl 32(%esp),%eax
   jmp ___L__2827
___L__2818:
___L__2817:
## eval.l 1077
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
   movl %eax,20(%esp)
   movl %eax,32(%esp)
   movl $0,%eax
   cmpl 32(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2816
## eval.l 1081
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2828
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2828
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__2829
   .data
___L__2830:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2830,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2829:
___L__2828:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2831
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__2833
   movl __3Clong_3E,%eax
   jmp ___L__2834
___L__2833:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2834:
   jmp ___L__2832
___L__2831:
   movl __3Cundefined_3E,%eax
___L__2832:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2835
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2835:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,80(%esp)
___L__2799:
   movl 80(%esp),%eax
   cmpl $0,%eax
   jne ___L__2798
___L__2827:
   addl $72,%esp
   leave
   ret
## defunc read_quote
   .text
___L__2836:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1032
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl _k__read,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1033
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _DONE,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2837
   .data
___L__2838:
   .asciz "EOF while reading quoted literal"
   .text
   movl $___L__2838,%eax
   movl %eax,20(%esp)
   movl _fatal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2837:
## eval.l 1034
   leal 16(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__push__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1035
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1036
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
## eval.l 1034
   leal 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 20(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc read_list
   .text
___L__2839:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 1016
   movl $0,%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
## eval.l 1019
   leal 20(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 24(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 1020
   jmp ___L__2841
___L__2840:
## eval.l 1022
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1024
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,16(%esp)
___L__2841:
## eval.l 1020
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__read,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl %eax,32(%esp)
   movl _DONE,%eax
   cmpl 32(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2842
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _s__dot,%eax
   cmpl 32(%esp),%eax
   setne %al
   movzbl %al,%eax
___L__2842:
   cmpl $0,%eax
   jne ___L__2840
## eval.l 1025
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _s__dot,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2843
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _k__read,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
___L__2843:
   movl %eax,32(%esp)
## eval.l 1019
   leal 24(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__pop__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   leal 20(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__pop__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
## eval.l 1026
   movl 68(%esp),%eax
   movl %eax,32(%esp)
   movl _getc_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 1027
   movl 32(%esp),%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2844
## eval.l 1028
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   jmp ___L__2845
___L__2844:
## eval.l 1029
   .data
___L__2846:
   .asciz "missing closing '%c' delimiter while reading list"
   .text
   movl $___L__2846,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2845:
   addl $56,%esp
   leave
   ret
## defunc k_read
   .text
___L__2847:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1040
   jmp ___L__2849
___L__2848:
## eval.l 1041
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _getc_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 1042
## eval.l 1043
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _is__blank,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2850
   movl $0,%eax
   jmp ___L__2851
___L__2850:
## eval.l 1042
## eval.l 1044
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $63,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2852
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _read__char,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2853
___L__2852:
## eval.l 1042
## eval.l 1045
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $45,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2855
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _ungetc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl _is__digit10,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2857
## eval.l 1046
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _read__number,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2858
___L__2857:
## eval.l 1047
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__symbol,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2858:
   jmp ___L__2854
   jmp ___L__2856
___L__2855:
## eval.l 1042
## eval.l 1048
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $39,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2859
   movl _s__quote,%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _read__quote,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2860
___L__2859:
## eval.l 1042
## eval.l 1049
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $96,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2861
   movl _s__quasiquote,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__quote,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2862
___L__2861:
## eval.l 1042
## eval.l 1050
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $44,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2863
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 1051
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $64,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2865
## eval.l 1052
   movl _s__unquote__splicing,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,28(%esp)
   movl _read__quote,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2866
___L__2865:
## eval.l 1053
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _ungetc_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1054
   movl _s__unquote,%eax
   movl %eax,24(%esp)
   movl _read__quote,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2866:
   jmp ___L__2854
   jmp ___L__2864
___L__2863:
## eval.l 1042
## eval.l 1055
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _is__letter,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2867
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _read__symbol,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2868
___L__2867:
## eval.l 1042
## eval.l 1056
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $40,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2869
   movl $41,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__list,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2870
___L__2869:
## eval.l 1042
## eval.l 1056
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $41,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2871
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _ungetc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl _DONE,%eax
   jmp ___L__2854
   jmp ___L__2872
___L__2871:
## eval.l 1042
## eval.l 1057
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $91,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2873
   movl $93,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__list,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2874
___L__2873:
## eval.l 1042
## eval.l 1057
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $93,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2875
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _ungetc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl _DONE,%eax
   jmp ___L__2854
   jmp ___L__2876
___L__2875:
## eval.l 1042
## eval.l 1058
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $123,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2877
   movl $125,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__list,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2878
___L__2877:
## eval.l 1042
## eval.l 1058
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $125,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2879
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _ungetc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl _DONE,%eax
   jmp ___L__2854
   jmp ___L__2880
___L__2879:
## eval.l 1042
## eval.l 1059
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _is__digit10,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2881
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _read__number,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2882
___L__2881:
## eval.l 1042
## eval.l 1060
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $59,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2883
   jmp ___L__2886
___L__2885:
___L__2886:
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl %eax,20(%esp)
   movl $10,%eax
   cmpl 20(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2887
## eval.l 1061
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $13,%eax
   cmpl 20(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2887
## eval.l 1062
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _EOF,%eax
   cmpl 20(%esp),%eax
   setne %al
   movzbl %al,%eax
___L__2887:
   cmpl $0,%eax
   jne ___L__2885
   jmp ___L__2884
___L__2883:
## eval.l 1042
## eval.l 1063
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $34,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2888
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _read__string,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2854
   jmp ___L__2889
___L__2888:
## eval.l 1042
## eval.l 1064
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   cmpl 24(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2890
   movl _DONE,%eax
   jmp ___L__2854
   jmp ___L__2891
___L__2890:
## eval.l 1065
   .data
___L__2892:
   .asciz "illegal character: %c"
   .text
   movl $___L__2892,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2891:
___L__2889:
___L__2884:
___L__2882:
___L__2880:
___L__2878:
___L__2876:
___L__2874:
___L__2872:
___L__2870:
___L__2868:
___L__2864:
___L__2862:
___L__2860:
___L__2856:
___L__2853:
___L__2851:
___L__2849:
   movl $1,%eax
   cmpl $0,%eax
   jne ___L__2848
___L__2854:
   addl $40,%esp
   leave
   ret
## defunc read_string
   .text
___L__2893:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 1003
   movl _new__buffer,%eax
   call *%eax
   movl %eax,16(%esp)
## eval.l 1004
   jmp ___L__2895
___L__2894:
## eval.l 1005
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _read__char,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,48(%esp)
## eval.l 1006
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _EOF,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2896
   .data
___L__2897:
   .asciz "unterminated string literal"
   .text
   movl $___L__2897,%eax
   movl %eax,24(%esp)
   movl _fatal,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2896:
## eval.l 1007
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _buffer__append,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2895:
## eval.l 1004
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,48(%esp)
   movl %eax,20(%esp)
   movl $34,%eax
   cmpl 20(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2894
## eval.l 1008
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 1009
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _new_2D_3Cstring_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 1010
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _buffer__delete,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc read_symbol
   .text
___L__2898:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 992
   movl _new__buffer,%eax
   call *%eax
   movl %eax,16(%esp)
## eval.l 993
   jmp ___L__2900
___L__2899:
## eval.l 994
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 995
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,48(%esp)
___L__2900:
## eval.l 993
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _is__letter,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__2901
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl _is__digit10,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2901:
   cmpl $0,%eax
   jne ___L__2899
## eval.l 996
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl _ungetc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 997
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 998
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _intern,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 999
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _buffer__delete,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 24(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc read_number
   .text
___L__2902:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 977
   movl _new__buffer,%eax
   call *%eax
   movl %eax,16(%esp)
## eval.l 978
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl $45,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   movl %eax,20(%esp)
## eval.l 979
   movl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__2903
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _buffer__append,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2903:
## eval.l 980
   jmp ___L__2905
___L__2904:
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2905:
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,24(%esp)
   movl _is__digit10,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__2904
## eval.l 981
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl $120,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2906
   movl $2,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2906
## eval.l 982
## eval.l 983
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _buffer__append,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 984
   jmp ___L__2908
___L__2907:
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2908:
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,24(%esp)
   movl _is__digit16,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__2907
___L__2906:
## eval.l 985
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   movl %eax,28(%esp)
   movl _ungetc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 986
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl _buffer__append,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 987
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,32(%esp)
   movl _strtoul_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 988
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _buffer__delete,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 989
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__2909
   movl 32(%esp),%eax
   negl %eax
   jmp ___L__2910
___L__2909:
   movl 32(%esp),%eax
___L__2910:
   movl %eax,28(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc read_char
   .text
___L__2911:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 928
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl $92,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2912
## eval.l 929
## eval.l 930
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl _getc_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
## eval.l 931
## eval.l 932
   movl $97,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2914
   movl $7,%eax
   jmp ___L__2915
___L__2914:
## eval.l 931
## eval.l 933
   movl $98,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2916
   movl $8,%eax
   jmp ___L__2917
___L__2916:
## eval.l 931
## eval.l 934
   movl $102,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2918
   movl $12,%eax
   jmp ___L__2919
___L__2918:
## eval.l 931
## eval.l 935
   movl $110,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2920
   movl $10,%eax
   jmp ___L__2921
___L__2920:
## eval.l 931
## eval.l 936
   movl $114,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2922
   movl $13,%eax
   jmp ___L__2923
___L__2922:
## eval.l 931
## eval.l 937
   movl $116,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2924
   movl $9,%eax
   jmp ___L__2925
___L__2924:
## eval.l 931
## eval.l 938
   movl $118,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2926
   movl $11,%eax
   jmp ___L__2927
___L__2926:
## eval.l 931
## eval.l 939
   movl $117,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2928
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl _getc_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 940
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 941
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 942
   movl 68(%esp),%eax
   movl %eax,28(%esp)
   movl _getc_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 943
## eval.l 944
## eval.l 945
## eval.l 946
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl _digit__value,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 945
   movl $8,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,40(%esp)
   movl _digit__value,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%ecx
   shll %cl,%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
## eval.l 944
   movl $16,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,40(%esp)
   movl _digit__value,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%ecx
   shll %cl,%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
## eval.l 943
   movl $24,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl _digit__value,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 36(%esp),%ecx
   shll %cl,%eax
   addl 32(%esp),%eax
   jmp ___L__2929
___L__2928:
## eval.l 931
## eval.l 948
   movl $120,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2930
   movl $0,%eax
   movl %eax,28(%esp)
## eval.l 949
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,24(%esp)
   movl _is__hexadecimal,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2932
## eval.l 950
## eval.l 951
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _digit__value,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 952
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,24(%esp)
   movl _is__hexadecimal,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2934
## eval.l 953
## eval.l 954
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _digit__value,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   mull 20(%esp)
   addl 24(%esp),%eax
   movl %eax,28(%esp)
## eval.l 955
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _getc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   jmp ___L__2935
___L__2934:
___L__2935:
   jmp ___L__2933
___L__2932:
___L__2933:
## eval.l 956
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _ungetc_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl 28(%esp),%eax
   jmp ___L__2931
___L__2930:
## eval.l 931
## eval.l 959
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl $48,%eax
   cmpl 28(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2938
## eval.l 960
   movl $55,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   cmpl 28(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2938:
   cmpl $0,%eax
   je ___L__2936
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _digit__value,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 961
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,20(%esp)
   movl _is__octal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2939
## eval.l 962
## eval.l 963
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _digit__value,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $8,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   mull 24(%esp)
   addl 20(%esp),%eax
   movl %eax,28(%esp)
## eval.l 964
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   movl %eax,20(%esp)
   movl _is__octal,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__2941
## eval.l 965
## eval.l 966
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl _digit__value,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $8,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   mull 24(%esp)
   addl 20(%esp),%eax
   movl %eax,28(%esp)
## eval.l 967
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl _getc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,64(%esp)
   jmp ___L__2942
___L__2941:
___L__2942:
   jmp ___L__2940
___L__2939:
___L__2940:
## eval.l 968
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl _ungetc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl 28(%esp),%eax
   jmp ___L__2937
___L__2936:
## eval.l 971
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _is__alpha,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   jne ___L__2945
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl _is__digit10,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2945:
   cmpl $0,%eax
   je ___L__2943
## eval.l 972
   .data
___L__2946:
   .asciz "illegal character escape: \\%c"
   .text
   movl $___L__2946,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__2944
___L__2943:
   movl 64(%esp),%eax
___L__2944:
___L__2937:
___L__2931:
___L__2929:
___L__2927:
___L__2925:
___L__2923:
___L__2921:
___L__2919:
___L__2917:
___L__2915:
   jmp ___L__2913
___L__2912:
   movl 64(%esp),%eax
___L__2913:
   addl $56,%esp
   leave
   ret
## defunc digit_value
   .text
___L__2947:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 921
## eval.l 922
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $48,%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2950
   movl $57,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2950:
   cmpl $0,%eax
   je ___L__2948
   movl $48,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   subl 16(%esp),%eax
   jmp ___L__2949
___L__2948:
## eval.l 921
## eval.l 923
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $97,%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2953
   movl $122,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2953:
   cmpl $0,%eax
   je ___L__2951
   movl $10,%eax
   movl %eax,16(%esp)
   movl $97,%eax
   subl 16(%esp),%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   subl 16(%esp),%eax
   jmp ___L__2952
___L__2951:
## eval.l 921
## eval.l 924
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $65,%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2956
   movl $90,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   cmpl 16(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2956:
   cmpl $0,%eax
   je ___L__2954
   movl $10,%eax
   movl %eax,16(%esp)
   movl $65,%eax
   subl 16(%esp),%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   subl 16(%esp),%eax
   jmp ___L__2955
___L__2954:
## eval.l 925
   .data
___L__2957:
   .asciz "illegal digit in character escape"
   .text
   movl $___L__2957,%eax
   movl %eax,16(%esp)
   movl _fatal,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2955:
___L__2952:
___L__2949:
   addl $40,%esp
   leave
   ret
## defunc is_hexadecimal
   .text
___L__2958:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 916
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $48,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2960
   movl $57,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2960:
   cmpl $0,%eax
   jne ___L__2959
## eval.l 917
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $97,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2961
   movl $102,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2961:
   cmpl $0,%eax
   jne ___L__2959
## eval.l 918
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $65,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2962
   movl $70,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2962:
___L__2959:
   addl $24,%esp
   leave
   ret
## defunc is_octal
   .text
___L__2963:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 914
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $48,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2964
   movl $55,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2964:
   addl $24,%esp
   leave
   ret
## defunc intern
   .text
___L__2965:
## frame 16 40 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 898
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 899
   movl $1,%eax
   movl %eax,20(%esp)
   movl _symbols,%eax
   movl %eax,24(%esp)
   movl _k__array__length,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   subl 20(%esp),%eax
   movl %eax,20(%esp)
## eval.l 902
   jmp ___L__2967
___L__2966:
## eval.l 903
   movl $2,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   addl 28(%esp),%eax
   movl $0,%edx
   divl 24(%esp)
   movl %eax,24(%esp)
## eval.l 904
   movl _symbols,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _k__array__at,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 903
## eval.l 905
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2968
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2968
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__2969
   .data
___L__2970:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__2970,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,52(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 52(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__2969:
___L__2968:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__2971
   movl $1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   andl 52(%esp),%eax
   cmpl $0,%eax
   je ___L__2973
   movl __3Clong_3E,%eax
   jmp ___L__2974
___L__2973:
   movl $-1,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 52(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__2974:
   jmp ___L__2972
___L__2971:
   movl __3Cundefined_3E,%eax
___L__2972:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,52(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 52(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2975
   movl __3Csymbol_3E,%eax
   movl %eax,52(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 52(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__2975:
   movl $0,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _strcmp_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,36(%esp)
## eval.l 906
## eval.l 907
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   cmpl 28(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2976
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
   movl %eax,20(%esp)
   jmp ___L__2977
___L__2976:
## eval.l 906
## eval.l 908
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
   cmpl 28(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2978
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   addl 28(%esp),%eax
   movl %eax,16(%esp)
   jmp ___L__2979
___L__2978:
## eval.l 909
   movl 32(%esp),%eax
   jmp ___L__2980
___L__2979:
___L__2977:
___L__2967:
## eval.l 902
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   cmpl 24(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2966
## eval.l 911
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _new_2D_3Csymbol_3E,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,24(%esp)
   leal 24(%esp),%eax
   movl %eax,32(%esp)
   movl _gc__push__root,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 912
   movl _symbols,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl _k__array__insert,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 911
   leal 24(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__pop__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 28(%esp),%eax
___L__2980:
   addl $72,%esp
   leave
   ret
## defunc buffer_contents
   .text
___L__2981:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 892
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _buffer__append,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 893
   movl $1,%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   subl 20(%esp),%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 16(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
## eval.l 894
   movl $0,%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl $40,%esp
   leave
   ret
## defunc buffer_append_all
   .text
___L__2982:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 885
   movl $0,%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
## eval.l 887
   jmp ___L__2984
___L__2983:
## eval.l 888
   movl 48(%esp),%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _buffer__append,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 889
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl $1,%eax
   addl 28(%esp),%eax
   movl %eax,16(%esp)
___L__2984:
## eval.l 887
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   movl 28(%esp),%ecx
   leal (%eax,%ecx),%ecx
   xorl %eax,%eax
   movb (%ecx),%al
   movl %eax,20(%esp)
   cmpl $0,%eax
   jne ___L__2983
   addl $40,%esp
   leave
   ret
## defunc buffer_append
   .text
___L__2985:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 878
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl $2,%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2986
## eval.l 879
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _buffer__grow,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__2986:
## eval.l 880
   movl $2,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 881
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 24(%esp),%ecx
   leal (%eax,%ecx),%ecx
   movl 20(%esp),%eax
   movb %al,(%ecx)
## eval.l 882
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $1,%eax
   addl 20(%esp),%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   addl $40,%esp
   leave
   ret
## defunc buffer_grow
   .text
___L__2987:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 870
   movl $1,%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 871
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $2,%eax
   mull 20(%esp)
   movl %eax,20(%esp)
   movl _malloc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 872
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _memcpy_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 873
   movl $0,%eax
   movl %eax,32(%esp)
   movl 64(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _free_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 874
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
## eval.l 875
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl $2,%eax
   mull 32(%esp)
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 64(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
   addl $56,%esp
   leave
   ret
## defunc buffer_delete
   .text
___L__2988:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 866
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl _free_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 867
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _free_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc new_buffer
   .text
___L__2989:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 859
   movl $12,%eax
   movl %eax,16(%esp)
   movl _malloc_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 860
   movl $32,%eax
   movl %eax,20(%esp)
   movl _malloc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
## eval.l 861
   movl $32,%eax
   movl %eax,20(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
## eval.l 862
   movl $0,%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc is_letter
   .text
___L__2990:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 845
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $33,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 846
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $35,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2992
   movl $38,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2992:
   cmpl $0,%eax
   jne ___L__2991
## eval.l 847
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $42,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2993
   movl $47,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2993:
   cmpl $0,%eax
   jne ___L__2991
## eval.l 848
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $58,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 849
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $60,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2994
   movl $90,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2994:
   cmpl $0,%eax
   jne ___L__2991
## eval.l 850
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $92,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 851
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $94,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 852
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $95,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 853
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $97,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2995
   movl $122,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2995:
   cmpl $0,%eax
   jne ___L__2991
## eval.l 854
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $124,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 855
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $126,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__2991
## eval.l 856
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $128,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2991:
   addl $24,%esp
   leave
   ret
## defunc is_alpha
   .text
___L__2996:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 842
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $97,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2998
   movl $122,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2998:
   cmpl $0,%eax
   jne ___L__2997
## eval.l 843
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $65,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__2999
   movl $90,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__2999:
___L__2997:
   addl $24,%esp
   leave
   ret
## defunc is_digit16
   .text
___L__3000:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 838
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $48,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3002
   movl $57,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__3002:
   cmpl $0,%eax
   jne ___L__3001
## eval.l 839
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $97,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3003
   movl $102,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__3003:
   cmpl $0,%eax
   jne ___L__3001
## eval.l 840
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $65,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3004
   movl $70,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__3004:
___L__3001:
   addl $24,%esp
   leave
   ret
## defunc is_digit10
   .text
___L__3005:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 836
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $48,%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3006
   movl $57,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__3006:
   addl $24,%esp
   leave
   ret
## defunc is_blank
   .text
___L__3007:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 829
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $32,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3008
## eval.l 830
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $9,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3008
## eval.l 831
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $10,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3008
## eval.l 832
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $11,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3008
## eval.l 833
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $12,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3008
## eval.l 834
   movl 32(%esp),%eax
   movl %eax,0(%esp)
   movl $13,%eax
   cmpl 0(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__3008:
   addl $24,%esp
   leave
   ret
## defunc k_dump_stack
   .text
___L__3009:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 813
   .data
___L__3010:
   .asciz "stack: "
   .text
   movl $___L__3010,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 814
   movl _trace__depth,%eax
   movl %eax,16(%esp)
## eval.l 815
   jmp ___L__3012
___L__3011:
## eval.l 816
   .data
___L__3013:
   .asciz "%3d: "
   .text
   movl $___L__3013,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 817
   movl _trace__stack,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl _k__array__at,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl _k__dumpln,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3012:
## eval.l 815
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   subl 20(%esp),%eax
   movl %eax,16(%esp)
   movl %eax,20(%esp)
   movl $0,%eax
   cmpl 20(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3011
   addl $40,%esp
   leave
   ret
## defunc k_dumpln
   .text
___L__3014:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 809
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,20(%esp)
   movl _do__print,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   .data
___L__3015:
   .asciz "\012"
   .text
   movl $___L__3015,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_dump
   .text
___L__3016:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 808
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,20(%esp)
   movl _do__print,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_println
   .text
___L__3017:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 807
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _do__print,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   .data
___L__3018:
   .asciz "\012"
   .text
   movl $___L__3018,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_print
   .text
___L__3019:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 806
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl _do__print,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc do_print
   .text
___L__3020:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 737
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3021
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3021
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3022
   .data
___L__3023:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3023,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3022:
___L__3021:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3024
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3026
   movl __3Clong_3E,%eax
   jmp ___L__3027
___L__3026:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3027:
   jmp ___L__3025
___L__3024:
   movl __3Cundefined_3E,%eax
___L__3025:
   movl %eax,16(%esp)
## eval.l 738
## eval.l 739
   movl __3Cundefined_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3028
   .data
___L__3030:
   .asciz "nil"
   .text
   movl $___L__3030,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3029
___L__3028:
## eval.l 738
## eval.l 740
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3031
   .data
___L__3033:
   .asciz "%d"
   .text
   movl $___L__3033,%eax
   movl %eax,28(%esp)
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3034
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3034
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3035
   .data
___L__3036:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3036,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3035:
___L__3034:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3037
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3039
   movl __3Clong_3E,%eax
   jmp ___L__3040
___L__3039:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3040:
   jmp ___L__3038
___L__3037:
   movl __3Cundefined_3E,%eax
___L__3038:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3041
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3041:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3032
___L__3031:
## eval.l 738
## eval.l 741
   movl __3Cstring_3E,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3042
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3044
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3044
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3045
   .data
___L__3046:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3046,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3045:
___L__3044:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3047
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3049
   movl __3Clong_3E,%eax
   jmp ___L__3050
___L__3049:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3050:
   jmp ___L__3048
___L__3047:
   movl __3Cundefined_3E,%eax
___L__3048:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cstring_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3051
   movl __3Cstring_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3051:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 742
   movl 84(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3052
## eval.l 743
   .data
___L__3054:
   .asciz "%s"
   .text
   movl $___L__3054,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3053
___L__3052:
## eval.l 744
   movl $0,%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
## eval.l 746
   .data
___L__3055:
   .asciz "\""
   .text
   movl $___L__3055,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 747
   jmp ___L__3057
___L__3056:
## eval.l 748
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $32,%eax
   cmpl 40(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3060
   movl $126,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   cmpl 40(%esp),%eax
   setle %al
   movzbl %al,%eax
___L__3060:
   cmpl $0,%eax
   je ___L__3058
## eval.l 749
## eval.l 750
   movl $34,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3061
   .data
___L__3063:
   .asciz "\\\""
   .text
   movl $___L__3063,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3062
___L__3061:
## eval.l 749
## eval.l 751
   movl $92,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3064
   .data
___L__3066:
   .asciz "\\\\"
   .text
   movl $___L__3066,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3065
___L__3064:
## eval.l 752
   .data
___L__3067:
   .asciz "%c"
   .text
   movl $___L__3067,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3065:
___L__3062:
   jmp ___L__3059
___L__3058:
## eval.l 753
   .data
___L__3068:
   .asciz "\\%03o"
   .text
   movl $___L__3068,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3059:
## eval.l 754
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl $1,%eax
   addl 40(%esp),%eax
   movl %eax,36(%esp)
___L__3057:
## eval.l 747
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   movl 40(%esp),%ecx
   leal (%eax,%ecx),%ecx
   xorl %eax,%eax
   movb (%ecx),%al
   movl %eax,28(%esp)
   cmpl $0,%eax
   jne ___L__3056
## eval.l 755
   .data
___L__3069:
   .asciz "\""
   .text
   movl $___L__3069,%eax
   movl %eax,40(%esp)
   movl _printf_24stub,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3053:
   jmp ___L__3043
___L__3042:
## eval.l 738
## eval.l 756
   movl __3Csymbol_3E,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3070
   .data
___L__3072:
   .asciz "%s"
   .text
   movl $___L__3072,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3073
   movl $1,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3073
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__3074
   .data
___L__3075:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3075,%eax
   movl %eax,40(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3074:
___L__3073:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3076
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3078
   movl __3Clong_3E,%eax
   jmp ___L__3079
___L__3078:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3079:
   jmp ___L__3077
___L__3076:
   movl __3Cundefined_3E,%eax
___L__3077:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl __3Csymbol_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3080
   movl __3Csymbol_3E,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3080:
   movl $0,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3071
___L__3070:
## eval.l 738
## eval.l 758
   movl __3Cpair_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3081
## eval.l 759
   .data
___L__3083:
   .asciz "("
   .text
   movl $___L__3083,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 760
   jmp ___L__3085
___L__3084:
## eval.l 761
   movl $0,%eax
   movl %eax,28(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 84(%esp),%eax
   movl %eax,24(%esp)
   movl _do__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 762
   movl $1,%eax
   movl %eax,24(%esp)
   movl 80(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,80(%esp)
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3087
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3087
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3088
   .data
___L__3089:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3089,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3088:
___L__3087:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3090
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3092
   movl __3Clong_3E,%eax
   jmp ___L__3093
___L__3092:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3093:
   jmp ___L__3091
___L__3090:
   movl __3Cundefined_3E,%eax
___L__3091:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3086
   .data
___L__3094:
   .asciz " "
   .text
   movl $___L__3094,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3086:
___L__3085:
## eval.l 760
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3096
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3096
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3097
   .data
___L__3098:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3098,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3097:
___L__3096:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3099
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3101
   movl __3Clong_3E,%eax
   jmp ___L__3102
___L__3101:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3102:
   jmp ___L__3100
___L__3099:
   movl __3Cundefined_3E,%eax
___L__3100:
   movl %eax,24(%esp)
   movl __3Cpair_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3095
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _globals,%eax
   cmpl 24(%esp),%eax
   setne %al
   movzbl %al,%eax
___L__3095:
   cmpl $0,%eax
   jne ___L__3084
## eval.l 763
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl _globals,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3103
## eval.l 764
   .data
___L__3105:
   .asciz "<globals>"
   .text
   movl $___L__3105,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3104
___L__3103:
## eval.l 767
   movl 80(%esp),%eax
   cmpl $0,%eax
   je ___L__3106
## eval.l 768
## eval.l 769
   .data
___L__3108:
   .asciz " . "
   .text
   movl $___L__3108,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 770
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _do__print,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3107
___L__3106:
___L__3107:
___L__3104:
## eval.l 771
   .data
___L__3109:
   .asciz ")"
   .text
   movl $___L__3109,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3082
___L__3081:
## eval.l 738
## eval.l 773
   movl __3Carray_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3110
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl _k__array__length,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
## eval.l 774
   .data
___L__3112:
   .asciz "Array("
   .text
   movl $___L__3112,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 775
   movl $0,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   jmp ___L__3114
___L__3113:
## eval.l 776
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3115
   .data
___L__3116:
   .asciz " "
   .text
   movl $___L__3116,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3115:
## eval.l 777
   movl 80(%esp),%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _k__array__at,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl _do__print,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 775
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   addl 32(%esp),%eax
   movl %eax,24(%esp)
___L__3114:
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   cmpl 32(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3113
## eval.l 778
   .data
___L__3117:
   .asciz ")"
   .text
   movl $___L__3117,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3111
___L__3110:
## eval.l 738
## eval.l 779
   movl __3Cexpr_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3118
## eval.l 780
   .data
___L__3120:
   .asciz "Expr("
   .text
   movl $___L__3120,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 781
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3121
   movl $1,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3121
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3122
   .data
___L__3123:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3123,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3122:
___L__3121:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3124
   movl $1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3126
   movl __3Clong_3E,%eax
   jmp ___L__3127
___L__3126:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3127:
   jmp ___L__3125
___L__3124:
   movl __3Cundefined_3E,%eax
___L__3125:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cexpr_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3128
   movl __3Cexpr_3E,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3128:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _k__car,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,28(%esp)
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl _do__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 782
   .data
___L__3129:
   .asciz ")"
   .text
   movl $___L__3129,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3119
___L__3118:
## eval.l 738
## eval.l 783
   movl __3Cform_3E,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3130
## eval.l 784
   .data
___L__3132:
   .asciz "Form("
   .text
   movl $___L__3132,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 785
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3133
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3133
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3134
   .data
___L__3135:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3135,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3134:
___L__3133:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3136
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3138
   movl __3Clong_3E,%eax
   jmp ___L__3139
___L__3138:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3139:
   jmp ___L__3137
___L__3136:
   movl __3Cundefined_3E,%eax
___L__3137:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl __3Cform_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3140
   movl __3Cform_3E,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3140:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _do__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 786
   .data
___L__3141:
   .asciz ","
   .text
   movl $___L__3141,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 787
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3142
   movl $1,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3142
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 36(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3143
   .data
___L__3144:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3144,%eax
   movl %eax,20(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3143:
___L__3142:
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3145
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3147
   movl __3Clong_3E,%eax
   jmp ___L__3148
___L__3147:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3148:
   jmp ___L__3146
___L__3145:
   movl __3Cundefined_3E,%eax
___L__3146:
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cform_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3149
   movl __3Cform_3E,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3149:
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl _do__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 788
   .data
___L__3150:
   .asciz ")"
   .text
   movl $___L__3150,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3131
___L__3130:
## eval.l 738
## eval.l 789
   movl __3Cfixed_3E,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3151
## eval.l 790
   .data
___L__3153:
   .asciz "Fixed("
   .text
   movl $___L__3153,%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 791
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3154
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3154
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3155
   .data
___L__3156:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3156,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3155:
___L__3154:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3157
   movl $1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3159
   movl __3Clong_3E,%eax
   jmp ___L__3160
___L__3159:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3160:
   jmp ___L__3158
___L__3157:
   movl __3Cundefined_3E,%eax
___L__3158:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cfixed_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3161
   movl __3Cfixed_3E,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3161:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl 84(%esp),%eax
   movl %eax,28(%esp)
   movl _do__print,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 792
   .data
___L__3162:
   .asciz ")"
   .text
   movl $___L__3162,%eax
   movl %eax,28(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3152
___L__3151:
## eval.l 738
## eval.l 793
   movl __3Csubr_3E,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3163
   .data
___L__3165:
   .asciz "Subr(%s)"
   .text
   movl $___L__3165,%eax
   movl %eax,28(%esp)
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3166
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3166
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3167
   .data
___L__3168:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3168,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3167:
___L__3166:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3169
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3171
   movl __3Clong_3E,%eax
   jmp ___L__3172
___L__3171:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3172:
   jmp ___L__3170
___L__3169:
   movl __3Cundefined_3E,%eax
___L__3170:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Csubr_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3173
   movl __3Csubr_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3173:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3164
___L__3163:
## eval.l 738
## eval.l 794
   movl __3Cvariable_3E,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3174
   movl 80(%esp),%eax
   movl %eax,36(%esp)
   movl 36(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3176
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3176
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3177
   .data
___L__3178:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3178,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3177:
___L__3176:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3179
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3181
   movl __3Clong_3E,%eax
   jmp ___L__3182
___L__3181:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3182:
   jmp ___L__3180
___L__3179:
   movl __3Cundefined_3E,%eax
___L__3180:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3183
   movl __3Cvariable_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3183:
   movl $2,%eax
   movl %eax,28(%esp)
   movl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
## eval.l 795
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3184
   movl $1,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3184
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__3185
   .data
___L__3186:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3186,%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3185:
___L__3184:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3187
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3189
   movl __3Clong_3E,%eax
   jmp ___L__3190
___L__3189:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3190:
   jmp ___L__3188
___L__3187:
   movl __3Cundefined_3E,%eax
___L__3188:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3191
   movl __3Cvariable_3E,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3191:
   movl $0,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _do__print,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 796
   movl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3192
## eval.l 797
   .data
___L__3193:
   .asciz ".%d+%d"
   .text
   movl $___L__3193,%eax
   movl %eax,28(%esp)
## eval.l 798
   movl 80(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3194
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3194
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3195
   .data
___L__3196:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3196,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3195:
___L__3194:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3197
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   je ___L__3199
   movl __3Clong_3E,%eax
   jmp ___L__3200
___L__3199:
   movl $-1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3200:
   jmp ___L__3198
___L__3197:
   movl __3Cundefined_3E,%eax
___L__3198:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 44(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3201
   movl __3Cvariable_3E,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3201:
   movl $2,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3202
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3202
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__3203
   .data
___L__3204:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3204,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 20(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3203:
___L__3202:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3205
   movl $1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3207
   movl __3Clong_3E,%eax
   jmp ___L__3208
___L__3207:
   movl $-1,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3208:
   jmp ___L__3206
___L__3205:
   movl __3Cundefined_3E,%eax
___L__3206:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl __3Cenv_3E,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3209
   movl __3Cenv_3E,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3209:
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3210
   movl $1,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3210
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__3211
   .data
___L__3212:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3212,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3211:
___L__3210:
   movl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3213
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3215
   movl __3Clong_3E,%eax
   jmp ___L__3216
___L__3215:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3216:
   jmp ___L__3214
___L__3213:
   movl __3Cundefined_3E,%eax
___L__3214:
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3217
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3217:
   movl $0,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 799
   movl 80(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3218
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3218
   movl $1,%eax
   movl %eax,40(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 20(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl $1,%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   jne ___L__3219
   .data
___L__3220:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3220,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3219:
___L__3218:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3221
   movl $1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3223
   movl __3Clong_3E,%eax
   jmp ___L__3224
___L__3223:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3224:
   jmp ___L__3222
___L__3221:
   movl __3Cundefined_3E,%eax
___L__3222:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3225
   movl __3Cvariable_3E,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3225:
   movl $3,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3226
   movl $1,%eax
   movl %eax,44(%esp)
   movl 20(%esp),%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3226
   movl $1,%eax
   movl %eax,44(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 20(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 44(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,44(%esp)
   movl $1,%eax
   andl 44(%esp),%eax
   cmpl $0,%eax
   jne ___L__3227
   .data
___L__3228:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3228,%eax
   movl %eax,44(%esp)
   movl 20(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 44(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3227:
___L__3226:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3229
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3231
   movl __3Clong_3E,%eax
   jmp ___L__3232
___L__3231:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3232:
   jmp ___L__3230
___L__3229:
   movl __3Cundefined_3E,%eax
___L__3230:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,40(%esp)
   movl __3Clong_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3233
   movl __3Clong_3E,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3233:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3192:
   jmp ___L__3175
___L__3174:
## eval.l 738
## eval.l 800
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3234
## eval.l 801
   .data
___L__3236:
   .asciz "Env<%d>"
   .text
   movl $___L__3236,%eax
   movl %eax,36(%esp)
   movl 80(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3237
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3237
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3238
   .data
___L__3239:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3239,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3238:
___L__3237:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3240
   movl $1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3242
   movl __3Clong_3E,%eax
   jmp ___L__3243
___L__3242:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3243:
   jmp ___L__3241
___L__3240:
   movl __3Cundefined_3E,%eax
___L__3241:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,48(%esp)
   movl __3Cenv_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3244
   movl __3Cenv_3E,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3244:
   movl $1,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3245
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3245
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
   subl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3246
   .data
___L__3247:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3247,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,48(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3246:
___L__3245:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3248
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3250
   movl __3Clong_3E,%eax
   jmp ___L__3251
___L__3250:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3251:
   jmp ___L__3249
___L__3248:
   movl __3Cundefined_3E,%eax
___L__3249:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl __3Clong_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3252
   movl __3Clong_3E,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,48(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 48(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3252:
   movl $0,%eax
   movl %eax,24(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   jmp ___L__3235
___L__3234:
## eval.l 738
## eval.l 802
   movl __3Ccontext_3E,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3253
## eval.l 803
   .data
___L__3255:
   .asciz "Context<>"
   .text
   movl $___L__3255,%eax
   movl %eax,32(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   jmp ___L__3254
___L__3253:
## eval.l 804
   .data
___L__3256:
   .asciz "<type:%d>"
   .text
   movl $___L__3256,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _printf_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3254:
___L__3235:
___L__3175:
___L__3164:
___L__3152:
___L__3131:
___L__3119:
___L__3111:
___L__3082:
___L__3071:
___L__3043:
___L__3032:
___L__3029:
   addl $72,%esp
   leave
   ret
## defunc k_array_insert
   .text
___L__3257:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 723
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _k__array__length,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 725
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl 72(%esp),%eax
   movl %eax,24(%esp)
   movl _k__array__append,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
## eval.l 726
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl 68(%esp),%eax
   cmpl 24(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3258
## eval.l 727
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3259
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3259
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3260
   .data
___L__3261:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3261,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3260:
___L__3259:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3262
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3264
   movl __3Clong_3E,%eax
   jmp ___L__3265
___L__3264:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3265:
   jmp ___L__3263
___L__3262:
   movl __3Cundefined_3E,%eax
___L__3263:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Carray_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3266
   movl __3Carray_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3266:
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
## eval.l 728
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl $4,%eax
   mull 20(%esp)
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   addl 20(%esp),%eax
   movl %eax,20(%esp)
## eval.l 730
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $4,%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl 68(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   subl 28(%esp),%eax
   movl %eax,28(%esp)
   movl $4,%eax
   mull 28(%esp)
   movl %eax,28(%esp)
   movl _memmove_24stub,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3258:
## eval.l 731
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl 72(%esp),%eax
   movl %eax,24(%esp)
   movl _k__set__array__at,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   addl $56,%esp
   leave
   ret
## defunc k_array_append
   .text
___L__3267:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 720
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _k__array__length,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _k__set__array__at,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_set_array_at
   .text
___L__3268:
## frame 16 36 64 80
   pushl %ebp
   movl %esp,%ebp
   subl $72,%esp
## eval.l 704
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3270
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3270
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3271
   .data
___L__3272:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3272,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3271:
___L__3270:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3273
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3275
   movl __3Clong_3E,%eax
   jmp ___L__3276
___L__3275:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3276:
   jmp ___L__3274
___L__3273:
   movl __3Cundefined_3E,%eax
___L__3274:
   movl %eax,16(%esp)
   movl __3Carray_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3269
## eval.l 705
   movl 80(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3277
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3277
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3278
   .data
___L__3279:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3279,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3278:
___L__3277:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3280
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3282
   movl __3Clong_3E,%eax
   jmp ___L__3283
___L__3282:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3283:
   jmp ___L__3281
___L__3280:
   movl __3Cundefined_3E,%eax
___L__3281:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Carray_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3284
   movl __3Carray_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3284:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 706
   movl 80(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3285
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3285
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3286
   .data
___L__3287:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3287,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3286:
___L__3285:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3288
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3290
   movl __3Clong_3E,%eax
   jmp ___L__3291
___L__3290:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3291:
   jmp ___L__3289
___L__3288:
   movl __3Cundefined_3E,%eax
___L__3289:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Carray_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3292
   movl __3Carray_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3292:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3293
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3293
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3294
   .data
___L__3295:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3295,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3294:
___L__3293:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3296
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3298
   movl __3Clong_3E,%eax
   jmp ___L__3299
___L__3298:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3299:
   jmp ___L__3297
___L__3296:
   movl __3Cundefined_3E,%eax
___L__3297:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3300
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3300:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 707
   movl 84(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   cmpl 20(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3301
## eval.l 708
## eval.l 709
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 84(%esp),%eax
   cmpl 20(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3302
## eval.l 710
   movl $4,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__size,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl $0,%edx
   divl 20(%esp)
   movl %eax,20(%esp)
## eval.l 711
   jmp ___L__3304
___L__3303:
   movl $2,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   mull 36(%esp)
   movl %eax,20(%esp)
___L__3304:
   movl 84(%esp),%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   cmpl 36(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3303
## eval.l 712
   leal 80(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__push__root,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 713
   movl __3C__array_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $4,%eax
   mull 32(%esp)
   movl %eax,32(%esp)
   movl _new_2Doops,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
## eval.l 714
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $4,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   mull 40(%esp)
   movl %eax,40(%esp)
   movl _memcpy_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 715
   movl 80(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3305
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3305
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 24(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__3306
   .data
___L__3307:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3307,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3306:
___L__3305:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3308
   movl $1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3310
   movl __3Clong_3E,%eax
   jmp ___L__3311
___L__3310:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3311:
   jmp ___L__3309
___L__3308:
   movl __3Cundefined_3E,%eax
___L__3309:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,48(%esp)
   movl __3Carray_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3312
   movl __3Carray_3E,%eax
   movl %eax,48(%esp)
   movl 24(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3312:
   movl 32(%esp),%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,16(%esp)
## eval.l 716
   movl 80(%esp),%eax
   movl %eax,32(%esp)
   movl 32(%esp),%eax
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3313
   movl $1,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3313
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,44(%esp)
   movl 40(%esp),%eax
   subl 44(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3314
   .data
___L__3315:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3315,%eax
   movl %eax,24(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,48(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   movl 48(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3314:
___L__3313:
   movl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3316
   movl $1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   andl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3318
   movl __3Clong_3E,%eax
   jmp ___L__3319
___L__3318:
   movl $-1,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 48(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3319:
   jmp ___L__3317
___L__3316:
   movl __3Cundefined_3E,%eax
___L__3317:
   movl %eax,40(%esp)
   movl 40(%esp),%eax
   movl %eax,48(%esp)
   movl __3Carray_3E,%eax
   cmpl 48(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3320
   movl __3Carray_3E,%eax
   movl %eax,48(%esp)
   movl 40(%esp),%eax
   movl %eax,44(%esp)
   movl _type__check__fail,%eax
   movl 48(%esp),%ecx
   movl %ecx,0(%esp)
   movl 44(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3320:
   movl 84(%esp),%eax
   movl %eax,40(%esp)
   movl $1,%eax
   addl 40(%esp),%eax
   movl %eax,40(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,40(%esp)
   movl $0,%eax
   movl %eax,44(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,32(%esp)
## eval.l 712
   leal 80(%esp),%eax
   movl %eax,40(%esp)
   movl _gc__pop__root,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 32(%esp),%eax
___L__3302:
## eval.l 717
   movl 88(%esp),%eax
   movl %eax,20(%esp)
   movl 84(%esp),%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 32(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
___L__3301:
___L__3269:
   addl $72,%esp
   leave
   ret
## defunc k_array_at
   .text
___L__3321:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 697
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3323
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3323
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3324
   .data
___L__3325:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3325,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3324:
___L__3323:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3326
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3328
   movl __3Clong_3E,%eax
   jmp ___L__3329
___L__3328:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3329:
   jmp ___L__3327
___L__3326:
   movl __3Cundefined_3E,%eax
___L__3327:
   movl %eax,16(%esp)
   movl __3Carray_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3322
## eval.l 698
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3330
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3330
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
   subl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3331
   .data
___L__3332:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3332,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3331:
___L__3330:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3333
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3335
   movl __3Clong_3E,%eax
   jmp ___L__3336
___L__3335:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3336:
   jmp ___L__3334
___L__3333:
   movl __3Cundefined_3E,%eax
___L__3334:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Carray_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3337
   movl __3Carray_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3337:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 699
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3338
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3338
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3339
   .data
___L__3340:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3340,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3339:
___L__3338:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3341
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3343
   movl __3Clong_3E,%eax
   jmp ___L__3344
___L__3343:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3344:
   jmp ___L__3342
___L__3341:
   movl __3Cundefined_3E,%eax
___L__3342:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl __3Carray_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3345
   movl __3Carray_3E,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3345:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3346
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3346
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3347
   .data
___L__3348:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3348,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3347:
___L__3346:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3349
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3351
   movl __3Clong_3E,%eax
   jmp ___L__3352
___L__3351:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3352:
   jmp ___L__3350
___L__3349:
   movl __3Cundefined_3E,%eax
___L__3350:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3353
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3353:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 700
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl $0,%eax
   cmpl 20(%esp),%eax
   setle %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3354
   movl 28(%esp),%eax
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   cmpl 20(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3354
## eval.l 701
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3354:
___L__3322:
   addl $56,%esp
   leave
   ret
## defunc k_array_length
   .text
___L__3355:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 694
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3356
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3356
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3357
   .data
___L__3358:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3358,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3357:
___L__3356:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3359
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3361
   movl __3Clong_3E,%eax
   jmp ___L__3362
___L__3361:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3362:
   jmp ___L__3360
___L__3359:
   movl __3Cundefined_3E,%eax
___L__3360:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Carray_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3363
   movl __3Carray_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3363:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3364
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3364
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3365
   .data
___L__3366:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3366,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3365:
___L__3364:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3367
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3369
   movl __3Clong_3E,%eax
   jmp ___L__3370
___L__3369:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3370:
   jmp ___L__3368
___L__3367:
   movl __3Cundefined_3E,%eax
___L__3368:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3371
   movl __3Clong_3E,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3371:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl $56,%esp
   leave
   ret
## defunc k_concat
   .text
___L__3372:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 685
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3375
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3375
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3376
   .data
___L__3377:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3377,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3376:
___L__3375:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3378
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3380
   movl __3Clong_3E,%eax
   jmp ___L__3381
___L__3380:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3381:
   jmp ___L__3379
___L__3378:
   movl __3Cundefined_3E,%eax
___L__3379:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3373
## eval.l 686
## eval.l 687
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,28(%esp)
   movl _k__concat,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,52(%esp)
## eval.l 688
   leal 52(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__push__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 689
   movl $0,%eax
   movl %eax,28(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl _new_2D_3Cpair_3E,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 16(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 688
   leal 52(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__pop__root,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   jmp ___L__3374
___L__3373:
   movl 52(%esp),%eax
___L__3374:
   addl $40,%esp
   leave
   ret
## defunc k_caddr
   .text
___L__3382:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 682
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_cddr
   .text
___L__3383:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 681
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_cadr
   .text
___L__3384:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 680
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__cdr,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_caar
   .text
___L__3385:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 679
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl _k__car,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc k_cdr
   .text
___L__3386:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 678
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3388
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3388
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3389
   .data
___L__3390:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3390,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3389:
___L__3388:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3391
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3393
   movl __3Clong_3E,%eax
   jmp ___L__3394
___L__3393:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3394:
   jmp ___L__3392
___L__3391:
   movl __3Cundefined_3E,%eax
___L__3392:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3387
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3387:
   addl $40,%esp
   leave
   ret
## defunc k_car
   .text
___L__3395:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 677
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3397
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3397
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3398
   .data
___L__3399:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3399,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3398:
___L__3397:
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3400
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3402
   movl __3Clong_3E,%eax
   jmp ___L__3403
___L__3402:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3403:
   jmp ___L__3401
___L__3400:
   movl __3Cundefined_3E,%eax
___L__3401:
   movl %eax,16(%esp)
   movl __3Cpair_3E,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3396
   movl $0,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3396:
   addl $40,%esp
   leave
   ret
## defunc k_string_length
   .text
___L__3404:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 674
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3405
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3405
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3406
   .data
___L__3407:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3407,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3406:
___L__3405:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3408
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3410
   movl __3Clong_3E,%eax
   jmp ___L__3411
___L__3410:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3411:
   jmp ___L__3409
___L__3408:
   movl __3Cundefined_3E,%eax
___L__3409:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cstring_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3412
   movl __3Cstring_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3412:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3413
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3413
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3414
   .data
___L__3415:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3415,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3414:
___L__3413:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3416
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3418
   movl __3Clong_3E,%eax
   jmp ___L__3419
___L__3418:
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3419:
   jmp ___L__3417
___L__3416:
   movl __3Cundefined_3E,%eax
___L__3417:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl __3Clong_3E,%eax
   cmpl 24(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3420
   movl __3Clong_3E,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3420:
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl $56,%esp
   leave
   ret
## defunc is_global
   .text
___L__3421:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 667
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3422
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3422
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3423
   .data
___L__3424:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3424,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3423:
___L__3422:
   movl 20(%esp),%eax
   cmpl $0,%eax
   je ___L__3425
   movl $1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3427
   movl __3Clong_3E,%eax
   jmp ___L__3428
___L__3427:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3428:
   jmp ___L__3426
___L__3425:
   movl __3Cundefined_3E,%eax
___L__3426:
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,32(%esp)
   movl __3Cvariable_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3429
   movl __3Cvariable_3E,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3429:
   movl $2,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 668
   movl 16(%esp),%eax
   cmpl $0,%eax
   je ___L__3430
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3431
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3431
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3432
   .data
___L__3433:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3433,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3432:
___L__3431:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3434
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3436
   movl __3Clong_3E,%eax
   jmp ___L__3437
___L__3436:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3437:
   jmp ___L__3435
___L__3434:
   movl __3Cundefined_3E,%eax
___L__3435:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl __3Cenv_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3438
   movl __3Cenv_3E,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3438:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3439
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3439
   movl $1,%eax
   movl %eax,24(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3440
   .data
___L__3441:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3441,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3440:
___L__3439:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3442
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3444
   movl __3Clong_3E,%eax
   jmp ___L__3445
___L__3444:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3445:
   jmp ___L__3443
___L__3442:
   movl __3Cundefined_3E,%eax
___L__3443:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3446
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3446:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
   cmpl 20(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__3430:
   addl $56,%esp
   leave
   ret
## defunc new-<context>
   .text
___L__3447:
## frame 16 24 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 657
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 658
   movl 68(%esp),%eax
   cmpl $0,%eax
   je ___L__3450
   movl 68(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3451
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3451
   movl $1,%eax
   movl %eax,28(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $1,%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3452
   .data
___L__3453:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3453,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3452:
___L__3451:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3454
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3456
   movl __3Clong_3E,%eax
   jmp ___L__3457
___L__3456:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3457:
   jmp ___L__3455
___L__3454:
   movl __3Cundefined_3E,%eax
___L__3455:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3458
   movl __3Ccontext_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3458:
   movl $3,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
___L__3450:
   cmpl $0,%eax
   je ___L__3448
## eval.l 659
## eval.l 660
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3459
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3459
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3460
   .data
___L__3461:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3461,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3460:
___L__3459:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3462
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3464
   movl __3Clong_3E,%eax
   jmp ___L__3465
___L__3464:
   movl $-1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3465:
   jmp ___L__3463
___L__3462:
   movl __3Cundefined_3E,%eax
___L__3463:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3466
   movl __3Ccontext_3E,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3466:
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 36(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
## eval.l 661
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3467
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3467
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
   subl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__3468
   .data
___L__3469:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3469,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3468:
___L__3467:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3470
   movl $1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3472
   movl __3Clong_3E,%eax
   jmp ___L__3473
___L__3472:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3473:
   jmp ___L__3471
___L__3470:
   movl __3Cundefined_3E,%eax
___L__3471:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3474
   movl __3Ccontext_3E,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3474:
   movl 72(%esp),%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
   jmp ___L__3449
___L__3448:
## eval.l 662
   movl 64(%esp),%eax
   movl %eax,20(%esp)
   movl 68(%esp),%eax
   movl %eax,24(%esp)
   movl 72(%esp),%eax
   movl %eax,28(%esp)
   movl _new_2Dbase_2D_3Ccontext_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 663
   movl 68(%esp),%eax
   cmpl $0,%eax
   je ___L__3475
   movl 68(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3476
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3476
   movl $1,%eax
   movl %eax,20(%esp)
   movl $16,%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   subl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $1,%eax
   andl 20(%esp),%eax
   cmpl $0,%eax
   jne ___L__3477
   .data
___L__3478:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3478,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl _fatal1,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   movl 36(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3477:
___L__3476:
   movl 24(%esp),%eax
   cmpl $0,%eax
   je ___L__3479
   movl $1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   je ___L__3481
   movl __3Clong_3E,%eax
   jmp ___L__3482
___L__3481:
   movl $-1,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3482:
   jmp ___L__3480
___L__3479:
   movl __3Cundefined_3E,%eax
___L__3480:
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,36(%esp)
   movl __3Ccontext_3E,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3483
   movl __3Ccontext_3E,%eax
   movl %eax,36(%esp)
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl _type__check__fail,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3483:
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $3,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 32(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
___L__3475:
___L__3449:
   movl 16(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc new-base-<context>
   .text
___L__3484:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 641
   movl __3Ccontext_3E,%eax
   movl %eax,16(%esp)
   movl $20,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 642
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 643
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 644
   movl 56(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 645
   movl $0,%eax
   movl %eax,16(%esp)
   movl _new_2D_3Carray_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 642
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<env>
   .text
___L__3485:
## frame 16 28 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 632
   movl __3Cenv_3E,%eax
   movl %eax,16(%esp)
   movl $20,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 633
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 634
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 635
   movl 64(%esp),%eax
   cmpl $0,%eax
   je ___L__3486
   movl 68(%esp),%eax
   movl %eax,16(%esp)
   movl 64(%esp),%eax
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3488
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3488
   movl $1,%eax
   movl %eax,32(%esp)
   movl $16,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $1,%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   jne ___L__3489
   .data
___L__3490:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3490,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,40(%esp)
   movl _fatal1,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   movl 40(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3489:
___L__3488:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3491
   movl $1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   andl 40(%esp),%eax
   cmpl $0,%eax
   je ___L__3493
   movl __3Clong_3E,%eax
   jmp ___L__3494
___L__3493:
   movl $-1,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 40(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3494:
   jmp ___L__3492
___L__3491:
   movl __3Cundefined_3E,%eax
___L__3492:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl __3Cenv_3E,%eax
   cmpl 40(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3495
   movl __3Cenv_3E,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,36(%esp)
   movl _type__check__fail,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   movl 36(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3495:
   movl $1,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3496
   movl $1,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3496
   movl $1,%eax
   movl %eax,36(%esp)
   movl $16,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   subl 40(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $1,%eax
   andl 36(%esp),%eax
   cmpl $0,%eax
   jne ___L__3497
   .data
___L__3498:
   .asciz "attempt to access dead object %p of type %d"
   .text
   movl $___L__3498,%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl _fatal1,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
___L__3497:
___L__3496:
   movl 28(%esp),%eax
   cmpl $0,%eax
   je ___L__3499
   movl $1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   andl 32(%esp),%eax
   cmpl $0,%eax
   je ___L__3501
   movl __3Clong_3E,%eax
   jmp ___L__3502
___L__3501:
   movl $-1,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
___L__3502:
   jmp ___L__3500
___L__3499:
   movl __3Cundefined_3E,%eax
___L__3500:
   movl %eax,28(%esp)
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl __3Clong_3E,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3503
   movl __3Clong_3E,%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   movl %eax,40(%esp)
   movl _type__check__fail,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3503:
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl 16(%esp),%eax
   jmp ___L__3487
___L__3486:
   movl $0,%eax
___L__3487:
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 636
   movl 72(%esp),%eax
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 637
   movl $0,%eax
   movl %eax,16(%esp)
   movl _new_2D_3Carray_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $3,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 633
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc set_tail
## defunc set_head
## defunc get_tail
## defunc get_head
## defunc get_long
## defunc is_long
## defunc put
## defunc get
## defunc type_check_fail
   .text
___L__3504:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 608
   .data
___L__3505:
   .asciz "illegal type: expected %d got %d"
   .text
   movl $___L__3505,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl 52(%esp),%eax
   movl %eax,24(%esp)
   movl _fatal2,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc is
## defunc get-type
## defunc new-<reader>
   .text
___L__3506:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 590
   movl __3Creader_3E,%eax
   movl %eax,16(%esp)
   movl $12,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc new-<variable>
   .text
___L__3507:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 581
   movl __3Cvariable_3E,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 582
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 583
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 584
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 585
   movl 56(%esp),%eax
   movl %eax,16(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 586
   movl 60(%esp),%eax
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $3,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 582
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<subr>
   .text
___L__3508:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 574
   movl __3Csubr_3E,%eax
   movl %eax,16(%esp)
   movl $12,%eax
   movl %eax,20(%esp)
   movl _new_2Dbits,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 575
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 576
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 577
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 575
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<fixed>
   .text
___L__3509:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 568
   movl __3Cfixed_3E,%eax
   movl %eax,16(%esp)
   movl $4,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 569
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 570
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 569
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<form>
   .text
___L__3510:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 561
   movl __3Cform_3E,%eax
   movl %eax,16(%esp)
   movl $8,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 562
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 563
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 564
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 562
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<expr>
   .text
___L__3511:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 555
   movl __3Cexpr_3E,%eax
   movl %eax,16(%esp)
   movl $16,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 556
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 557
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<array>
   .text
___L__3512:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 547
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3513
   movl 48(%esp),%eax
   jmp ___L__3514
___L__3513:
   movl $1,%eax
___L__3514:
   movl %eax,16(%esp)
## eval.l 548
   movl __3Carray_3E,%eax
   movl %eax,20(%esp)
   movl $8,%eax
   movl %eax,24(%esp)
   movl _new_2Doops,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,24(%esp)
## eval.l 549
   leal 24(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__push__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 550
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl 24(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
## eval.l 551
   movl __3C__array_3E,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl $4,%eax
   mull 28(%esp)
   movl %eax,28(%esp)
   movl _new_2Doops,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,28(%esp)
   movl $1,%eax
   movl %eax,20(%esp)
   movl 24(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 20(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 28(%esp),%eax
   movl %eax,(%ecx)
   movl 24(%esp),%eax
   movl %eax,28(%esp)
## eval.l 549
   leal 24(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__pop__root,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 28(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<pair>
   .text
___L__3515:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 541
   movl __3Cpair_3E,%eax
   movl %eax,16(%esp)
   movl $12,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 542
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 543
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<symbol>
   .text
___L__3516:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 536
   movl __3Csymbol_3E,%eax
   movl %eax,16(%esp)
   movl $4,%eax
   movl %eax,20(%esp)
   movl _new_2Dbits,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 537
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _strdup_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<string>
   .text
___L__3517:
## frame 16 20 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
## eval.l 530
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl _strlen_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 531
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl ___new_2D_3Cstring_3E,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 532
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   movl %eax,32(%esp)
   movl _memcpy_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   movl 32(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   movl 20(%esp),%eax
   addl $56,%esp
   leave
   ret
## defunc _new-<string>
   .text
___L__3518:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 523
   movl __3Cstring_3E,%eax
   movl %eax,16(%esp)
   movl $8,%eax
   movl %eax,20(%esp)
   movl _new_2Doops,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 524
   leal 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__push__root,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 525
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _new_2D_3Clong_3E,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
## eval.l 526
   movl $1,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   addl 16(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__malloc__atomic,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   movl %eax,16(%esp)
## eval.l 524
   leal 20(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__pop__root,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-<long>
   .text
___L__3519:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 518
   movl __3Clong_3E,%eax
   movl %eax,16(%esp)
   movl $4,%eax
   movl %eax,20(%esp)
   movl _new_2Dbits,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 519
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 16(%esp),%eax
   movl %eax,(%ecx)
   movl 20(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-oops
   .text
___L__3520:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 511
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__malloc,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 512
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc new-bits
   .text
___L__3521:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 506
   movl 52(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__malloc__atomic,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 507
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl $-1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc opt_verbose
## defunc f_define
## defunc f_let
## defunc f_lambda
## defunc f_quote
## defunc f_set
## defunc s_applicators
## defunc s_evaluators
## defunc s_encoders
## defunc s_expanders
## defunc s_unquote_splicing
## defunc s_unquote
## defunc s_quasiquote
## defunc s_quote
## defunc s_let
## defunc s_lambda
## defunc s_set
## defunc s_define
## defunc s_dot
## defunc s_t
## defunc applicators
## defunc evaluators
## defunc encoders
## defunc expanders
## defunc globals
## defunc symbols
## defunc <context>
## defunc <env>
## defunc <variable>
## defunc <subr>
## defunc <fixed>
## defunc <form>
## defunc <expr>
## defunc <array>
## defunc <_array>
## defunc <pair>
## defunc <symbol>
## defunc <string>
## defunc <double>
## defunc <long>
## defunc <data>
## defunc <undefined>
## defunc DONE
## defunc EOF
## defunc fscanf
## defunc fflush
## defunc fclose
## defunc fdopen
## defunc fopen
## defunc ungetc
## defunc getc
## defunc putc
## defunc strtoul
## defunc strdup
## defunc strcmp
## defunc strlen
## defunc gc_malloc_atomic
   .text
___L__3522:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 426
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__malloc,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 428
   movl $3,%eax
   movl %eax,20(%esp)
   movl $1,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _oop_2D_3Eheader,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc gc_malloc
   .text
___L__3523:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
   movl $0,%eax
## eval.l 380
   movl 64(%esp),%eax
   movl %eax,16(%esp)
   movl $3,%eax
   addl 16(%esp),%eax
   movl %eax,16(%esp)
   movl $-4,%eax
   andl 16(%esp),%eax
   movl %eax,64(%esp)
## eval.l 383
   movl _gc__frequency,%eax
   movl %eax,16(%esp)
   movl _gc__alloc__count,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3524
## eval.l 384
   movl _gc__gcollect,%eax
   call *%eax
   jmp ___L__3525
___L__3524:
___L__3525:
## eval.l 386
   movl $2,%eax
   movl %eax,16(%esp)
   movl _gc__memory__last,%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 16(%esp),%eax
   movl %eax,20(%esp)
## eval.l 388
   movl $16,%eax
   movl %eax,24(%esp)
   movl 64(%esp),%eax
   addl 24(%esp),%eax
   movl %eax,24(%esp)
## eval.l 390
   jmp ___L__3527
___L__3526:
## eval.l 391
   jmp ___L__3529
___L__3528:
___L__3529:
## eval.l 392
   movl $0,%eax
## eval.l 394
   movl $1,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
   movl $0,%eax
   cmpl 28(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3530
## eval.l 395
   movl $0,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,28(%esp)
## eval.l 396
   jmp ___L__3533
___L__3532:
## eval.l 398
   movl $2,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 399
   movl $2,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $2,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 400
   movl $0,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $16,%eax
   addl 36(%esp),%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   addl 36(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
   movl %eax,28(%esp)
## eval.l 401
   movl _gc__memory__last,%eax
   movl %eax,36(%esp)
   movl 32(%esp),%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3534
   movl 20(%esp),%eax
   movl %eax,_gc__memory__last
___L__3534:
___L__3533:
## eval.l 396
   movl $1,%eax
   movl %eax,32(%esp)
   movl $2,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
   movl $0,%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3535
## eval.l 397
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl $16,%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
   movl $2,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__3535:
   cmpl $0,%eax
   jne ___L__3532
## eval.l 403
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 24(%esp),%eax
   cmpl 32(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3538
   movl 28(%esp),%eax
   movl %eax,32(%esp)
   movl 64(%esp),%eax
   cmpl 32(%esp),%eax
   sete %al
   movzbl %al,%eax
___L__3538:
   cmpl $0,%eax
   je ___L__3536
## eval.l 404
   movl $0,%eax
## eval.l 406
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 28(%esp),%eax
   cmpl 32(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3539
## eval.l 407
   movl 24(%esp),%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
   movl $0,%eax
## eval.l 409
   movl $16,%eax
   movl %eax,36(%esp)
   movl 64(%esp),%eax
   addl 36(%esp),%eax
   movl %eax,36(%esp)
   movl 28(%esp),%eax
   subl 36(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 410
   movl $0,%eax
   movl %eax,36(%esp)
   movl $1,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 411
   movl $2,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
   movl $2,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 412
   movl 64(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 413
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $2,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 40(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 36(%esp),%eax
   movl %eax,(%ecx)
## eval.l 414
   movl 64(%esp),%eax
   movl %eax,28(%esp)
___L__3539:
## eval.l 415
   movl $1,%eax
   movl %eax,32(%esp)
   movl $1,%eax
   movl %eax,36(%esp)
   movl 20(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 36(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 32(%esp),%eax
   movl %eax,(%ecx)
## eval.l 416
   movl 20(%esp),%eax
   movl %eax,_gc__memory__last
   movl $0,%eax
## eval.l 418
   movl $16,%eax
   movl %eax,32(%esp)
   movl 20(%esp),%eax
   addl 32(%esp),%eax
   movl %eax,32(%esp)
## eval.l 419
   movl 32(%esp),%eax
   movl %eax,36(%esp)
   movl $0,%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   movl %eax,44(%esp)
   movl _memset_24stub,%eax
   movl 36(%esp),%ecx
   movl %ecx,0(%esp)
   movl 40(%esp),%ecx
   movl %ecx,4(%esp)
   movl 44(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 420
   movl $1,%eax
   movl %eax,44(%esp)
   movl _gc__alloc__count,%eax
   addl 44(%esp),%eax
   movl %eax,_gc__alloc__count
## eval.l 421
   movl 32(%esp),%eax
   jmp ___L__3540
   jmp ___L__3537
___L__3536:
___L__3537:
   jmp ___L__3531
___L__3530:
___L__3531:
## eval.l 422
   movl $2,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 28(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl %eax,28(%esp)
   movl 16(%esp),%eax
   cmpl 28(%esp),%eax
   setne %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3528
## eval.l 423
   movl 64(%esp),%eax
   movl %eax,28(%esp)
   movl $16,%eax
   addl 28(%esp),%eax
   movl %eax,28(%esp)
   movl _gc__quantum,%eax
   movl %eax,32(%esp)
   movl _max,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   movl 32(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,32(%esp)
   movl _gc__grow__memory,%eax
   movl 32(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3527:
   movl $1,%eax
   cmpl $0,%eax
   jne ___L__3526
___L__3540:
   addl $56,%esp
   leave
   ret
## defunc gc_gcollect
   .text
___L__3541:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
   movl $0,%eax
   movl $0,%eax
## eval.l 357
   movl $0,%eax
   movl %eax,16(%esp)
## eval.l 359
   jmp ___L__3543
___L__3542:
   movl $0,%eax
## eval.l 365
   movl $0,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl _gc__roots,%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl _gc__mark__and__trace,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 366
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $1,%eax
   addl 20(%esp),%eax
   movl %eax,16(%esp)
___L__3543:
## eval.l 359
   movl _gc__root__count,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
   cmpl 20(%esp),%eax
   setl %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3542
## eval.l 367
   movl _gc__sweep,%eax
   call *%eax
## eval.l 368
   movl $0,%eax
   movl %eax,_gc__alloc__count
   addl $40,%esp
   leave
   ret
## defunc gc_sweep
   .text
___L__3544:
## frame 16 32 48 64
   pushl %ebp
   movl %esp,%ebp
   subl $56,%esp
   movl $0,%eax
## eval.l 309
   movl _gc__memory__base,%eax
   movl %eax,16(%esp)
   movl $0,%eax
   movl %eax,20(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
## eval.l 313
   jmp ___L__3546
___L__3545:
   movl $0,%eax
## eval.l 316
   movl $1,%eax
   movl %eax,32(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 32(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,32(%esp)
## eval.l 317
   movl $0,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,36(%esp)
## eval.l 318
   movl 16(%esp),%eax
   movl %eax,40(%esp)
   movl _header_2Dflags_2Dmarked_3F,%eax
   movl 40(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   cmpl $0,%eax
   je ___L__3547
## eval.l 319
## eval.l 320
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 24(%esp),%eax
   addl 40(%esp),%eax
   movl %eax,24(%esp)
## eval.l 321
   movl $1,%eax
   movl %eax,40(%esp)
   movl 20(%esp),%eax
   addl 40(%esp),%eax
   movl %eax,20(%esp)
## eval.l 324
   movl $4,%eax
   movl %eax,40(%esp)
   movl 32(%esp),%eax
   xorl 40(%esp),%eax
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
   jmp ___L__3548
___L__3547:
## eval.l 326
   movl $0,%eax
## eval.l 329
   movl 36(%esp),%eax
   movl %eax,40(%esp)
   movl 28(%esp),%eax
   addl 40(%esp),%eax
   movl %eax,28(%esp)
## eval.l 330
   movl $0,%eax
   movl %eax,40(%esp)
   movl $1,%eax
   movl %eax,44(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 44(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 40(%esp),%eax
   movl %eax,(%ecx)
___L__3548:
## eval.l 332
   movl $2,%eax
   movl %eax,36(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 36(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
## eval.l 333
   movl 16(%esp),%eax
   movl %eax,36(%esp)
   movl _gc__memory__base,%eax
   cmpl 36(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3549
## eval.l 336
   movl $0,%eax
   movl %eax,16(%esp)
   jmp ___L__3550
___L__3549:
___L__3550:
___L__3546:
   movl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__3545
## eval.l 338
   movl 20(%esp),%eax
   movl %eax,_gc__objects__live
## eval.l 339
   movl 24(%esp),%eax
   movl %eax,_gc__bytes__used
## eval.l 340
   movl 28(%esp),%eax
   movl %eax,_gc__bytes__free
   movl $0,%eax
   addl $56,%esp
   leave
   ret
## defunc gc_mark_and_trace
   .text
___L__3551:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
   movl $0,%eax
## eval.l 281
   movl 48(%esp),%eax
   cmpl $0,%eax
   je ___L__3552
## eval.l 282
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl $1,%eax
   andl 16(%esp),%eax
   cmpl $0,%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3552
## eval.l 283
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _oop_2D_3Eheader,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 284
   movl $1,%eax
   movl %eax,20(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $0,%eax
## eval.l 287
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $1,%eax
   andl 24(%esp),%eax
   cmpl $0,%eax
   jne ___L__3553
   .data
___L__3554:
   .asciz "attempt to mark dead object %p"
   .text
   movl $___L__3554,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _fatal1,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   movl 28(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
___L__3553:
## eval.l 290
   movl $4,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3555
## eval.l 291
## eval.l 292
   movl 16(%esp),%eax
   movl %eax,28(%esp)
   movl _header_2Dflags_2Dmark,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
## eval.l 295
   movl $2,%eax
   movl %eax,28(%esp)
   movl 20(%esp),%eax
   andl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3556
## eval.l 298
   movl $2,%eax
   movl %eax,28(%esp)
   movl $0,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl 28(%esp),%ecx
   sarl %cl,%eax
   movl %eax,28(%esp)
   movl $0,%eax
## eval.l 300
   jmp ___L__3558
___L__3557:
## eval.l 301
   movl $1,%eax
   movl %eax,24(%esp)
   movl 28(%esp),%eax
   subl 24(%esp),%eax
   movl %eax,28(%esp)
   movl $0,%eax
## eval.l 303
   movl 28(%esp),%eax
   movl %eax,24(%esp)
   movl 48(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 24(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,24(%esp)
   movl _gc__mark__and__trace,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3558:
   movl 28(%esp),%eax
   cmpl $0,%eax
   jne ___L__3557
___L__3556:
___L__3555:
___L__3552:
   addl $40,%esp
   leave
   ret
## defunc gc_size
   .text
___L__3559:
## frame 0 8 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 273
   movl $0,%eax
   movl %eax,0(%esp)
   movl $16,%eax
   movl %eax,4(%esp)
   movl 32(%esp),%eax
   subl 4(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 0(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   addl $24,%esp
   leave
   ret
## defunc gc_pop_root
   .text
___L__3560:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 265
   movl _gc__root__count,%eax
   cmpl $0,%eax
   jne ___L__3561
   .data
___L__3562:
   .asciz "root table underflow"
   .text
   movl $___L__3562,%eax
   movl %eax,16(%esp)
   movl _fatal,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3561:
## eval.l 266
   movl $1,%eax
   movl %eax,16(%esp)
   movl _gc__root__count,%eax
   subl 16(%esp),%eax
   movl %eax,_gc__root__count
   movl $0,%eax
## eval.l 268
   movl _gc__root__count,%eax
   movl %eax,16(%esp)
   movl _gc__roots,%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 16(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   jne ___L__3563
   .data
___L__3564:
   .asciz "non-lifo root"
   .text
   movl $___L__3564,%eax
   movl %eax,16(%esp)
   movl _fatal,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3563:
   addl $40,%esp
   leave
   ret
## defunc gc_push_root
   .text
___L__3565:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 254
   movl _gc__root__max,%eax
   movl %eax,16(%esp)
   movl _gc__root__count,%eax
   cmpl 16(%esp),%eax
   sete %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3566
## eval.l 255
   movl $32,%eax
   movl %eax,16(%esp)
   movl _gc__root__max,%eax
   movl %eax,20(%esp)
   movl $2,%eax
   mull 20(%esp)
   movl %eax,20(%esp)
   movl _max,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl %eax,_gc__root__max
   movl %eax,20(%esp)
   movl $4,%eax
   mull 20(%esp)
   movl %eax,20(%esp)
   movl _malloc_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,20(%esp)
## eval.l 256
   movl 20(%esp),%eax
   movl %eax,16(%esp)
   movl _gc__roots,%eax
   movl %eax,24(%esp)
   movl _gc__root__count,%eax
   movl %eax,28(%esp)
   movl $4,%eax
   mull 28(%esp)
   movl %eax,28(%esp)
   movl _memcpy_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 24(%esp),%ecx
   movl %ecx,4(%esp)
   movl 28(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
## eval.l 257
   movl _gc__roots,%eax
   cmpl $0,%eax
   je ___L__3567
   movl _gc__roots,%eax
   movl %eax,28(%esp)
   movl _free_24stub,%eax
   movl 28(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3567:
## eval.l 258
   movl 20(%esp),%eax
   movl %eax,_gc__roots
___L__3566:
## eval.l 259
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _gc__root__count,%eax
   movl %eax,28(%esp)
   movl _gc__roots,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   movl $0,%eax
## eval.l 261
   movl _gc__root__count,%eax
   movl %eax,20(%esp)
   movl $1,%eax
   addl 20(%esp),%eax
   movl %eax,_gc__root__count
   addl $40,%esp
   leave
   ret
## defunc gc_grow_memory
   .text
___L__3568:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 246
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _new__memory__block,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 247
   movl $2,%eax
   movl %eax,20(%esp)
   movl _gc__memory__last,%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 20(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
## eval.l 248
   movl 16(%esp),%eax
   movl %eax,20(%esp)
   movl $2,%eax
   movl %eax,24(%esp)
   movl _gc__memory__last,%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 24(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 20(%esp),%eax
   movl %eax,(%ecx)
   addl $40,%esp
   leave
   ret
## defunc gc_initialise
   .text
___L__3569:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 239
   movl _gc__quantum,%eax
   movl %eax,16(%esp)
   movl _new__memory__block,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 240
   movl 16(%esp),%eax
   movl %eax,_gc__memory__base
## eval.l 241
   movl 16(%esp),%eax
   movl %eax,_gc__memory__last
   addl $40,%esp
   leave
   ret
## defunc new_memory_block
   .text
___L__3570:
## frame 16 16 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 225
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl _malloc_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl %eax,16(%esp)
## eval.l 226
   movl $16,%eax
   movl %eax,20(%esp)
   movl 48(%esp),%eax
   subl 20(%esp),%eax
   movl %eax,20(%esp)
## eval.l 228
   movl 16(%esp),%eax
   cmpl $0,%eax
   jne ___L__3571
   .data
___L__3572:
   .asciz "out of memory"
   .text
   movl $___L__3572,%eax
   movl %eax,24(%esp)
   movl _fatal,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
___L__3571:
## eval.l 229
   movl 20(%esp),%eax
   movl %eax,24(%esp)
   movl $0,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
## eval.l 230
   movl $0,%eax
   movl %eax,24(%esp)
   movl $1,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
## eval.l 231
   movl 16(%esp),%eax
   movl %eax,24(%esp)
   movl $2,%eax
   movl %eax,28(%esp)
   movl 16(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 28(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 24(%esp),%eax
   movl %eax,(%ecx)
   movl $0,%eax
   movl 16(%esp),%eax
   addl $40,%esp
   leave
   ret
## defunc header->oop
   .text
___L__3573:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 220
   movl $16,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   addl 0(%esp),%eax
   addl $24,%esp
   leave
   ret
## defunc oop->header
   .text
___L__3574:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 215
   movl $16,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   subl 0(%esp),%eax
   addl $24,%esp
   leave
   ret
## defunc header-flags-atom?
   .text
___L__3575:
## frame 0 8 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 209
   movl $1,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 0(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,0(%esp)
## eval.l 210
   movl $2,%eax
   movl %eax,4(%esp)
   movl 0(%esp),%eax
   andl 4(%esp),%eax
   addl $24,%esp
   leave
   ret
## defunc header-flags-mark
   .text
___L__3576:
## frame 0 12 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 205
   movl $1,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 0(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,0(%esp)
## eval.l 206
   movl $4,%eax
   movl %eax,4(%esp)
   movl 0(%esp),%eax
   orl 4(%esp),%eax
   movl %eax,4(%esp)
   movl $1,%eax
   movl %eax,8(%esp)
   movl 32(%esp),%eax
## SET-OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the first TI32 operand
##   PRE:  oop val = stack[y] defined by the second TI32 operand
##   POST: oop eax still = obj_base_ptr
##		but eax[offset] == val
   movl 8(%esp),%ecx
   leal (%eax,%ecx,4),%ecx
   movl 4(%esp),%eax
   movl %eax,(%ecx)
   addl $24,%esp
   leave
   ret
## defunc header-flags-marked?
   .text
___L__3577:
## frame 0 8 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 201
   movl $1,%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
## OOP-AT
##   PRE:  oop eax = obj_base_ptr
##   PRE:  long offset = stack[x] defined by the TI32 operand
##   POST: oop eax = obj_base_ptr[offset]
##		i.e. eax is overwitten with the address of the oop-at x
   movl 0(%esp),%ecx		# int ecx = stack[x / 4]; // ecx is the offset 
   leal (%eax,%ecx,4),%ecx	# void *ecx = eax + (ecx * 4); // base + (offset * oop-size)
   movl (%ecx),%eax		# oop eax = *ecx;
   movl %eax,0(%esp)
## eval.l 202
   movl $4,%eax
   movl %eax,4(%esp)
   movl 0(%esp),%eax
   andl 4(%esp),%eax
   addl $24,%esp
   leave
   ret
## defunc <header>-flags-used+atom
## defunc <header>-flags-mark
## defunc <header>-flags-atom
## defunc <header>-flags-used
## defunc <header>-type
## defunc <header>-next
## defunc <header>-flags
## defunc <header>-size
## defunc <header>
## defunc gc_collection_count
## defunc gc_alloc_count
## defunc gc_memory_last
## defunc gc_memory_base
## defunc gc_root_max
## defunc gc_root_count
## defunc gc_roots
## defunc gc_bytes_free
## defunc gc_bytes_used
## defunc gc_objects_live
## defunc gc_frequency
## defunc gc_quantum
## defunc k_error
## defunc fatal2
   .text
___L__3578:
## frame 16 12 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 150
   .data
___L__3579:
   .asciz "\012eval.k: "
   .text
   movl $___L__3579,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl 56(%esp),%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   movl 24(%esp),%ecx
   movl %ecx,8(%esp)
   call *%eax
   .data
___L__3580:
   .asciz "\012"
   .text
   movl $___L__3580,%eax
   movl %eax,24(%esp)
   movl _printf_24stub,%eax
   movl 24(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc fatal1
   .text
___L__3581:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 149
   .data
___L__3582:
   .asciz "\012eval.k: "
   .text
   movl $___L__3582,%eax
   movl %eax,16(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl 48(%esp),%eax
   movl %eax,16(%esp)
   movl 52(%esp),%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   .data
___L__3583:
   .asciz "\012"
   .text
   movl $___L__3583,%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   movl _die,%eax
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc fatal
   .text
___L__3584:
## frame 16 8 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 148
   .data
___L__3585:
   .asciz "\012eval.k: %s\012"
   .text
   movl $___L__3585,%eax
   movl %eax,16(%esp)
   movl 48(%esp),%eax
   movl %eax,20(%esp)
   movl _printf_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   movl 20(%esp),%ecx
   movl %ecx,4(%esp)
   call *%eax
   movl $1,%eax
   movl %eax,20(%esp)
   movl _exit_24stub,%eax
   movl 20(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc die
   .text
___L__3586:
## frame 16 4 32 48
   pushl %ebp
   movl %esp,%ebp
   subl $40,%esp
## eval.l 822
   movl _k__dump__stack,%eax
   call *%eax
## eval.l 823
   movl $1,%eax
   movl %eax,16(%esp)
   movl _exit_24stub,%eax
   movl 16(%esp),%ecx
   movl %ecx,0(%esp)
   call *%eax
   addl $40,%esp
   leave
   ret
## defunc trace_depth
## defunc trace_stack
## defunc max
   .text
___L__3587:
## frame 0 4 16 32
   pushl %ebp
   movl %esp,%ebp
   subl $24,%esp
## eval.l 141
   movl 36(%esp),%eax
   movl %eax,0(%esp)
   movl 32(%esp),%eax
   cmpl 0(%esp),%eax
   setg %al
   movzbl %al,%eax
   cmpl $0,%eax
   je ___L__3588
   movl 32(%esp),%eax
   jmp ___L__3589
___L__3588:
   movl 36(%esp),%eax
___L__3589:
   addl $24,%esp
   leave
   ret
## defunc size-of-structure
## defunc stderr
## defunc stdout
## defunc stdin
## defunc input
## defunc arguments
## defunc %typecheck
   .text
___L__3590:
## frame 0 0 0 16
   pushl %ebp
   movl %esp,%ebp
   subl $8,%esp
   movl 20(%esp),%eax
   addl $8,%esp
   leave
   ret
## defunc dlsym
## defunc dlclose
## defunc dlopen
## defunc isatty
## defunc snprintf
## defunc sprintf
## defunc fprintf
## defunc printf
## defunc memmove
## defunc memcpy
## defunc memset
## defunc free
## defunc realloc
## defunc malloc
## defunc exit
## defunc abort
## defunc reader-state
## defunc <reader>-col
## defunc <reader>-line
## defunc <reader>-source
## defunc <reader>
## defunc <buffer>-position
## defunc <buffer>-size
## defunc <buffer>-contents
## defunc <buffer>
   .data
   .globl _define_2Dfsubr
_define_2Dfsubr:
   .long ___L__242
   .text
   .data
   .globl _define_2Dsubr
_define_2Dsubr:
   .long ___L__251
   .text
   .data
   .globl _subr__dlopen
_subr__dlopen:
   .long ___L__260
   .text
   .data
   .globl _subr__read
_subr__read:
   .long ___L__296
   .text
   .data
   .globl _repl__stream
_repl__stream:
   .long ___L__322
   .text
   .data
   .globl _subr__verbose
_subr__verbose:
   .long ___L__375
   .text
   .data
   .globl _subr__long__string
_subr__long__string:
   .long ___L__394
   .text
   .data
   .globl _subr__symbol__string
_subr__symbol__string:
   .long ___L__421
   .text
   .data
   .globl _subr__string__symbol
_subr__string__symbol:
   .long ___L__447
   .text
   .data
   .globl _subr__set__string__at
_subr__set__string__at:
   .long ___L__473
   .text
   .data
   .globl _subr__string__at
_subr__string__at:
   .long ___L__515
   .text
   .data
   .globl _subr__string__length
_subr__string__length:
   .long ___L__542
   .text
   .data
   .globl _subr__set__array__at
_subr__set__array__at:
   .long ___L__559
   .text
   .data
   .globl _subr__array__at
_subr__array__at:
   .long ___L__577
   .text
   .data
   .globl _subr__array__length
_subr__array__length:
   .long ___L__595
   .text
   .data
   .globl _subr__set__oop__at
_subr__set__oop__at:
   .long ___L__596
   .text
   .data
   .globl _subr__oop__at
_subr__oop__at:
   .long ___L__621
   .text
   .data
   .globl _subr__set__cdr
_subr__set__cdr:
   .long ___L__646
   .text
   .data
   .globl _subr__set__car
_subr__set__car:
   .long ___L__663
   .text
   .data
   .globl _subr__cdr
_subr__cdr:
   .long ___L__680
   .text
   .data
   .globl _subr__car
_subr__car:
   .long ___L__681
   .text
   .data
   .globl _subr__arrayP
_subr__arrayP:
   .long ___L__682
   .text
   .data
   .globl _subr__pairP
_subr__pairP:
   .long ___L__691
   .text
   .data
   .globl _subr__symbolP
_subr__symbolP:
   .long ___L__700
   .text
   .data
   .globl _subr__stringP
_subr__stringP:
   .long ___L__709
   .text
   .data
   .globl _subr__type__of
_subr__type__of:
   .long ___L__718
   .text
   .data
   .globl _subr__allocate
_subr__allocate:
   .long ___L__727
   .text
   .data
   .globl _subr__form
_subr__form:
   .long ___L__760
   .text
   .data
   .globl _subr__array
_subr__array:
   .long ___L__761
   .text
   .data
   .globl _subr__string
_subr__string:
   .long ___L__778
   .text
   .data
   .globl _subr__cons
_subr__cons:
   .long ___L__795
   .text
   .data
   .globl _subr__expand
_subr__expand:
   .long ___L__796
   .text
   .data
   .globl _subr__encode
_subr__encode:
   .long ___L__806
   .text
   .data
   .globl _subr__eval
_subr__eval:
   .long ___L__816
   .text
   .data
   .globl _subr__apply
_subr__apply:
   .long ___L__826
   .text
   .data
   .globl _subr__warn
_subr__warn:
   .long ___L__827
   .text
   .data
   .globl _subr__print
_subr__print:
   .long ___L__866
   .text
   .data
   .globl _subr__dump
_subr__dump:
   .long ___L__876
   .text
   .data
   .globl _subr__format
_subr__format:
   .long ___L__886
   .text
   .data
   .globl _subr__getc
_subr__getc:
   .long ___L__951
   .text
   .data
   .globl _subr__close
_subr__close:
   .long ___L__979
   .text
   .data
   .globl _subr__open
_subr__open:
   .long ___L__997
   .text
   .data
   .globl _subr__exit
_subr__exit:
   .long ___L__1017
   .text
   .data
   .globl _subr__abort
_subr__abort:
   .long ___L__1034
   .text
   .data
   .globl _subr__ne
_subr__ne:
   .long ___L__1035
   .text
   .data
   .globl _subr__eq
_subr__eq:
   .long ___L__1097
   .text
   .data
   .globl _subr__gt
_subr__gt:
   .long ___L__1159
   .text
   .data
   .globl _subr__ge
_subr__ge:
   .long ___L__1202
   .text
   .data
   .globl _subr__le
_subr__le:
   .long ___L__1245
   .text
   .data
   .globl _subr__lt
_subr__lt:
   .long ___L__1288
   .text
## form define-relation
   .data
   .globl _subr__shr
_subr__shr:
   .long ___L__1331
   .text
   .data
   .globl _subr__shl
_subr__shl:
   .long ___L__1374
   .text
   .data
   .globl _subr__div
_subr__div:
   .long ___L__1417
   .text
   .data
   .globl _subr__mul
_subr__mul:
   .long ___L__1460
   .text
   .data
   .globl _subr__add
_subr__add:
   .long ___L__1503
   .text
   .data
   .globl _subr__bitxor
_subr__bitxor:
   .long ___L__1546
   .text
   .data
   .globl _subr__bitor
_subr__bitor:
   .long ___L__1589
   .text
   .data
   .globl _subr__bitand
_subr__bitand:
   .long ___L__1632
   .text
## form define-binary
   .data
   .globl _subr__sub
_subr__sub:
   .long ___L__1675
   .text
   .data
   .globl _arity3
_arity3:
   .long ___L__1748
   .text
   .data
   .globl _arity2
_arity2:
   .long ___L__1773
   .text
   .data
   .globl _subr__not
_subr__not:
   .long ___L__1791
   .text
   .data
   .globl _subr__quote
_subr__quote:
   .long ___L__1794
   .text
   .data
   .globl _subr__and
_subr__and:
   .long ___L__1795
   .text
   .data
   .globl _subr__or
_subr__or:
   .long ___L__1807
   .text
   .data
   .globl _subr__if
_subr__if:
   .long ___L__1819
   .text
   .data
   .globl _subr__while
_subr__while:
   .long ___L__1831
   .text
   .data
   .globl _subr__set
_subr__set:
   .long ___L__1843
   .text
   .data
   .globl _subr__let
_subr__let:
   .long ___L__1946
   .text
   .data
   .globl _subr__lambda
_subr__lambda:
   .long ___L__2007
   .text
   .data
   .globl _subr__definedP
_subr__definedP:
   .long ___L__2008
   .text
   .data
   .globl _subr__define
_subr__define:
   .long ___L__2018
   .text
   .data
   .globl _evlist
_evlist:
   .long ___L__2037
   .text
   .data
   .globl _k__encode
_k__encode:
   .long ___L__2047
   .text
   .data
   .globl _enlist
_enlist:
   .long ___L__2243
   .text
   .data
   .globl _k__expand
_k__expand:
   .long ___L__2253
   .text
   .data
   .globl _exlist
_exlist:
   .long ___L__2389
   .text
   .data
   .globl _k__apply
_k__apply:
   .long ___L__2399
   .text
   .data
_counter:
   .long 0
   .text
   .data
   .globl _k__apply__expr
_k__apply__expr:
   .long ___L__2449
   .text
   .data
   .globl _k__eval
_k__eval:
   .long ___L__2572
   .text
   .data
   .globl _k__env__define
_k__env__define:
   .long ___L__2723
   .text
   .data
   .globl _k__env__lookup
_k__env__lookup:
   .long ___L__2777
   .text
   .data
   .globl _k__env__find__variable
_k__env__find__variable:
   .long ___L__2797
   .text
   .data
   .globl _read__quote
_read__quote:
   .long ___L__2836
   .text
   .data
   .globl _read__list
_read__list:
   .long ___L__2839
   .text
   .data
   .globl _k__read
_k__read:
   .long ___L__2847
   .text
   .data
   .globl _read__string
_read__string:
   .long ___L__2893
   .text
   .data
   .globl _read__symbol
_read__symbol:
   .long ___L__2898
   .text
   .data
   .globl _read__number
_read__number:
   .long ___L__2902
   .text
   .data
   .globl _read__char
_read__char:
   .long ___L__2911
   .text
   .data
   .globl _digit__value
_digit__value:
   .long ___L__2947
   .text
   .data
   .globl _is__hexadecimal
_is__hexadecimal:
   .long ___L__2958
   .text
   .data
   .globl _is__octal
_is__octal:
   .long ___L__2963
   .text
   .data
   .globl _intern
_intern:
   .long ___L__2965
   .text
   .data
   .globl _buffer__contents
_buffer__contents:
   .long ___L__2981
   .text
   .data
   .globl _buffer__append__all
_buffer__append__all:
   .long ___L__2982
   .text
   .data
   .globl _buffer__append
_buffer__append:
   .long ___L__2985
   .text
   .data
   .globl _buffer__grow
_buffer__grow:
   .long ___L__2987
   .text
   .data
   .globl _buffer__delete
_buffer__delete:
   .long ___L__2988
   .text
   .data
   .globl _new__buffer
_new__buffer:
   .long ___L__2989
   .text
   .data
   .globl _is__letter
_is__letter:
   .long ___L__2990
   .text
   .data
   .globl _is__alpha
_is__alpha:
   .long ___L__2996
   .text
   .data
   .globl _is__digit16
_is__digit16:
   .long ___L__3000
   .text
   .data
   .globl _is__digit10
_is__digit10:
   .long ___L__3005
   .text
   .data
   .globl _is__blank
_is__blank:
   .long ___L__3007
   .text
   .data
   .globl _k__dump__stack
_k__dump__stack:
   .long ___L__3009
   .text
   .data
   .globl _k__dumpln
_k__dumpln:
   .long ___L__3014
   .text
   .data
   .globl _k__dump
_k__dump:
   .long ___L__3016
   .text
   .data
   .globl _k__println
_k__println:
   .long ___L__3017
   .text
   .data
   .globl _k__print
_k__print:
   .long ___L__3019
   .text
   .data
   .globl _do__print
_do__print:
   .long ___L__3020
   .text
   .data
   .globl _k__array__insert
_k__array__insert:
   .long ___L__3257
   .text
   .data
   .globl _k__array__append
_k__array__append:
   .long ___L__3267
   .text
   .data
   .globl _k__set__array__at
_k__set__array__at:
   .long ___L__3268
   .text
   .data
   .globl _k__array__at
_k__array__at:
   .long ___L__3321
   .text
   .data
   .globl _k__array__length
_k__array__length:
   .long ___L__3355
   .text
   .data
   .globl _k__concat
_k__concat:
   .long ___L__3372
   .text
   .data
   .globl _k__caddr
_k__caddr:
   .long ___L__3382
   .text
   .data
   .globl _k__cddr
_k__cddr:
   .long ___L__3383
   .text
   .data
   .globl _k__cadr
_k__cadr:
   .long ___L__3384
   .text
   .data
   .globl _k__caar
_k__caar:
   .long ___L__3385
   .text
   .data
   .globl _k__cdr
_k__cdr:
   .long ___L__3386
   .text
   .data
   .globl _k__car
_k__car:
   .long ___L__3395
   .text
   .data
   .globl _k__string__length
_k__string__length:
   .long ___L__3404
   .text
   .data
   .globl _is__global
_is__global:
   .long ___L__3421
   .text
   .data
   .globl _new_2D_3Ccontext_3E
_new_2D_3Ccontext_3E:
   .long ___L__3447
   .text
   .data
   .globl _new_2Dbase_2D_3Ccontext_3E
_new_2Dbase_2D_3Ccontext_3E:
   .long ___L__3484
   .text
   .data
   .globl _new_2D_3Cenv_3E
_new_2D_3Cenv_3E:
   .long ___L__3485
   .text
## form set_tail
## form set_head
## form get_tail
## form get_head
## form get_long
## form is_long
## form put
## form get
   .data
   .globl _type__check__fail
_type__check__fail:
   .long ___L__3504
   .text
## form is
## form get-type
   .data
   .globl _new_2D_3Creader_3E
_new_2D_3Creader_3E:
   .long ___L__3506
   .text
   .data
   .globl _new_2D_3Cvariable_3E
_new_2D_3Cvariable_3E:
   .long ___L__3507
   .text
   .data
   .globl _new_2D_3Csubr_3E
_new_2D_3Csubr_3E:
   .long ___L__3508
   .text
   .data
   .globl _new_2D_3Cfixed_3E
_new_2D_3Cfixed_3E:
   .long ___L__3509
   .text
   .data
   .globl _new_2D_3Cform_3E
_new_2D_3Cform_3E:
   .long ___L__3510
   .text
   .data
   .globl _new_2D_3Cexpr_3E
_new_2D_3Cexpr_3E:
   .long ___L__3511
   .text
   .data
   .globl _new_2D_3Carray_3E
_new_2D_3Carray_3E:
   .long ___L__3512
   .text
   .data
   .globl _new_2D_3Cpair_3E
_new_2D_3Cpair_3E:
   .long ___L__3515
   .text
   .data
   .globl _new_2D_3Csymbol_3E
_new_2D_3Csymbol_3E:
   .long ___L__3516
   .text
   .data
   .globl _new_2D_3Cstring_3E
_new_2D_3Cstring_3E:
   .long ___L__3517
   .text
   .data
   .globl ___new_2D_3Cstring_3E
___new_2D_3Cstring_3E:
   .long ___L__3518
   .text
   .data
   .globl _new_2D_3Clong_3E
_new_2D_3Clong_3E:
   .long ___L__3519
   .text
   .data
   .globl _new_2Doops
_new_2Doops:
   .long ___L__3520
   .text
   .data
   .globl _new_2Dbits
_new_2Dbits:
   .long ___L__3521
   .text
   .data
_opt__verbose:
   .long 0
   .text
   .data
_f__define:
   .long 0
   .text
   .data
_f__let:
   .long 0
   .text
   .data
_f__lambda:
   .long 0
   .text
   .data
_f__quote:
   .long 0
   .text
   .data
_f__set:
   .long 0
   .text
   .data
_s__applicators:
   .long 0
   .text
   .data
_s__evaluators:
   .long 0
   .text
   .data
_s__encoders:
   .long 0
   .text
   .data
_s__expanders:
   .long 0
   .text
   .data
_s__unquote__splicing:
   .long 0
   .text
   .data
_s__unquote:
   .long 0
   .text
   .data
_s__quasiquote:
   .long 0
   .text
   .data
_s__quote:
   .long 0
   .text
   .data
_s__let:
   .long 0
   .text
   .data
_s__lambda:
   .long 0
   .text
   .data
_s__set:
   .long 0
   .text
   .data
_s__define:
   .long 0
   .text
   .data
_s__dot:
   .long 0
   .text
   .data
_s__t:
   .long 0
   .text
   .data
_applicators:
   .long 0
   .text
   .data
_evaluators:
   .long 0
   .text
   .data
_encoders:
   .long 0
   .text
   .data
_expanders:
   .long 0
   .text
   .data
_globals:
   .long 0
   .text
   .data
_symbols:
   .long 0
   .text
   .data
__3Ccontext_3E:
   .long 15
   .text
   .data
__3Cenv_3E:
   .long 14
   .text
   .data
__3Cvariable_3E:
   .long 13
   .text
   .data
__3Csubr_3E:
   .long 12
   .text
   .data
__3Cfixed_3E:
   .long 11
   .text
   .data
__3Cform_3E:
   .long 10
   .text
   .data
__3Cexpr_3E:
   .long 9
   .text
   .data
__3Carray_3E:
   .long 8
   .text
   .data
__3C__array_3E:
   .long 7
   .text
   .data
__3Cpair_3E:
   .long 6
   .text
   .data
__3Csymbol_3E:
   .long 5
   .text
   .data
__3Cstring_3E:
   .long 4
   .text
   .data
__3Cdouble_3E:
   .long 3
   .text
   .data
__3Clong_3E:
   .long 2
   .text
   .data
__3Cdata_3E:
   .long 1
   .text
   .data
__3Cundefined_3E:
   .long 0
   .text
   .data
_DONE:
   .long -4
   .text
   .data
_EOF:
   .long -1
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fscanf_24stub:
   .indirect_symbol _fscanf
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fflush_24stub:
   .indirect_symbol _fflush
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fclose_24stub:
   .indirect_symbol _fclose
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fdopen_24stub:
   .indirect_symbol _fdopen
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fopen_24stub:
   .indirect_symbol _fopen
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_ungetc_24stub:
   .indirect_symbol _ungetc
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_getc_24stub:
   .indirect_symbol _getc
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_putc_24stub:
   .indirect_symbol _putc
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_strtoul_24stub:
   .indirect_symbol _strtoul
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_strdup_24stub:
   .indirect_symbol _strdup
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_strcmp_24stub:
   .indirect_symbol _strcmp
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_strlen_24stub:
   .indirect_symbol _strlen
   .long 0
   .text
   .data
   .globl _gc__malloc__atomic
_gc__malloc__atomic:
   .long ___L__3522
   .text
   .data
   .globl _gc__malloc
_gc__malloc:
   .long ___L__3523
   .text
   .data
   .globl _gc__gcollect
_gc__gcollect:
   .long ___L__3541
   .text
   .data
   .globl _gc__sweep
_gc__sweep:
   .long ___L__3544
   .text
   .data
   .globl _gc__mark__and__trace
_gc__mark__and__trace:
   .long ___L__3551
   .text
   .data
   .globl _gc__size
_gc__size:
   .long ___L__3559
   .text
   .data
   .globl _gc__pop__root
_gc__pop__root:
   .long ___L__3560
   .text
   .data
   .globl _gc__push__root
_gc__push__root:
   .long ___L__3565
   .text
   .data
   .globl _gc__grow__memory
_gc__grow__memory:
   .long ___L__3568
   .text
   .data
   .globl _gc__initialise
_gc__initialise:
   .long ___L__3569
   .text
   .data
   .globl _new__memory__block
_new__memory__block:
   .long ___L__3570
   .text
   .data
   .globl _header_2D_3Eoop
_header_2D_3Eoop:
   .long ___L__3573
   .text
   .data
   .globl _oop_2D_3Eheader
_oop_2D_3Eheader:
   .long ___L__3574
   .text
   .data
   .globl _header_2Dflags_2Datom_3F
_header_2Dflags_2Datom_3F:
   .long ___L__3575
   .text
   .data
   .globl _header_2Dflags_2Dmark
_header_2Dflags_2Dmark:
   .long ___L__3576
   .text
   .data
   .globl _header_2Dflags_2Dmarked_3F
_header_2Dflags_2Dmarked_3F:
   .long ___L__3577
   .text
## form <header>-flags-used+atom
## form <header>-flags-mark
## form <header>-flags-atom
## form <header>-flags-used
## form <header>-type
## form <header>-next
## form <header>-flags
## form <header>-size
   .data
__3Cheader_3E:
   .long 67
   .text
   .data
_gc__collection__count:
   .long 0
   .text
   .data
_gc__alloc__count:
   .long 0
   .text
   .data
_gc__memory__last:
   .long 0
   .text
   .data
_gc__memory__base:
   .long 0
   .text
   .data
_gc__root__max:
   .long 0
   .text
   .data
_gc__root__count:
   .long 0
   .text
   .data
_gc__roots:
   .long 0
   .text
   .data
_gc__bytes__free:
   .long 0
   .text
   .data
_gc__bytes__used:
   .long 0
   .text
   .data
_gc__objects__live:
   .long 0
   .text
   .data
_gc__frequency:
   .long 32768
   .text
   .data
_gc__quantum:
   .long 51200
   .text
## form k_error
   .data
   .globl _fatal2
_fatal2:
   .long ___L__3578
   .text
   .data
   .globl _fatal1
_fatal1:
   .long ___L__3581
   .text
   .data
   .globl _fatal
_fatal:
   .long ___L__3584
   .text
   .data
   .globl _die
_die:
   .long ___L__3586
   .text
   .data
_trace__depth:
   .long 0
   .text
   .data
_trace__stack:
   .long 0
   .text
   .data
   .globl _max
_max:
   .long ___L__3587
   .text
## form size-of-structure
   .data
_stderr:
   .long 0
   .text
   .data
_stdout:
   .long 0
   .text
   .data
_stdin:
   .long 0
   .text
   .data
_input:
   .long 0
   .text
   .data
_arguments:
   .long 0
   .text
   .data
   .globl __25typecheck
__25typecheck:
   .long ___L__3590
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_dlsym_24stub:
   .indirect_symbol _dlsym
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_dlclose_24stub:
   .indirect_symbol _dlclose
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_dlopen_24stub:
   .indirect_symbol _dlopen
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_isatty_24stub:
   .indirect_symbol _isatty
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_snprintf_24stub:
   .indirect_symbol _snprintf
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_sprintf_24stub:
   .indirect_symbol _sprintf
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_fprintf_24stub:
   .indirect_symbol _fprintf
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_printf_24stub:
   .indirect_symbol _printf
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_memmove_24stub:
   .indirect_symbol _memmove
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_memcpy_24stub:
   .indirect_symbol _memcpy
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_memset_24stub:
   .indirect_symbol _memset
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_free_24stub:
   .indirect_symbol _free
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_realloc_24stub:
   .indirect_symbol _realloc
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_malloc_24stub:
   .indirect_symbol _malloc
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_exit_24stub:
   .indirect_symbol _exit
   .long 0
   .text
   .section __IMPORT,__pointers,non_lazy_symbol_pointers
_abort_24stub:
   .indirect_symbol _abort
   .long 0
   .text
   .data
_reader_2Dstate:
   .long 0
   .text
## form <reader>-col
## form <reader>-line
## form <reader>-source
   .data
__3Creader_3E:
   .long 66
   .text
## form <buffer>-position
## form <buffer>-size
## form <buffer>-contents
   .data
__3Cbuffer_3E:
   .long 65
   .text
